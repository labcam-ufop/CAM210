

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Nov 23 13:29:00 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44  0000                     
    45                           ; Version 2.20
    46                           ; Generated 12/02/2020 GMT
    47                           ; 
    48                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  0023E4                     __pidataCOMRAM:
    82                           	callstack 0
    83                           
    84                           ;initializer for _duty
    85  0023E4  0032               	dw	50
    86                           
    87                           	psect	smallconst
    88  001000                     __psmallconst:
    89                           	callstack 0
    90  001000  00                 	db	0
    91  001001                     _dpowers:
    92                           	callstack 0
    93  001001  0001               	dw	1
    94  001003  000A               	dw	10
    95  001005  0064               	dw	100
    96  001007  03E8               	dw	1000
    97  001009  2710               	dw	10000
    98  00100B                     __end_of_dpowers:
    99                           	callstack 0
   100  0000                     _TMR0	set	4054
   101  0000                     _RCREG	set	4014
   102  0000                     _TXREG	set	4013
   103  0000                     _RCSTAbits	set	4011
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _SPBRG	set	4015
   106  0000                     _BAUDCONbits	set	4024
   107  0000                     _LATDbits	set	3980
   108  0000                     _INTCON	set	4082
   109  0000                     _T0CON	set	4053
   110  0000                     _INTCONbits	set	4082
   111  0000                     _LATE	set	3981
   112  0000                     _PORTE	set	3972
   113  0000                     _LATD	set	3980
   114  0000                     _PORTD	set	3971
   115  0000                     _LATC	set	3979
   116  0000                     _PORTC	set	3970
   117  0000                     _LATB	set	3978
   118  0000                     _PORTB	set	3969
   119  0000                     _LATA	set	3977
   120  0000                     _PORTA	set	3968
   121  0000                     _TRISE	set	3990
   122  0000                     _TRISD	set	3989
   123  0000                     _TRISC	set	3988
   124  0000                     _TRISB	set	3987
   125  0000                     _TRISA	set	3986
   126  0000                     _TMR1H	set	4047
   127  0000                     _TMR1L	set	4046
   128  0000                     _T1CON	set	4045
   129  0000                     _INTCON2bits	set	4081
   130  0000                     _PORTEbits	set	3972
   131  0000                     _TRISEbits	set	3990
   132  0000                     _PIR1bits	set	3998
   133  0000                     _PR2	set	4043
   134  0000                     _T2CONbits	set	4042
   135  0000                     _CCPR1L	set	4030
   136  0000                     _PORTDbits	set	3971
   137  0000                     _PORTCbits	set	3970
   138  0000                     _TRISDbits	set	3989
   139  0000                     _TRISCbits	set	3988
   140  0000                     _CCP1CON	set	4029
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _ADCON2	set	4032
   145  0000                     _ADCON1	set	4033
   146  0000                     _ADCON0	set	4034
   147  00100B                     STR_2:
   148  00100B  2F                 	db	47
   149  00100C  2A                 	db	42
   150  00100D  25                 	db	37
   151  00100E  30                 	db	48	;'0'
   152  00100F  34                 	db	52	;'4'
   153  001010  64                 	db	100	;'d'
   154  001011  2F                 	db	47
   155  001012  00                 	db	0
   156  001013                     STR_1:
   157  001013  25                 	db	37
   158  001014  30                 	db	48	;'0'
   159  001015  35                 	db	53	;'5'
   160  001016  75                 	db	117	;'u'
   161  001017  00                 	db	0
   162  001018  00                 	db	0	; dummy byte at the end
   163  0000                     
   164                           ; #config settings
   165                           
   166                           	psect	cinit
   167  0022F4                     __pcinit:
   168                           	callstack 0
   169  0022F4                     start_initialization:
   170                           	callstack 0
   171  0022F4                     __initialization:
   172                           	callstack 0
   173                           
   174                           ; Initialize objects allocated to COMRAM (2 bytes)
   175                           ; load TBLPTR registers with __pidataCOMRAM
   176  0022F4  0EE4               	movlw	low __pidataCOMRAM
   177  0022F6  6EF6               	movwf	tblptrl,c
   178  0022F8  0E23               	movlw	high __pidataCOMRAM
   179  0022FA  6EF7               	movwf	tblptrh,c
   180  0022FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   181  0022FE  6EF8               	movwf	tblptru,c
   182  002300  0009               	tblrd		*+	;fetch initializer
   183  002302  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   184  002306  0009               	tblrd		*+	;fetch initializer
   185  002308  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   186                           
   187                           ; Clear objects allocated to COMRAM (51 bytes)
   188  00230C  EE00  F001         	lfsr	0,__pbssCOMRAM
   189  002310  0E33               	movlw	51
   190  002312                     clear_0:
   191  002312  6AEE               	clrf	postinc0,c
   192  002314  06E8               	decf	wreg,f,c
   193  002316  E1FD               	bnz	clear_0
   194  002318                     end_of_initialization:
   195                           	callstack 0
   196  002318                     __end_of__initialization:
   197                           	callstack 0
   198  002318  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   199  00231A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   200  00231C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   201  00231E  6EF8               	movwf	tblptru,c
   202  002320  0100               	movlb	0
   203  002322  EFF5  F00E         	goto	_main	;jump to C main() function
   204                           
   205                           	psect	bssCOMRAM
   206  000001                     __pbssCOMRAM:
   207                           	callstack 0
   208  000001                     _result:
   209                           	callstack 0
   210  000001                     	ds	2
   211  000003                     _count:
   212                           	callstack 0
   213  000003                     	ds	2
   214  000005                     _infrav:
   215                           	callstack 0
   216  000005                     	ds	2
   217  000007                     _buffer_rx:
   218                           	callstack 0
   219  000007                     	ds	20
   220  00001B                     _buffer_tx:
   221                           	callstack 0
   222  00001B                     	ds	20
   223  00002F                     _str:
   224                           	callstack 0
   225  00002F                     	ds	5
   226                           
   227                           	psect	dataCOMRAM
   228  00005C                     __pdataCOMRAM:
   229                           	callstack 0
   230  00005C                     _duty:
   231                           	callstack 0
   232  00005C                     	ds	2
   233                           
   234                           	psect	cstackBANK0
   235  000080                     __pcstackBANK0:
   236                           	callstack 0
   237  000080                     ??_Lcd_Cmd:
   238  000080                     ??_Lcd_Chr_CP:
   239  000080                     ?___aldiv:
   240                           	callstack 0
   241  000080                     serial_rx_str_until@buff:
   242                           	callstack 0
   243  000080                     ___aldiv@dividend:
   244                           	callstack 0
   245                           
   246                           ; 4 bytes @ 0x0
   247  000080                     	ds	2
   248  000082                     Lcd_Chr_CP@data:
   249                           	callstack 0
   250  000082                     Lcd_Cmd@data:
   251                           	callstack 0
   252  000082                     serial_rx_str_until@size:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x2
   256  000082                     	ds	1
   257  000083                     ??_Lcd_Init:
   258  000083                     Lcd_Out@x:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x3
   262  000083                     	ds	1
   263  000084                     Lcd_Init@data:
   264                           	callstack 0
   265  000084                     serial_rx_str_until@term:
   266                           	callstack 0
   267  000084                     Lcd_Out@buffer:
   268                           	callstack 0
   269  000084                     ___aldiv@divisor:
   270                           	callstack 0
   271                           
   272                           ; 4 bytes @ 0x4
   273  000084                     	ds	1
   274  000085                     ??_serial_rx_str_until:
   275                           
   276                           ; 1 bytes @ 0x5
   277  000085                     	ds	1
   278  000086                     Lcd_Out@y:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x6
   282  000086                     	ds	1
   283  000087                     Lcd_Out@data:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0x7
   287  000087                     	ds	1
   288  000088                     ___aldiv@counter:
   289                           	callstack 0
   290  000088                     serial_rx_str_until@i:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x8
   294  000088                     	ds	1
   295  000089                     ___aldiv@sign:
   296                           	callstack 0
   297                           
   298                           ; 1 bytes @ 0x9
   299  000089                     	ds	1
   300  00008A                     ___aldiv@quotient:
   301                           	callstack 0
   302                           
   303                           ; 4 bytes @ 0xA
   304  00008A                     	ds	4
   305  00008E                     PWM1_Init@f:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xE
   309  00008E                     	ds	2
   310  000090                     ??_PWM1_Init:
   311                           
   312                           ; 1 bytes @ 0x10
   313  000090                     	ds	4
   314  000094                     PWM1_Init@temp:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x14
   318  000094                     	ds	2
   319  000096                     
   320                           ; 1 bytes @ 0x16
   321                           
   322                           	psect	cstackCOMRAM
   323  000034                     __pcstackCOMRAM:
   324                           	callstack 0
   325  000034                     ??_isdigit:
   326  000034                     ??i2_Lcd_Chr_CP:
   327  000034                     ??i2_Lcd_Cmd:
   328  000034                     ?_adc_amostra:
   329                           	callstack 0
   330  000034                     ?___wmul:
   331                           	callstack 0
   332  000034                     ?___lwdiv:
   333                           	callstack 0
   334  000034                     ?___lmul:
   335                           	callstack 0
   336  000034                     serial_tx@val:
   337                           	callstack 0
   338  000034                     ___wmul@multiplier:
   339                           	callstack 0
   340  000034                     ___lwdiv@dividend:
   341                           	callstack 0
   342  000034                     ___lmul@multiplier:
   343                           	callstack 0
   344                           
   345                           ; 4 bytes @ 0x0
   346  000034                     	ds	1
   347  000035                     _isdigit$1604:
   348                           	callstack 0
   349  000035                     serial_tx_str@val:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x1
   353  000035                     	ds	1
   354  000036                     ??_adc_amostra:
   355  000036                     isdigit@c:
   356                           	callstack 0
   357  000036                     i2Lcd_Chr_CP@data:
   358                           	callstack 0
   359  000036                     i2Lcd_Cmd@data:
   360                           	callstack 0
   361  000036                     ___wmul@multiplicand:
   362                           	callstack 0
   363  000036                     ___lwdiv@divisor:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x2
   367  000036                     	ds	1
   368  000037                     serial_tx_str@i:
   369                           	callstack 0
   370  000037                     i2Lcd_Out@x:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x3
   374  000037                     	ds	1
   375  000038                     ___wmul@product:
   376                           	callstack 0
   377  000038                     ___lwdiv@quotient:
   378                           	callstack 0
   379  000038                     i2Lcd_Out@buffer:
   380                           	callstack 0
   381  000038                     ___lmul@multiplicand:
   382                           	callstack 0
   383                           
   384                           ; 4 bytes @ 0x4
   385  000038                     	ds	2
   386  00003A                     adc_amostra@canal:
   387                           	callstack 0
   388  00003A                     ___lwdiv@counter:
   389                           	callstack 0
   390  00003A                     i2Lcd_Out@y:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0x6
   394  00003A                     	ds	1
   395  00003B                     ?___lwmod:
   396                           	callstack 0
   397  00003B                     i2Lcd_Out@data:
   398                           	callstack 0
   399  00003B                     ___lwmod@dividend:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x7
   403  00003B                     	ds	1
   404  00003C                     ___lmul@product:
   405                           	callstack 0
   406                           
   407                           ; 4 bytes @ 0x8
   408  00003C                     	ds	1
   409  00003D                     ___lwmod@divisor:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x9
   413  00003D                     	ds	2
   414  00003F                     ___lwmod@counter:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00003F                     	ds	1
   419  000040                     ?_sprintf:
   420                           	callstack 0
   421  000040                     ?___lldiv:
   422                           	callstack 0
   423  000040                     sprintf@sp:
   424                           	callstack 0
   425  000040                     ___lldiv@dividend:
   426                           	callstack 0
   427                           
   428                           ; 4 bytes @ 0xC
   429  000040                     	ds	2
   430  000042                     sprintf@f:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xE
   434  000042                     	ds	2
   435  000044                     ___lldiv@divisor:
   436                           	callstack 0
   437                           
   438                           ; 4 bytes @ 0x10
   439  000044                     	ds	2
   440  000046                     ??_sprintf:
   441                           
   442                           ; 1 bytes @ 0x12
   443  000046                     	ds	2
   444  000048                     ___lldiv@quotient:
   445                           	callstack 0
   446                           
   447                           ; 4 bytes @ 0x14
   448  000048                     	ds	2
   449  00004A                     sprintf@prec:
   450                           	callstack 0
   451                           
   452                           ; 1 bytes @ 0x16
   453  00004A                     	ds	1
   454  00004B                     sprintf@ap:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x17
   458  00004B                     	ds	1
   459  00004C                     ___lldiv@counter:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x18
   463  00004C                     	ds	1
   464  00004D                     ??_PWM1_Set_Duty:
   465  00004D                     sprintf@val:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x19
   469  00004D                     	ds	2
   470  00004F                     PWM1_Set_Duty@d:
   471                           	callstack 0
   472  00004F                     sprintf@flag:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x1B
   476  00004F                     	ds	1
   477  000050                     PWM1_Set_Duty@temp:
   478                           	callstack 0
   479  000050                     sprintf@width:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x1C
   483  000050                     	ds	2
   484  000052                     sprintf@c:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x1E
   488  000052                     	ds	1
   489  000053                     ??_isr:
   490                           
   491                           ; 1 bytes @ 0x1F
   492  000053                     	ds	9
   493                           
   494 ;;
   495 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   496 ;;
   497 ;; *************** function _main *****************
   498 ;; Defined at:
   499 ;;		line 36 in file "mainUART.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   517 ;;Total ram usage:        0 bytes
   518 ;; Hardware stack levels required when called:    5
   519 ;; This function calls:
   520 ;;		_Lcd_Cmd
   521 ;;		_Lcd_Init
   522 ;;		_Lcd_Out
   523 ;;		_PWM1_Init
   524 ;;		_PWM1_Start
   525 ;;		_adc_init
   526 ;;		_serial_init
   527 ;;		_serial_rx_str_until
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  001DEA                     __ptext0:
   535                           	callstack 0
   536  001DEA                     _main:
   537                           	callstack 26
   538  001DEA                     
   539                           ;mainUART.c: 38: ADCON0 = 0b00000000;
   540  001DEA  0E00               	movlw	0
   541  001DEC  6EC2               	movwf	194,c	;volatile
   542                           
   543                           ;mainUART.c: 39: ADCON1 = 0x00;
   544  001DEE  0E00               	movlw	0
   545  001DF0  6EC1               	movwf	193,c	;volatile
   546  001DF2                     
   547                           ;mainUART.c: 42: INTCON2bits.RBPU = 1;
   548  001DF2  8EF1               	bsf	241,7,c	;volatile
   549                           
   550                           ;mainUART.c: 43: T1CON = 0b10000011;
   551  001DF4  0E83               	movlw	131
   552  001DF6  6ECD               	movwf	205,c	;volatile
   553                           
   554                           ;mainUART.c: 46: TMR1L = 0;
   555  001DF8  0E00               	movlw	0
   556  001DFA  6ECE               	movwf	206,c	;volatile
   557                           
   558                           ;mainUART.c: 47: TMR1H = 0;
   559  001DFC  0E00               	movlw	0
   560  001DFE  6ECF               	movwf	207,c	;volatile
   561  001E00                     
   562                           ;mainUART.c: 50: TRISA = 0xFF;
   563  001E00  6892               	setf	146,c	;volatile
   564                           
   565                           ;mainUART.c: 51: TRISB = 0b00000000;
   566  001E02  0E00               	movlw	0
   567  001E04  6E93               	movwf	147,c	;volatile
   568                           
   569                           ;mainUART.c: 52: TRISC = 0b10000001;
   570  001E06  0E81               	movlw	129
   571  001E08  6E94               	movwf	148,c	;volatile
   572                           
   573                           ;mainUART.c: 53: TRISD = 0b00000000;
   574  001E0A  0E00               	movlw	0
   575  001E0C  6E95               	movwf	149,c	;volatile
   576                           
   577                           ;mainUART.c: 54: TRISE = 0b00000001;
   578  001E0E  0E01               	movlw	1
   579  001E10  6E96               	movwf	150,c	;volatile
   580                           
   581                           ;mainUART.c: 56: PORTA = 0;
   582  001E12  0E00               	movlw	0
   583  001E14  6E80               	movwf	128,c	;volatile
   584                           
   585                           ;mainUART.c: 57: LATA = 0;
   586  001E16  0E00               	movlw	0
   587  001E18  6E89               	movwf	137,c	;volatile
   588                           
   589                           ;mainUART.c: 58: PORTB = 0;
   590  001E1A  0E00               	movlw	0
   591  001E1C  6E81               	movwf	129,c	;volatile
   592                           
   593                           ;mainUART.c: 59: LATB = 0;
   594  001E1E  0E00               	movlw	0
   595  001E20  6E8A               	movwf	138,c	;volatile
   596                           
   597                           ;mainUART.c: 60: PORTC = 0;
   598  001E22  0E00               	movlw	0
   599  001E24  6E82               	movwf	130,c	;volatile
   600                           
   601                           ;mainUART.c: 61: LATC = 0;
   602  001E26  0E00               	movlw	0
   603  001E28  6E8B               	movwf	139,c	;volatile
   604                           
   605                           ;mainUART.c: 62: PORTD = 0;
   606  001E2A  0E00               	movlw	0
   607  001E2C  6E83               	movwf	131,c	;volatile
   608                           
   609                           ;mainUART.c: 63: LATD = 0;
   610  001E2E  0E00               	movlw	0
   611  001E30  6E8C               	movwf	140,c	;volatile
   612                           
   613                           ;mainUART.c: 64: PORTE = 0;
   614  001E32  0E00               	movlw	0
   615  001E34  6E84               	movwf	132,c	;volatile
   616                           
   617                           ;mainUART.c: 65: LATE = 0;
   618  001E36  0E00               	movlw	0
   619  001E38  6E8D               	movwf	141,c	;volatile
   620  001E3A                     
   621                           ;mainUART.c: 67: PWM1_Init(1000);
   622  001E3A  0E03               	movlw	3
   623  001E3C  0100               	movlb	0	; () banked
   624  001E3E  6F8F               	movwf	(PWM1_Init@f+1)& (0+255),b
   625  001E40  0EE8               	movlw	232
   626  001E42  6F8E               	movwf	PWM1_Init@f& (0+255),b
   627  001E44  EC7A  F00E         	call	_PWM1_Init	;wreg free
   628  001E48                     
   629                           ;mainUART.c: 68: PWM1_Start();
   630  001E48  ECAC  F011         	call	_PWM1_Start	;wreg free
   631  001E4C                     
   632                           ;mainUART.c: 70: serial_init();
   633  001E4C  ECD5  F011         	call	_serial_init	;wreg free
   634  001E50                     
   635                           ;mainUART.c: 71: adc_init();
   636  001E50  ECEB  F011         	call	_adc_init	;wreg free
   637  001E54                     
   638                           ;mainUART.c: 72: Lcd_Init();
   639  001E54  EC19  F00B         	call	_Lcd_Init	;wreg free
   640  001E58                     
   641                           ;mainUART.c: 73: Lcd_Cmd(12);
   642  001E58  0E0C               	movlw	12
   643  001E5A  EC7E  F00A         	call	_Lcd_Cmd
   644  001E5E                     
   645                           ;mainUART.c: 76: INTCONbits.TMR0IF = 0;
   646  001E5E  94F2               	bcf	242,2,c	;volatile
   647  001E60                     
   648                           ;mainUART.c: 77: INTCONbits.TMR0IE = 1;
   649  001E60  8AF2               	bsf	242,5,c	;volatile
   650  001E62                     
   651                           ;mainUART.c: 78: T0CON = 0b11000101;
   652  001E62  0EC5               	movlw	197
   653  001E64  6ED5               	movwf	213,c	;volatile
   654  001E66                     
   655                           ;mainUART.c: 79: TMR0 = 131;
   656  001E66  0E00               	movlw	0
   657  001E68  6ED7               	movwf	215,c	;volatile
   658  001E6A  0E83               	movlw	131
   659  001E6C  6ED6               	movwf	214,c	;volatile
   660  001E6E                     
   661                           ;mainUART.c: 80: INTCON = 0b11100000;
   662  001E6E  0EE0               	movlw	224
   663  001E70  6EF2               	movwf	242,c	;volatile
   664  001E72                     
   665                           ;mainUART.c: 82: PORTCbits.RC5 = 1;
   666  001E72  8A82               	bsf	130,5,c	;volatile
   667  001E74                     l208:
   668  001E74  0004               	clrwdt		;# 
   669  001E76                     
   670                           ;mainUART.c: 86: serial_rx_str_until(buffer_rx,20,'\n');
   671  001E76  0E07               	movlw	low _buffer_rx
   672  001E78  0100               	movlb	0	; () banked
   673  001E7A  6F80               	movwf	serial_rx_str_until@buff& (0+255),b
   674  001E7C  0E00               	movlw	high _buffer_rx
   675  001E7E  6F81               	movwf	(serial_rx_str_until@buff+1)& (0+255),b
   676  001E80  0E00               	movlw	0
   677  001E82  6F83               	movwf	(serial_rx_str_until@size+1)& (0+255),b
   678  001E84  0E14               	movlw	20
   679  001E86  6F82               	movwf	serial_rx_str_until@size& (0+255),b
   680  001E88  0E0A               	movlw	10
   681  001E8A  6F84               	movwf	serial_rx_str_until@term& (0+255),b
   682  001E8C  ECF4  F00D         	call	_serial_rx_str_until	;wreg free
   683  001E90                     
   684                           ;mainUART.c: 87: Lcd_Out(2, 0, buffer_rx);
   685  001E90  0E00               	movlw	0
   686  001E92  0100               	movlb	0	; () banked
   687  001E94  6F83               	movwf	Lcd_Out@x& (0+255),b
   688  001E96  0E07               	movlw	low _buffer_rx
   689  001E98  6F84               	movwf	Lcd_Out@buffer& (0+255),b
   690  001E9A  0E00               	movlw	high _buffer_rx
   691  001E9C  6F85               	movwf	(Lcd_Out@buffer+1)& (0+255),b
   692  001E9E  0E02               	movlw	2
   693  001EA0  ECF1  F00F         	call	_Lcd_Out
   694  001EA4  EF3A  F00F         	goto	l208
   695  001EA8  EF07  F000         	goto	start
   696  001EAC                     __end_of_main:
   697                           	callstack 0
   698                           
   699 ;; *************** function _serial_rx_str_until *****************
   700 ;; Defined at:
   701 ;;		line 121 in file "serial.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;  buff            2    0[BANK0 ] PTR unsigned char 
   704 ;;		 -> buffer_rx(20), 
   705 ;;  size            2    2[BANK0 ] unsigned int 
   706 ;;  term            1    4[BANK0 ] unsigned char 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  i               2    8[BANK0 ] unsigned int 
   709 ;; Return value:  Size  Location     Type
   710 ;;                  2    0[BANK0 ] PTR unsigned char 
   711 ;; Registers used:
   712 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   718 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   719 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;Total ram usage:       10 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; Hardware stack levels required when called:    3
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text1
   733  001BE8                     __ptext1:
   734                           	callstack 0
   735  001BE8                     _serial_rx_str_until:
   736                           	callstack 27
   737  001BE8                     
   738                           ;serial.c: 124: unsigned int i;;serial.c: 125: if(RCSTAbits.FERR || RCSTAbits.OERR)
   739  001BE8  B4AB               	btfsc	171,2,c	;volatile
   740  001BEA  EFF9  F00D         	goto	u1751
   741  001BEE  EFFB  F00D         	goto	u1750
   742  001BF2                     u1751:
   743  001BF2  EF02  F00E         	goto	l291
   744  001BF6                     u1750:
   745  001BF6  A2AB               	btfss	171,1,c	;volatile
   746  001BF8  EF00  F00E         	goto	u1761
   747  001BFC  EF02  F00E         	goto	u1760
   748  001C00                     u1761:
   749  001C00  EF04  F00E         	goto	l2538
   750  001C04                     u1760:
   751  001C04                     l291:
   752                           
   753                           ;serial.c: 126: {;serial.c: 127: RCSTAbits.CREN=0;
   754  001C04  98AB               	bcf	171,4,c	;volatile
   755                           
   756                           ;serial.c: 128: RCSTAbits.CREN=1;
   757  001C06  88AB               	bsf	171,4,c	;volatile
   758  001C08                     l2538:
   759                           
   760                           ;serial.c: 129: };serial.c: 131: size--;
   761  001C08  0100               	movlb	0	; () banked
   762  001C0A  0782               	decf	serial_rx_str_until@size& (0+255),f,b
   763  001C0C  A0D8               	btfss	status,0,c
   764  001C0E  0783               	decf	(serial_rx_str_until@size+1)& (0+255),f,b
   765  001C10                     
   766                           ; BSR set to: 0
   767                           ;serial.c: 132: i=0;
   768  001C10  0E00               	movlw	0
   769  001C12  6F89               	movwf	(serial_rx_str_until@i+1)& (0+255),b
   770  001C14  0E00               	movlw	0
   771  001C16  6F88               	movwf	serial_rx_str_until@i& (0+255),b
   772  001C18  EF18  F00E         	goto	l2544
   773  001C1C                     l2542:
   774                           
   775                           ;serial.c: 136: {;serial.c: 137: _delaywdt((unsigned long)((1)*(8000000/4000.0)));
   776  001C1C  0E02               	movlw	2
   777  001C1E  0100               	movlb	0	; () banked
   778  001C20  6F85               	movwf	??_serial_rx_str_until& (0+255),b
   779  001C22  0EF2               	movlw	242
   780  001C24                     u1847:
   781  001C24  0004               	clrwdt	
   782  001C26  2EE8               	decfsz	wreg,f,c
   783  001C28  D7FD               	bra	u1847
   784  001C2A  2F85               	decfsz	??_serial_rx_str_until& (0+255),f,b
   785  001C2C  D7FB               	bra	u1847
   786  001C2E  0004               	clrwdt	
   787  001C30                     l2544:
   788  001C30  AA9E               	btfss	158,5,c	;volatile
   789  001C32  EF1D  F00E         	goto	u1771
   790  001C36  EF1F  F00E         	goto	u1770
   791  001C3A                     u1771:
   792  001C3A  EF0E  F00E         	goto	l2542
   793  001C3E                     u1770:
   794  001C3E                     l2546:
   795                           
   796                           ;serial.c: 140: {;serial.c: 141: buff[i]= RCREG;
   797  001C3E  0100               	movlb	0	; () banked
   798  001C40  5188               	movf	serial_rx_str_until@i& (0+255),w,b
   799  001C42  2580               	addwf	serial_rx_str_until@buff& (0+255),w,b
   800  001C44  6ED9               	movwf	fsr2l,c
   801  001C46  5189               	movf	(serial_rx_str_until@i+1)& (0+255),w,b
   802  001C48  2181               	addwfc	(serial_rx_str_until@buff+1)& (0+255),w,b
   803  001C4A  6EDA               	movwf	fsr2h,c
   804  001C4C  CFAE FFDF          	movff	4014,indf2	;volatile
   805  001C50                     
   806                           ; BSR set to: 0
   807                           ;serial.c: 142: i++;
   808  001C50  4B88               	infsnz	serial_rx_str_until@i& (0+255),f,b
   809  001C52  2B89               	incf	(serial_rx_str_until@i+1)& (0+255),f,b
   810  001C54                     
   811                           ; BSR set to: 0
   812                           ;serial.c: 143: }while((PIR1bits.RCIF)&&(i < size)&&(buff[i-1]!=term));
   813  001C54  AA9E               	btfss	158,5,c	;volatile
   814  001C56  EF2F  F00E         	goto	u1781
   815  001C5A  EF31  F00E         	goto	u1780
   816  001C5E                     u1781:
   817  001C5E  EF51  F00E         	goto	l2556
   818  001C62                     u1780:
   819  001C62                     
   820                           ; BSR set to: 0
   821  001C62  5182               	movf	serial_rx_str_until@size& (0+255),w,b
   822  001C64  5D88               	subwf	serial_rx_str_until@i& (0+255),w,b
   823  001C66  5183               	movf	(serial_rx_str_until@size+1)& (0+255),w,b
   824  001C68  5989               	subwfb	(serial_rx_str_until@i+1)& (0+255),w,b
   825  001C6A  B0D8               	btfsc	status,0,c
   826  001C6C  EF3A  F00E         	goto	u1791
   827  001C70  EF3C  F00E         	goto	u1790
   828  001C74                     u1791:
   829  001C74  EF51  F00E         	goto	l2556
   830  001C78                     u1790:
   831  001C78                     
   832                           ; BSR set to: 0
   833  001C78  5188               	movf	serial_rx_str_until@i& (0+255),w,b
   834  001C7A  2580               	addwf	serial_rx_str_until@buff& (0+255),w,b
   835  001C7C  6F85               	movwf	??_serial_rx_str_until& (0+255),b
   836  001C7E  5189               	movf	(serial_rx_str_until@i+1)& (0+255),w,b
   837  001C80  2181               	addwfc	(serial_rx_str_until@buff+1)& (0+255),w,b
   838  001C82  6F86               	movwf	(??_serial_rx_str_until+1)& (0+255),b
   839  001C84  0EFF               	movlw	255
   840  001C86  2585               	addwf	??_serial_rx_str_until& (0+255),w,b
   841  001C88  6ED9               	movwf	fsr2l,c
   842  001C8A  0EFF               	movlw	255
   843  001C8C  2186               	addwfc	(??_serial_rx_str_until+1)& (0+255),w,b
   844  001C8E  6EDA               	movwf	fsr2h,c
   845  001C90  5184               	movf	serial_rx_str_until@term& (0+255),w,b
   846  001C92  18DE               	xorwf	postinc2,w,c
   847  001C94  A4D8               	btfss	status,2,c
   848  001C96  EF4F  F00E         	goto	u1801
   849  001C9A  EF51  F00E         	goto	u1800
   850  001C9E                     u1801:
   851  001C9E  EF1F  F00E         	goto	l2546
   852  001CA2                     u1800:
   853  001CA2                     l2556:
   854                           
   855                           ; BSR set to: 0
   856                           ;serial.c: 145: }while((i < size)&&(buff[i-1]!=term));
   857  001CA2  5182               	movf	serial_rx_str_until@size& (0+255),w,b
   858  001CA4  5D88               	subwf	serial_rx_str_until@i& (0+255),w,b
   859  001CA6  5183               	movf	(serial_rx_str_until@size+1)& (0+255),w,b
   860  001CA8  5989               	subwfb	(serial_rx_str_until@i+1)& (0+255),w,b
   861  001CAA  B0D8               	btfsc	status,0,c
   862  001CAC  EF5A  F00E         	goto	u1811
   863  001CB0  EF5C  F00E         	goto	u1810
   864  001CB4                     u1811:
   865  001CB4  EF71  F00E         	goto	l2560
   866  001CB8                     u1810:
   867  001CB8                     
   868                           ; BSR set to: 0
   869  001CB8  5188               	movf	serial_rx_str_until@i& (0+255),w,b
   870  001CBA  2580               	addwf	serial_rx_str_until@buff& (0+255),w,b
   871  001CBC  6F85               	movwf	??_serial_rx_str_until& (0+255),b
   872  001CBE  5189               	movf	(serial_rx_str_until@i+1)& (0+255),w,b
   873  001CC0  2181               	addwfc	(serial_rx_str_until@buff+1)& (0+255),w,b
   874  001CC2  6F86               	movwf	(??_serial_rx_str_until+1)& (0+255),b
   875  001CC4  0EFF               	movlw	255
   876  001CC6  2585               	addwf	??_serial_rx_str_until& (0+255),w,b
   877  001CC8  6ED9               	movwf	fsr2l,c
   878  001CCA  0EFF               	movlw	255
   879  001CCC  2186               	addwfc	(??_serial_rx_str_until+1)& (0+255),w,b
   880  001CCE  6EDA               	movwf	fsr2h,c
   881  001CD0  5184               	movf	serial_rx_str_until@term& (0+255),w,b
   882  001CD2  18DE               	xorwf	postinc2,w,c
   883  001CD4  A4D8               	btfss	status,2,c
   884  001CD6  EF6F  F00E         	goto	u1821
   885  001CDA  EF71  F00E         	goto	u1820
   886  001CDE                     u1821:
   887  001CDE  EF18  F00E         	goto	l2544
   888  001CE2                     u1820:
   889  001CE2                     l2560:
   890                           
   891                           ; BSR set to: 0
   892                           ;serial.c: 148: buff[i]= 0;
   893  001CE2  5188               	movf	serial_rx_str_until@i& (0+255),w,b
   894  001CE4  2580               	addwf	serial_rx_str_until@buff& (0+255),w,b
   895  001CE6  6ED9               	movwf	fsr2l,c
   896  001CE8  5189               	movf	(serial_rx_str_until@i+1)& (0+255),w,b
   897  001CEA  2181               	addwfc	(serial_rx_str_until@buff+1)& (0+255),w,b
   898  001CEC  6EDA               	movwf	fsr2h,c
   899  001CEE  0E00               	movlw	0
   900  001CF0  6EDF               	movwf	indf2,c
   901  001CF2                     
   902                           ; BSR set to: 0
   903  001CF2  0012               	return		;funcret
   904  001CF4                     __end_of_serial_rx_str_until:
   905                           	callstack 0
   906                           
   907 ;; *************** function _serial_init *****************
   908 ;; Defined at:
   909 ;;		line 30 in file "serial.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, status,2
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;Total ram usage:        0 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    3
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text2
   938  0023AA                     __ptext2:
   939                           	callstack 0
   940  0023AA                     _serial_init:
   941                           	callstack 27
   942  0023AA                     
   943                           ;serial.c: 32: BAUDCONbits.BRG16 = 0;
   944  0023AA  96B8               	bcf	184,3,c	;volatile
   945  0023AC                     
   946                           ;serial.c: 33: SPBRG = 51;
   947  0023AC  0E33               	movlw	51
   948  0023AE  6EAF               	movwf	175,c	;volatile
   949  0023B0                     
   950                           ;serial.c: 36: TXSTAbits.TX9=0;
   951  0023B0  9CAC               	bcf	172,6,c	;volatile
   952  0023B2                     
   953                           ;serial.c: 37: TXSTAbits.TXEN=1;
   954  0023B2  8AAC               	bsf	172,5,c	;volatile
   955  0023B4                     
   956                           ;serial.c: 38: TXSTAbits.SYNC=0;
   957  0023B4  98AC               	bcf	172,4,c	;volatile
   958  0023B6                     
   959                           ;serial.c: 39: TXSTAbits.BRGH=1;
   960  0023B6  84AC               	bsf	172,2,c	;volatile
   961  0023B8                     
   962                           ;serial.c: 40: RCSTAbits.SPEN=1;
   963  0023B8  8EAB               	bsf	171,7,c	;volatile
   964  0023BA                     
   965                           ;serial.c: 41: RCSTAbits.RX9=0;
   966  0023BA  9CAB               	bcf	171,6,c	;volatile
   967  0023BC                     
   968                           ;serial.c: 42: RCSTAbits.CREN=1;
   969  0023BC  88AB               	bsf	171,4,c	;volatile
   970  0023BE  0012               	return		;funcret
   971  0023C0                     __end_of_serial_init:
   972                           	callstack 0
   973                           
   974 ;; *************** function _adc_init *****************
   975 ;; Defined at:
   976 ;;		line 30 in file "adc.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, status,2
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    3
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_main
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text3
  1005  0023D6                     __ptext3:
  1006                           	callstack 0
  1007  0023D6                     _adc_init:
  1008                           	callstack 27
  1009  0023D6                     
  1010                           ;adc.c: 36: ADCON0=0x01;
  1011  0023D6  0E01               	movlw	1
  1012  0023D8  6EC2               	movwf	194,c	;volatile
  1013                           
  1014                           ;adc.c: 37: ADCON1=0x0B;
  1015  0023DA  0E0B               	movlw	11
  1016  0023DC  6EC1               	movwf	193,c	;volatile
  1017                           
  1018                           ;adc.c: 38: ADCON2=0x01;
  1019  0023DE  0E01               	movlw	1
  1020  0023E0  6EC0               	movwf	192,c	;volatile
  1021  0023E2  0012               	return		;funcret
  1022  0023E4                     __end_of_adc_init:
  1023                           	callstack 0
  1024                           
  1025 ;; *************** function _PWM1_Start *****************
  1026 ;; Defined at:
  1027 ;;		line 71 in file "pwm.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, status,2
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;Total ram usage:        0 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    3
  1048 ;; This function calls:
  1049 ;;		Nothing
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text4
  1056  002358                     __ptext4:
  1057                           	callstack 0
  1058  002358                     _PWM1_Start:
  1059                           	callstack 27
  1060  002358                     
  1061                           ;pwm.c: 74: TRISCbits.TRISC2=0;
  1062  002358  9494               	bcf	148,2,c	;volatile
  1063                           
  1064                           ;pwm.c: 75: TRISDbits.TRISD5=0;
  1065  00235A  9A95               	bcf	149,5,c	;volatile
  1066  00235C                     
  1067                           ;pwm.c: 77: CCP1CON=0x0F;
  1068  00235C  0E0F               	movlw	15
  1069  00235E  6EBD               	movwf	189,c	;volatile
  1070  002360                     
  1071                           ;pwm.c: 79: T2CONbits.TMR2ON=1;
  1072  002360  84CA               	bsf	202,2,c	;volatile
  1073  002362                     
  1074                           ;pwm.c: 87: PIR1bits.TMR2IF=0;
  1075  002362  929E               	bcf	158,1,c	;volatile
  1076  002364                     l57:
  1077  002364  A29E               	btfss	158,1,c	;volatile
  1078  002366  EFB7  F011         	goto	u1711
  1079  00236A  EFB9  F011         	goto	u1710
  1080  00236E                     u1711:
  1081  00236E  EFB2  F011         	goto	l57
  1082  002372                     u1710:
  1083  002372                     
  1084                           ;pwm.c: 89: PIR1bits.TMR2IF=0;
  1085  002372  929E               	bcf	158,1,c	;volatile
  1086  002374                     l60:
  1087  002374  A29E               	btfss	158,1,c	;volatile
  1088  002376  EFBF  F011         	goto	u1721
  1089  00237A  EFC1  F011         	goto	u1720
  1090  00237E                     u1721:
  1091  00237E  EFBA  F011         	goto	l60
  1092  002382                     u1720:
  1093  002382  0012               	return		;funcret
  1094  002384                     __end_of_PWM1_Start:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function _PWM1_Init *****************
  1098 ;; Defined at:
  1099 ;;		line 30 in file "pwm.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  f               2   14[BANK0 ] unsigned int 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  temp            2   20[BANK0 ] unsigned int 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, status,2, status,0, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1113 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;Total ram usage:        8 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    4
  1120 ;; This function calls:
  1121 ;;		___aldiv
  1122 ;; This function is called by:
  1123 ;;		_main
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text5
  1128  001CF4                     __ptext5:
  1129                           	callstack 0
  1130  001CF4                     _PWM1_Init:
  1131                           	callstack 26
  1132  001CF4                     
  1133                           ;pwm.c: 32: unsigned int temp;;pwm.c: 37: CCP1CON=0x00;
  1134  001CF4  0E00               	movlw	0
  1135  001CF6  6EBD               	movwf	189,c	;volatile
  1136  001CF8                     
  1137                           ;pwm.c: 38: TRISCbits.TRISC2=1;
  1138  001CF8  8494               	bsf	148,2,c	;volatile
  1139  001CFA                     
  1140                           ;pwm.c: 39: TRISDbits.TRISD5=1;
  1141  001CFA  8A95               	bsf	149,5,c	;volatile
  1142  001CFC                     
  1143                           ;pwm.c: 41: PORTCbits.RC2=0;
  1144  001CFC  9482               	bcf	130,2,c	;volatile
  1145  001CFE                     
  1146                           ;pwm.c: 42: PORTDbits.RD5=0;
  1147  001CFE  9A83               	bcf	131,5,c	;volatile
  1148                           
  1149                           ;pwm.c: 44: CCPR1L=0;
  1150  001D00  0E00               	movlw	0
  1151  001D02  6EBE               	movwf	190,c	;volatile
  1152  001D04                     
  1153                           ;pwm.c: 48: T2CONbits.TMR2ON=0;
  1154  001D04  94CA               	bcf	202,2,c	;volatile
  1155  001D06                     
  1156                           ;pwm.c: 50: temp=8000000/(f*4l);
  1157  001D06  0E00               	movlw	0
  1158  001D08  0100               	movlb	0	; () banked
  1159  001D0A  6F80               	movwf	___aldiv@dividend& (0+255),b
  1160  001D0C  0E12               	movlw	18
  1161  001D0E  6F81               	movwf	(___aldiv@dividend+1)& (0+255),b
  1162  001D10  0E7A               	movlw	122
  1163  001D12  6F82               	movwf	(___aldiv@dividend+2)& (0+255),b
  1164  001D14  0E00               	movlw	0
  1165  001D16  6F83               	movwf	(___aldiv@dividend+3)& (0+255),b
  1166  001D18  518E               	movf	PWM1_Init@f& (0+255),w,b
  1167  001D1A  6F90               	movwf	??_PWM1_Init& (0+255),b
  1168  001D1C  518F               	movf	(PWM1_Init@f+1)& (0+255),w,b
  1169  001D1E  6F91               	movwf	(??_PWM1_Init+1)& (0+255),b
  1170  001D20  6B92               	clrf	(??_PWM1_Init+2)& (0+255),b
  1171  001D22  6B93               	clrf	(??_PWM1_Init+3)& (0+255),b
  1172  001D24  0E02               	movlw	2
  1173  001D26                     u1675:
  1174  001D26  90D8               	bcf	status,0,c
  1175  001D28  3790               	rlcf	??_PWM1_Init& (0+255),f,b
  1176  001D2A  3791               	rlcf	(??_PWM1_Init+1)& (0+255),f,b
  1177  001D2C  3792               	rlcf	(??_PWM1_Init+2)& (0+255),f,b
  1178  001D2E  3793               	rlcf	(??_PWM1_Init+3)& (0+255),f,b
  1179  001D30  2EE8               	decfsz	wreg,f,c
  1180  001D32  EF93  F00E         	goto	u1675
  1181  001D36  C090  F084         	movff	??_PWM1_Init,___aldiv@divisor
  1182  001D3A  C091  F085         	movff	??_PWM1_Init+1,___aldiv@divisor+1
  1183  001D3E  C092  F086         	movff	??_PWM1_Init+2,___aldiv@divisor+2
  1184  001D42  C093  F087         	movff	??_PWM1_Init+3,___aldiv@divisor+3
  1185  001D46  EC6D  F00D         	call	___aldiv	;wreg free
  1186  001D4A  C080  F094         	movff	?___aldiv,PWM1_Init@temp
  1187  001D4E  C081  F095         	movff	?___aldiv+1,PWM1_Init@temp+1
  1188  001D52                     
  1189                           ;pwm.c: 52: if (temp < 256)
  1190  001D52  0100               	movlb	0	; () banked
  1191  001D54  0595               	decf	(PWM1_Init@temp+1)& (0+255),w,b
  1192  001D56  B0D8               	btfsc	status,0,c
  1193  001D58  EFB0  F00E         	goto	u1681
  1194  001D5C  EFB2  F00E         	goto	u1680
  1195  001D60                     u1681:
  1196  001D60  EFB8  F00E         	goto	l2418
  1197  001D64                     u1680:
  1198  001D64                     
  1199                           ; BSR set to: 0
  1200                           ;pwm.c: 53: {;pwm.c: 54: T2CONbits.T2CKPS=0;
  1201  001D64  0EFC               	movlw	-4
  1202  001D66  16CA               	andwf	202,f,c	;volatile
  1203  001D68                     
  1204                           ; BSR set to: 0
  1205                           ;pwm.c: 55: PR2=temp;
  1206  001D68  C094  FFCB         	movff	PWM1_Init@temp,4043	;volatile
  1207                           
  1208                           ;pwm.c: 56: }
  1209  001D6C  EFF2  F00E         	goto	l2428
  1210  001D70                     l2418:
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;pwm.c: 57: else if(temp/4 < 256 )
  1214  001D70  C094  F090         	movff	PWM1_Init@temp,??_PWM1_Init
  1215  001D74  C095  F091         	movff	PWM1_Init@temp+1,??_PWM1_Init+1
  1216  001D78  90D8               	bcf	status,0,c
  1217  001D7A  3391               	rrcf	(??_PWM1_Init+1)& (0+255),f,b
  1218  001D7C  3390               	rrcf	??_PWM1_Init& (0+255),f,b
  1219  001D7E  90D8               	bcf	status,0,c
  1220  001D80  3391               	rrcf	(??_PWM1_Init+1)& (0+255),f,b
  1221  001D82  3390               	rrcf	??_PWM1_Init& (0+255),f,b
  1222  001D84  0591               	decf	(??_PWM1_Init+1)& (0+255),w,b
  1223  001D86  B0D8               	btfsc	status,0,c
  1224  001D88  EFC8  F00E         	goto	u1691
  1225  001D8C  EFCA  F00E         	goto	u1690
  1226  001D90                     u1691:
  1227  001D90  EFDE  F00E         	goto	l2424
  1228  001D94                     u1690:
  1229  001D94                     
  1230                           ; BSR set to: 0
  1231                           ;pwm.c: 58: {;pwm.c: 59: T2CONbits.T2CKPS=1;
  1232  001D94  50CA               	movf	202,w,c	;volatile
  1233  001D96  0BFC               	andlw	-4
  1234  001D98  0901               	iorlw	1
  1235  001D9A  6ECA               	movwf	202,c	;volatile
  1236  001D9C                     
  1237                           ; BSR set to: 0
  1238                           ;pwm.c: 60: PR2=(temp+2)/4;
  1239  001D9C  0E02               	movlw	2
  1240  001D9E  2594               	addwf	PWM1_Init@temp& (0+255),w,b
  1241  001DA0  6F90               	movwf	??_PWM1_Init& (0+255),b
  1242  001DA2  0E00               	movlw	0
  1243  001DA4  2195               	addwfc	(PWM1_Init@temp+1)& (0+255),w,b
  1244  001DA6  6F91               	movwf	(??_PWM1_Init+1)& (0+255),b
  1245  001DA8  90D8               	bcf	status,0,c
  1246  001DAA  3391               	rrcf	(??_PWM1_Init+1)& (0+255),f,b
  1247  001DAC  3390               	rrcf	??_PWM1_Init& (0+255),f,b
  1248  001DAE  90D8               	bcf	status,0,c
  1249  001DB0  3391               	rrcf	(??_PWM1_Init+1)& (0+255),f,b
  1250  001DB2  3390               	rrcf	??_PWM1_Init& (0+255),f,b
  1251  001DB4  5190               	movf	??_PWM1_Init& (0+255),w,b
  1252  001DB6  6ECB               	movwf	203,c	;volatile
  1253                           
  1254                           ;pwm.c: 61: }
  1255  001DB8  EFF2  F00E         	goto	l2428
  1256  001DBC                     l2424:
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;pwm.c: 62: else;pwm.c: 63: {;pwm.c: 64: PR2=(temp+8)/16;
  1260  001DBC  0E08               	movlw	8
  1261  001DBE  2594               	addwf	PWM1_Init@temp& (0+255),w,b
  1262  001DC0  6F90               	movwf	??_PWM1_Init& (0+255),b
  1263  001DC2  0E00               	movlw	0
  1264  001DC4  2195               	addwfc	(PWM1_Init@temp+1)& (0+255),w,b
  1265  001DC6  6F91               	movwf	(??_PWM1_Init+1)& (0+255),b
  1266  001DC8  0E04               	movlw	4
  1267  001DCA  6F92               	movwf	(??_PWM1_Init+2)& (0+255),b
  1268  001DCC                     u1705:
  1269  001DCC  90D8               	bcf	status,0,c
  1270  001DCE  3391               	rrcf	(??_PWM1_Init+1)& (0+255),f,b
  1271  001DD0  3390               	rrcf	??_PWM1_Init& (0+255),f,b
  1272  001DD2  2F92               	decfsz	(??_PWM1_Init+2)& (0+255),f,b
  1273  001DD4  EFE6  F00E         	goto	u1705
  1274  001DD8  5190               	movf	??_PWM1_Init& (0+255),w,b
  1275  001DDA  6ECB               	movwf	203,c	;volatile
  1276  001DDC                     
  1277                           ; BSR set to: 0
  1278                           ;pwm.c: 65: T2CONbits.T2CKPS=2;
  1279  001DDC  50CA               	movf	202,w,c	;volatile
  1280  001DDE  0BFC               	andlw	-4
  1281  001DE0  0902               	iorlw	2
  1282  001DE2  6ECA               	movwf	202,c	;volatile
  1283  001DE4                     l2428:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;pwm.c: 66: };pwm.c: 68: T2CONbits.TOUTPS=0;
  1287  001DE4  0E87               	movlw	-121
  1288  001DE6  16CA               	andwf	202,f,c	;volatile
  1289  001DE8                     
  1290                           ; BSR set to: 0
  1291  001DE8  0012               	return		;funcret
  1292  001DEA                     __end_of_PWM1_Init:
  1293                           	callstack 0
  1294                           
  1295 ;; *************** function ___aldiv *****************
  1296 ;; Defined at:
  1297 ;;		line 7 in file "D:\MPLABX\XC8\pic\sources\c90\common\aldiv.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  dividend        4    0[BANK0 ] long 
  1300 ;;  divisor         4    4[BANK0 ] long 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  quotient        4   10[BANK0 ] long 
  1303 ;;  sign            1    9[BANK0 ] unsigned char 
  1304 ;;  counter         1    8[BANK0 ] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  4    0[BANK0 ] long 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1314 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;Total ram usage:       14 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    3
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_PWM1_Init
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text6
  1329  001ADA                     __ptext6:
  1330                           	callstack 0
  1331  001ADA                     ___aldiv:
  1332                           	callstack 26
  1333  001ADA  0E00               	movlw	0
  1334  001ADC  0100               	movlb	0	; () banked
  1335  001ADE  6F89               	movwf	___aldiv@sign& (0+255),b
  1336  001AE0                     
  1337                           ; BSR set to: 0
  1338  001AE0  BF87               	btfsc	(___aldiv@divisor+3)& (0+255),7,b
  1339  001AE2  EF77  F00D         	goto	u1610
  1340  001AE6  EF75  F00D         	goto	u1611
  1341  001AEA                     u1611:
  1342  001AEA  EF81  F00D         	goto	l2360
  1343  001AEE                     u1610:
  1344  001AEE                     
  1345                           ; BSR set to: 0
  1346  001AEE  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1347  001AF0  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1348  001AF2  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1349  001AF4  6D84               	negf	___aldiv@divisor& (0+255),b
  1350  001AF6  0E00               	movlw	0
  1351  001AF8  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1352  001AFA  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1353  001AFC  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1354  001AFE                     
  1355                           ; BSR set to: 0
  1356  001AFE  0E01               	movlw	1
  1357  001B00  6F89               	movwf	___aldiv@sign& (0+255),b
  1358  001B02                     l2360:
  1359                           
  1360                           ; BSR set to: 0
  1361  001B02  BF83               	btfsc	(___aldiv@dividend+3)& (0+255),7,b
  1362  001B04  EF88  F00D         	goto	u1620
  1363  001B08  EF86  F00D         	goto	u1621
  1364  001B0C                     u1621:
  1365  001B0C  EF92  F00D         	goto	l2366
  1366  001B10                     u1620:
  1367  001B10                     
  1368                           ; BSR set to: 0
  1369  001B10  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1370  001B12  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1371  001B14  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1372  001B16  6D80               	negf	___aldiv@dividend& (0+255),b
  1373  001B18  0E00               	movlw	0
  1374  001B1A  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1375  001B1C  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1376  001B1E  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1377  001B20                     
  1378                           ; BSR set to: 0
  1379  001B20  0E01               	movlw	1
  1380  001B22  1B89               	xorwf	___aldiv@sign& (0+255),f,b
  1381  001B24                     l2366:
  1382                           
  1383                           ; BSR set to: 0
  1384  001B24  0E00               	movlw	0
  1385  001B26  6F8A               	movwf	___aldiv@quotient& (0+255),b
  1386  001B28  0E00               	movlw	0
  1387  001B2A  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1388  001B2C  0E00               	movlw	0
  1389  001B2E  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1390  001B30  0E00               	movlw	0
  1391  001B32  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1392  001B34                     
  1393                           ; BSR set to: 0
  1394  001B34  5184               	movf	___aldiv@divisor& (0+255),w,b
  1395  001B36  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1396  001B38  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1397  001B3A  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1398  001B3C  B4D8               	btfsc	status,2,c
  1399  001B3E  EFA3  F00D         	goto	u1631
  1400  001B42  EFA5  F00D         	goto	u1630
  1401  001B46                     u1631:
  1402  001B46  EFDB  F00D         	goto	l2388
  1403  001B4A                     u1630:
  1404  001B4A                     
  1405                           ; BSR set to: 0
  1406  001B4A  0E01               	movlw	1
  1407  001B4C  6F88               	movwf	___aldiv@counter& (0+255),b
  1408  001B4E  EFAF  F00D         	goto	l2374
  1409  001B52                     l2372:
  1410                           
  1411                           ; BSR set to: 0
  1412  001B52  90D8               	bcf	status,0,c
  1413  001B54  3784               	rlcf	___aldiv@divisor& (0+255),f,b
  1414  001B56  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1415  001B58  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1416  001B5A  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1417  001B5C  2B88               	incf	___aldiv@counter& (0+255),f,b
  1418  001B5E                     l2374:
  1419                           
  1420                           ; BSR set to: 0
  1421  001B5E  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1422  001B60  EFB4  F00D         	goto	u1641
  1423  001B64  EFB6  F00D         	goto	u1640
  1424  001B68                     u1641:
  1425  001B68  EFA9  F00D         	goto	l2372
  1426  001B6C                     u1640:
  1427  001B6C                     l2376:
  1428                           
  1429                           ; BSR set to: 0
  1430  001B6C  90D8               	bcf	status,0,c
  1431  001B6E  378A               	rlcf	___aldiv@quotient& (0+255),f,b
  1432  001B70  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1433  001B72  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1434  001B74  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1435  001B76                     
  1436                           ; BSR set to: 0
  1437  001B76  5184               	movf	___aldiv@divisor& (0+255),w,b
  1438  001B78  5D80               	subwf	___aldiv@dividend& (0+255),w,b
  1439  001B7A  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1440  001B7C  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1441  001B7E  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1442  001B80  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1443  001B82  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1444  001B84  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1445  001B86  A0D8               	btfss	status,0,c
  1446  001B88  EFC8  F00D         	goto	u1651
  1447  001B8C  EFCA  F00D         	goto	u1650
  1448  001B90                     u1651:
  1449  001B90  EFD3  F00D         	goto	l2384
  1450  001B94                     u1650:
  1451  001B94                     
  1452                           ; BSR set to: 0
  1453  001B94  5184               	movf	___aldiv@divisor& (0+255),w,b
  1454  001B96  5F80               	subwf	___aldiv@dividend& (0+255),f,b
  1455  001B98  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1456  001B9A  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1457  001B9C  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1458  001B9E  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1459  001BA0  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1460  001BA2  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1461  001BA4                     
  1462                           ; BSR set to: 0
  1463  001BA4  818A               	bsf	___aldiv@quotient& (0+255),0,b
  1464  001BA6                     l2384:
  1465                           
  1466                           ; BSR set to: 0
  1467  001BA6  90D8               	bcf	status,0,c
  1468  001BA8  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1469  001BAA  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1470  001BAC  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1471  001BAE  3384               	rrcf	___aldiv@divisor& (0+255),f,b
  1472  001BB0                     
  1473                           ; BSR set to: 0
  1474  001BB0  2F88               	decfsz	___aldiv@counter& (0+255),f,b
  1475  001BB2  EFB6  F00D         	goto	l2376
  1476  001BB6                     l2388:
  1477                           
  1478                           ; BSR set to: 0
  1479  001BB6  5189               	movf	___aldiv@sign& (0+255),w,b
  1480  001BB8  B4D8               	btfsc	status,2,c
  1481  001BBA  EFE1  F00D         	goto	u1661
  1482  001BBE  EFE3  F00D         	goto	u1660
  1483  001BC2                     u1661:
  1484  001BC2  EFEB  F00D         	goto	l2392
  1485  001BC6                     u1660:
  1486  001BC6                     
  1487                           ; BSR set to: 0
  1488  001BC6  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1489  001BC8  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1490  001BCA  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1491  001BCC  6D8A               	negf	___aldiv@quotient& (0+255),b
  1492  001BCE  0E00               	movlw	0
  1493  001BD0  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1494  001BD2  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1495  001BD4  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1496  001BD6                     l2392:
  1497                           
  1498                           ; BSR set to: 0
  1499  001BD6  C08A  F080         	movff	___aldiv@quotient,?___aldiv
  1500  001BDA  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
  1501  001BDE  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
  1502  001BE2  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
  1503  001BE6                     
  1504                           ; BSR set to: 0
  1505  001BE6  0012               	return		;funcret
  1506  001BE8                     __end_of___aldiv:
  1507                           	callstack 0
  1508                           
  1509 ;; *************** function _Lcd_Out *****************
  1510 ;; Defined at:
  1511 ;;		line 96 in file "flexlcd.h"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  y               1    wreg     unsigned char 
  1514 ;;  x               1    3[BANK0 ] unsigned char 
  1515 ;;  buffer          2    4[BANK0 ] PTR const unsigned char 
  1516 ;;		 -> str(5), buffer_rx(20), 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  y               1    6[BANK0 ] unsigned char 
  1519 ;;  data            1    7[BANK0 ] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;Total ram usage:        5 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    4
  1536 ;; This function calls:
  1537 ;;		_Lcd_Chr_CP
  1538 ;;		_Lcd_Cmd
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text7
  1545  001FE2                     __ptext7:
  1546                           	callstack 0
  1547  001FE2                     _Lcd_Out:
  1548                           	callstack 26
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;incstack = 0
  1552                           ;Lcd_Out@y stored from wreg
  1553  001FE2  0100               	movlb	0	; () banked
  1554  001FE4  6F86               	movwf	Lcd_Out@y& (0+255),b
  1555  001FE6                     
  1556                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  1557  001FE6  EF09  F010         	goto	l2506
  1558  001FEA                     l2496:
  1559                           
  1560                           ; BSR set to: 0
  1561  001FEA  5183               	movf	Lcd_Out@x& (0+255),w,b
  1562  001FEC  0F80               	addlw	128
  1563  001FEE  6F87               	movwf	Lcd_Out@data& (0+255),b
  1564  001FF0  EF1D  F010         	goto	l2508
  1565  001FF4                     l2498:
  1566                           
  1567                           ; BSR set to: 0
  1568  001FF4  5183               	movf	Lcd_Out@x& (0+255),w,b
  1569  001FF6  0FC0               	addlw	192
  1570  001FF8  6F87               	movwf	Lcd_Out@data& (0+255),b
  1571  001FFA  EF1D  F010         	goto	l2508
  1572  001FFE                     l2500:
  1573                           
  1574                           ; BSR set to: 0
  1575  001FFE  5183               	movf	Lcd_Out@x& (0+255),w,b
  1576  002000  0F94               	addlw	148
  1577  002002  6F87               	movwf	Lcd_Out@data& (0+255),b
  1578  002004  EF1D  F010         	goto	l2508
  1579  002008                     l2502:
  1580                           
  1581                           ; BSR set to: 0
  1582  002008  5183               	movf	Lcd_Out@x& (0+255),w,b
  1583  00200A  0FD4               	addlw	212
  1584  00200C  6F87               	movwf	Lcd_Out@data& (0+255),b
  1585  00200E  EF1D  F010         	goto	l2508
  1586  002012                     l2506:
  1587  002012  0100               	movlb	0	; () banked
  1588  002014  5186               	movf	Lcd_Out@y& (0+255),w,b
  1589                           
  1590                           ; Switch size 1, requested type "simple"
  1591                           ; Number of cases is 4, Range of values is 1 to 4
  1592                           ; switch strategies available:
  1593                           ; Name         Instructions Cycles
  1594                           ; simple_byte           13     7 (average)
  1595                           ;	Chosen strategy is simple_byte
  1596  002016  0A01               	xorlw	1	; case 1
  1597  002018  B4D8               	btfsc	status,2,c
  1598  00201A  EFF5  F00F         	goto	l2496
  1599  00201E  0A03               	xorlw	3	; case 2
  1600  002020  B4D8               	btfsc	status,2,c
  1601  002022  EFFA  F00F         	goto	l2498
  1602  002026  0A01               	xorlw	1	; case 3
  1603  002028  B4D8               	btfsc	status,2,c
  1604  00202A  EFFF  F00F         	goto	l2500
  1605  00202E  0A07               	xorlw	7	; case 4
  1606  002030  B4D8               	btfsc	status,2,c
  1607  002032  EF04  F010         	goto	l2502
  1608  002036  EF1D  F010         	goto	l2508
  1609  00203A                     l2508:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;flexlcd.h: 107: Lcd_Cmd(data);
  1613  00203A  5187               	movf	Lcd_Out@data& (0+255),w,b
  1614  00203C  EC7E  F00A         	call	_Lcd_Cmd
  1615                           
  1616                           ;flexlcd.h: 108: while(*buffer)
  1617  002040  EF2C  F010         	goto	l2514
  1618  002044                     l2510:
  1619                           
  1620                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  1621  002044  C084  FFD9         	movff	Lcd_Out@buffer,fsr2l
  1622  002048  C085  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  1623  00204C  50DF               	movf	indf2,w,c
  1624  00204E  ECDF  F009         	call	_Lcd_Chr_CP
  1625  002052                     
  1626                           ;flexlcd.h: 111: buffer++;
  1627  002052  0100               	movlb	0	; () banked
  1628  002054  4B84               	infsnz	Lcd_Out@buffer& (0+255),f,b
  1629  002056  2B85               	incf	(Lcd_Out@buffer+1)& (0+255),f,b
  1630  002058                     l2514:
  1631  002058  C084  FFD9         	movff	Lcd_Out@buffer,fsr2l
  1632  00205C  C085  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  1633  002060  50DF               	movf	indf2,w,c
  1634  002062  A4D8               	btfss	status,2,c
  1635  002064  EF36  F010         	goto	u1741
  1636  002068  EF38  F010         	goto	u1740
  1637  00206C                     u1741:
  1638  00206C  EF22  F010         	goto	l2510
  1639  002070                     u1740:
  1640  002070  0012               	return		;funcret
  1641  002072                     __end_of_Lcd_Out:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _Lcd_Chr_CP *****************
  1645 ;; Defined at:
  1646 ;;		line 138 in file "flexlcd.h"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  data            1    wreg     unsigned char 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  data            1    2[BANK0 ] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;Total ram usage:        3 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    3
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_Lcd_Out
  1671 ;;		_Lcd_Out2
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text8
  1676  0013BE                     __ptext8:
  1677                           	callstack 0
  1678  0013BE                     _Lcd_Chr_CP:
  1679                           	callstack 26
  1680                           
  1681                           ;incstack = 0
  1682                           ;Lcd_Chr_CP@data stored from wreg
  1683  0013BE  0100               	movlb	0	; () banked
  1684  0013C0  6F82               	movwf	Lcd_Chr_CP@data& (0+255),b
  1685  0013C2                     
  1686                           ;flexlcd.h: 139: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  1687  0013C2  9284               	bcf	132,1,c	;volatile
  1688  0013C4  8484               	bsf	132,2,c	;volatile
  1689  0013C6                     
  1690                           ;flexlcd.h: 140: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  1691  0013C6  0100               	movlb	0	; () banked
  1692  0013C8  6B80               	clrf	??_Lcd_Chr_CP& (0+255),b
  1693  0013CA  AF82               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  1694  0013CC  D001               	bra	u1585
  1695  0013CE  2B80               	incf	??_Lcd_Chr_CP& (0+255),f,b
  1696  0013D0                     u1585:
  1697  0013D0  0E01               	movlw	1
  1698  0013D2  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1699  0013D4  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1700  0013D6  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1701  0013D8  5083               	movf	131,w,c	;volatile
  1702  0013DA  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1703  0013DC  0B7F               	andlw	-129
  1704  0013DE  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1705  0013E0  6E83               	movwf	131,c	;volatile
  1706  0013E2  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1707  0013E6  0E06               	movlw	6
  1708  0013E8  6F81               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  1709  0013EA                     u1595:
  1710  0013EA  90D8               	bcf	status,0,c
  1711  0013EC  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1712  0013EE  2F81               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  1713  0013F0  EFF5  F009         	goto	u1595
  1714  0013F4  0E01               	movlw	1
  1715  0013F6  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1716  0013F8  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1717  0013FA  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1718  0013FC  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1719  0013FE  5083               	movf	131,w,c	;volatile
  1720  001400  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1721  001402  0BBF               	andlw	-65
  1722  001404  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1723  001406  6E83               	movwf	131,c	;volatile
  1724                           
  1725                           ;flexlcd.h: 141: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  1726  001408  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1727  00140C  0E05               	movlw	5
  1728  00140E  6F81               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  1729  001410                     u1605:
  1730  001410  90D8               	bcf	status,0,c
  1731  001412  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1732  001414  2F81               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  1733  001416  EF08  F00A         	goto	u1605
  1734  00141A  0E01               	movlw	1
  1735  00141C  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1736  00141E  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1737  001420  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1738  001422  5083               	movf	131,w,c	;volatile
  1739  001424  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1740  001426  0BDF               	andlw	-33
  1741  001428  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1742  00142A  6E83               	movwf	131,c	;volatile
  1743  00142C  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1744  001430  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1745  001432  0E0F               	movlw	15
  1746  001434  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1747  001436  0E01               	movlw	1
  1748  001438  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1749  00143A  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1750  00143C  5083               	movf	131,w,c	;volatile
  1751  00143E  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1752  001440  0BEF               	andlw	-17
  1753  001442  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1754  001444  6E83               	movwf	131,c	;volatile
  1755  001446                     
  1756                           ; BSR set to: 0
  1757                           ;flexlcd.h: 142: _delay(10);
  1758  001446  0E03               	movlw	3
  1759  001448                     u1857:
  1760  001448  2EE8               	decfsz	wreg,f,c
  1761  00144A  D7FE               	bra	u1857
  1762  00144C  F000               	nop	
  1763  00144E                     
  1764                           ;flexlcd.h: 143: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1765  00144E  8284               	bsf	132,1,c	;volatile
  1766  001450  0E03               	movlw	3
  1767  001452                     u1867:
  1768  001452  2EE8               	decfsz	wreg,f,c
  1769  001454  D7FE               	bra	u1867
  1770  001456  F000               	nop	
  1771  001458  9284               	bcf	132,1,c	;volatile
  1772                           
  1773                           ;flexlcd.h: 144: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  1774  00145A  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1775  00145E  0100               	movlb	0	; () banked
  1776  001460  90D8               	bcf	status,0,c
  1777  001462  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1778  001464  90D8               	bcf	status,0,c
  1779  001466  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1780  001468  90D8               	bcf	status,0,c
  1781  00146A  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1782  00146C  0E01               	movlw	1
  1783  00146E  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1784  001470  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1785  001472  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1786  001474  5083               	movf	131,w,c	;volatile
  1787  001476  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1788  001478  0B7F               	andlw	-129
  1789  00147A  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1790  00147C  6E83               	movwf	131,c	;volatile
  1791  00147E  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1792  001482  90D8               	bcf	status,0,c
  1793  001484  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1794  001486  90D8               	bcf	status,0,c
  1795  001488  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1796  00148A  0E01               	movlw	1
  1797  00148C  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1798  00148E  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1799  001490  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1800  001492  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1801  001494  5083               	movf	131,w,c	;volatile
  1802  001496  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1803  001498  0BBF               	andlw	-65
  1804  00149A  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1805  00149C  6E83               	movwf	131,c	;volatile
  1806                           
  1807                           ;flexlcd.h: 145: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  1808  00149E  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1809  0014A2  90D8               	bcf	status,0,c
  1810  0014A4  3380               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  1811  0014A6  0E01               	movlw	1
  1812  0014A8  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1813  0014AA  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1814  0014AC  4780               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  1815  0014AE  5083               	movf	131,w,c	;volatile
  1816  0014B0  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1817  0014B2  0BDF               	andlw	-33
  1818  0014B4  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1819  0014B6  6E83               	movwf	131,c	;volatile
  1820  0014B8  C082  F080         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1821  0014BC  0E01               	movlw	1
  1822  0014BE  1780               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  1823  0014C0  3B80               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  1824  0014C2  5083               	movf	131,w,c	;volatile
  1825  0014C4  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1826  0014C6  0BEF               	andlw	-17
  1827  0014C8  1980               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  1828  0014CA  6E83               	movwf	131,c	;volatile
  1829  0014CC                     
  1830                           ; BSR set to: 0
  1831                           ;flexlcd.h: 146: _delay(10);
  1832  0014CC  0E03               	movlw	3
  1833  0014CE                     u1877:
  1834  0014CE  2EE8               	decfsz	wreg,f,c
  1835  0014D0  D7FE               	bra	u1877
  1836  0014D2  F000               	nop	
  1837  0014D4                     
  1838                           ;flexlcd.h: 147: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1839  0014D4  8284               	bsf	132,1,c	;volatile
  1840  0014D6  0E03               	movlw	3
  1841  0014D8                     u1887:
  1842  0014D8  2EE8               	decfsz	wreg,f,c
  1843  0014DA  D7FE               	bra	u1887
  1844  0014DC  F000               	nop	
  1845  0014DE  9284               	bcf	132,1,c	;volatile
  1846  0014E0                     
  1847                           ;flexlcd.h: 148: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long
      +                          )((5500)*(8000000/4000000.0)));
  1848  0014E0  0E03               	movlw	3
  1849  0014E2                     u1897:
  1850  0014E2  2EE8               	decfsz	wreg,f,c
  1851  0014E4  D7FE               	bra	u1897
  1852  0014E6  F000               	nop	
  1853  0014E8  0E0F               	movlw	15
  1854  0014EA  0100               	movlb	0	; () banked
  1855  0014EC  6F80               	movwf	??_Lcd_Chr_CP& (0+255),b
  1856  0014EE  0E47               	movlw	71
  1857  0014F0                     u1907:
  1858  0014F0  2EE8               	decfsz	wreg,f,c
  1859  0014F2  D7FE               	bra	u1907
  1860  0014F4  2F80               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  1861  0014F6  D7FC               	bra	u1907
  1862  0014F8  D000               	nop2	
  1863  0014FA  0012               	return		;funcret
  1864  0014FC                     __end_of_Lcd_Chr_CP:
  1865                           	callstack 0
  1866                           
  1867 ;; *************** function _Lcd_Init *****************
  1868 ;; Defined at:
  1869 ;;		line 54 in file "flexlcd.h"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  data            1    4[BANK0 ] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        2 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    4
  1890 ;; This function calls:
  1891 ;;		_Lcd_Cmd
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text9
  1898  001632                     __ptext9:
  1899                           	callstack 0
  1900  001632                     _Lcd_Init:
  1901                           	callstack 26
  1902  001632                     
  1903                           ;flexlcd.h: 55: unsigned char data;;flexlcd.h: 56: TRISDbits.TRISD7 = 0;
  1904  001632  9E95               	bcf	149,7,c	;volatile
  1905                           
  1906                           ;flexlcd.h: 57: TRISDbits.TRISD6 = 0;
  1907  001634  9C95               	bcf	149,6,c	;volatile
  1908                           
  1909                           ;flexlcd.h: 58: TRISDbits.TRISD5 = 0;
  1910  001636  9A95               	bcf	149,5,c	;volatile
  1911                           
  1912                           ;flexlcd.h: 59: TRISDbits.TRISD4 = 0;
  1913  001638  9895               	bcf	149,4,c	;volatile
  1914                           
  1915                           ;flexlcd.h: 60: TRISEbits.TRISE2 = 0;
  1916  00163A  9496               	bcf	150,2,c	;volatile
  1917                           
  1918                           ;flexlcd.h: 61: TRISEbits.TRISE1 = 0;
  1919  00163C  9296               	bcf	150,1,c	;volatile
  1920                           
  1921                           ;flexlcd.h: 62: PORTDbits.RD7 = 0;
  1922  00163E  9E83               	bcf	131,7,c	;volatile
  1923                           
  1924                           ;flexlcd.h: 63: PORTDbits.RD6 = 0;
  1925  001640  9C83               	bcf	131,6,c	;volatile
  1926                           
  1927                           ;flexlcd.h: 64: PORTDbits.RD5 = 0;
  1928  001642  9A83               	bcf	131,5,c	;volatile
  1929                           
  1930                           ;flexlcd.h: 65: PORTDbits.RD4 = 0;
  1931  001644  9883               	bcf	131,4,c	;volatile
  1932                           
  1933                           ;flexlcd.h: 66: PORTEbits.RE1 = 0;
  1934  001646  9284               	bcf	132,1,c	;volatile
  1935                           
  1936                           ;flexlcd.h: 67: PORTEbits.RE2 = 0;
  1937  001648  9484               	bcf	132,2,c	;volatile
  1938  00164A                     
  1939                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1940  00164A  0E0F               	movlw	15
  1941  00164C  0100               	movlb	0	; () banked
  1942  00164E  6F83               	movwf	??_Lcd_Init& (0+255),b
  1943  001650  0E47               	movlw	71
  1944  001652                     u1917:
  1945  001652  2EE8               	decfsz	wreg,f,c
  1946  001654  D7FE               	bra	u1917
  1947  001656  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  1948  001658  D7FC               	bra	u1917
  1949  00165A  D000               	nop2	
  1950                           
  1951                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1952  00165C  0E0F               	movlw	15
  1953  00165E  0100               	movlb	0	; () banked
  1954  001660  6F83               	movwf	??_Lcd_Init& (0+255),b
  1955  001662  0E47               	movlw	71
  1956  001664                     u1927:
  1957  001664  2EE8               	decfsz	wreg,f,c
  1958  001666  D7FE               	bra	u1927
  1959  001668  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  1960  00166A  D7FC               	bra	u1927
  1961  00166C  D000               	nop2	
  1962                           
  1963                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1964  00166E  0E0F               	movlw	15
  1965  001670  0100               	movlb	0	; () banked
  1966  001672  6F83               	movwf	??_Lcd_Init& (0+255),b
  1967  001674  0E47               	movlw	71
  1968  001676                     u1937:
  1969  001676  2EE8               	decfsz	wreg,f,c
  1970  001678  D7FE               	bra	u1937
  1971  00167A  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  1972  00167C  D7FC               	bra	u1937
  1973  00167E  D000               	nop2	
  1974                           
  1975                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1976  001680  0E0F               	movlw	15
  1977  001682  0100               	movlb	0	; () banked
  1978  001684  6F83               	movwf	??_Lcd_Init& (0+255),b
  1979  001686  0E47               	movlw	71
  1980  001688                     u1947:
  1981  001688  2EE8               	decfsz	wreg,f,c
  1982  00168A  D7FE               	bra	u1947
  1983  00168C  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  1984  00168E  D7FC               	bra	u1947
  1985  001690  D000               	nop2	
  1986                           
  1987                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1988  001692  0E0F               	movlw	15
  1989  001694  0100               	movlb	0	; () banked
  1990  001696  6F83               	movwf	??_Lcd_Init& (0+255),b
  1991  001698  0E47               	movlw	71
  1992  00169A                     u1957:
  1993  00169A  2EE8               	decfsz	wreg,f,c
  1994  00169C  D7FE               	bra	u1957
  1995  00169E  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  1996  0016A0  D7FC               	bra	u1957
  1997  0016A2  D000               	nop2	
  1998                           
  1999                           ;flexlcd.h: 73: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2000  0016A4  0E0F               	movlw	15
  2001  0016A6  0100               	movlb	0	; () banked
  2002  0016A8  6F83               	movwf	??_Lcd_Init& (0+255),b
  2003  0016AA  0E47               	movlw	71
  2004  0016AC                     u1967:
  2005  0016AC  2EE8               	decfsz	wreg,f,c
  2006  0016AE  D7FE               	bra	u1967
  2007  0016B0  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  2008  0016B2  D7FC               	bra	u1967
  2009  0016B4  D000               	nop2	
  2010  0016B6                     
  2011                           ;flexlcd.h: 74: for(data = 1; data < 4; data ++)
  2012  0016B6  0E01               	movlw	1
  2013  0016B8  0100               	movlb	0	; () banked
  2014  0016BA  6F84               	movwf	Lcd_Init@data& (0+255),b
  2015  0016BC                     l155:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;flexlcd.h: 75: {;flexlcd.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  2019  0016BC  9E83               	bcf	131,7,c	;volatile
  2020  0016BE  9C83               	bcf	131,6,c	;volatile
  2021  0016C0  8A83               	bsf	131,5,c	;volatile
  2022  0016C2  8883               	bsf	131,4,c	;volatile
  2023  0016C4  9284               	bcf	132,1,c	;volatile
  2024                           
  2025                           ;flexlcd.h: 77: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  2026  0016C6  9484               	bcf	132,2,c	;volatile
  2027  0016C8  9E83               	bcf	131,7,c	;volatile
  2028  0016CA  9C83               	bcf	131,6,c	;volatile
  2029  0016CC  8A83               	bsf	131,5,c	;volatile
  2030  0016CE  8883               	bsf	131,4,c	;volatile
  2031                           
  2032                           ;flexlcd.h: 78: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  2033  0016D0  8284               	bsf	132,1,c	;volatile
  2034  0016D2  9484               	bcf	132,2,c	;volatile
  2035  0016D4                     
  2036                           ; BSR set to: 0
  2037                           ;flexlcd.h: 79: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2038  0016D4  0E03               	movlw	3
  2039  0016D6                     u1977:
  2040  0016D6  2EE8               	decfsz	wreg,f,c
  2041  0016D8  D7FE               	bra	u1977
  2042  0016DA  F000               	nop	
  2043  0016DC                     
  2044                           ;flexlcd.h: 80: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  2045  0016DC  9E83               	bcf	131,7,c	;volatile
  2046  0016DE  9C83               	bcf	131,6,c	;volatile
  2047  0016E0  8A83               	bsf	131,5,c	;volatile
  2048  0016E2  8883               	bsf	131,4,c	;volatile
  2049  0016E4  9284               	bcf	132,1,c	;volatile
  2050  0016E6                     
  2051                           ;flexlcd.h: 81: PORTEbits.RE2 = 0;
  2052  0016E6  9484               	bcf	132,2,c	;volatile
  2053                           
  2054                           ;flexlcd.h: 82: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2055  0016E8  0E0F               	movlw	15
  2056  0016EA  0100               	movlb	0	; () banked
  2057  0016EC  6F83               	movwf	??_Lcd_Init& (0+255),b
  2058  0016EE  0E47               	movlw	71
  2059  0016F0                     u1987:
  2060  0016F0  2EE8               	decfsz	wreg,f,c
  2061  0016F2  D7FE               	bra	u1987
  2062  0016F4  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  2063  0016F6  D7FC               	bra	u1987
  2064  0016F8  D000               	nop2	
  2065  0016FA  0100               	movlb	0	; () banked
  2066  0016FC  2B84               	incf	Lcd_Init@data& (0+255),f,b
  2067  0016FE  0E03               	movlw	3
  2068  001700  6584               	cpfsgt	Lcd_Init@data& (0+255),b
  2069  001702  EF85  F00B         	goto	u1731
  2070  001706  EF87  F00B         	goto	u1730
  2071  00170A                     u1731:
  2072  00170A  EF5E  F00B         	goto	l155
  2073  00170E                     u1730:
  2074  00170E                     
  2075                           ; BSR set to: 0
  2076                           ;flexlcd.h: 83: };flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2077  00170E  9E83               	bcf	131,7,c	;volatile
  2078  001710  9C83               	bcf	131,6,c	;volatile
  2079  001712  8A83               	bsf	131,5,c	;volatile
  2080  001714  9883               	bcf	131,4,c	;volatile
  2081  001716  9284               	bcf	132,1,c	;volatile
  2082  001718  9484               	bcf	132,2,c	;volatile
  2083                           
  2084                           ;flexlcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  2085  00171A  9E83               	bcf	131,7,c	;volatile
  2086  00171C  9C83               	bcf	131,6,c	;volatile
  2087  00171E  8A83               	bsf	131,5,c	;volatile
  2088  001720  9883               	bcf	131,4,c	;volatile
  2089  001722  8284               	bsf	132,1,c	;volatile
  2090  001724  9484               	bcf	132,2,c	;volatile
  2091  001726                     
  2092                           ; BSR set to: 0
  2093                           ;flexlcd.h: 86: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2094  001726  0E03               	movlw	3
  2095  001728                     u1997:
  2096  001728  2EE8               	decfsz	wreg,f,c
  2097  00172A  D7FE               	bra	u1997
  2098  00172C  F000               	nop	
  2099  00172E                     
  2100                           ;flexlcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2101  00172E  9E83               	bcf	131,7,c	;volatile
  2102  001730  9C83               	bcf	131,6,c	;volatile
  2103  001732  8A83               	bsf	131,5,c	;volatile
  2104  001734  9883               	bcf	131,4,c	;volatile
  2105  001736  9284               	bcf	132,1,c	;volatile
  2106  001738  9484               	bcf	132,2,c	;volatile
  2107                           
  2108                           ;flexlcd.h: 88: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2109  00173A  0E0F               	movlw	15
  2110  00173C  0100               	movlb	0	; () banked
  2111  00173E  6F83               	movwf	??_Lcd_Init& (0+255),b
  2112  001740  0E47               	movlw	71
  2113  001742                     u2007:
  2114  001742  2EE8               	decfsz	wreg,f,c
  2115  001744  D7FE               	bra	u2007
  2116  001746  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  2117  001748  D7FC               	bra	u2007
  2118  00174A  D000               	nop2	
  2119  00174C  0E28               	movlw	40
  2120  00174E  EC7E  F00A         	call	_Lcd_Cmd
  2121  001752  0E10               	movlw	16
  2122  001754  EC7E  F00A         	call	_Lcd_Cmd
  2123  001758  0E01               	movlw	1
  2124  00175A  EC7E  F00A         	call	_Lcd_Cmd
  2125  00175E  0E0F               	movlw	15
  2126  001760  EC7E  F00A         	call	_Lcd_Cmd
  2127  001764  0012               	return		;funcret
  2128  001766                     __end_of_Lcd_Init:
  2129                           	callstack 0
  2130                           
  2131 ;; *************** function _Lcd_Cmd *****************
  2132 ;; Defined at:
  2133 ;;		line 152 in file "flexlcd.h"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  data            1    wreg     unsigned char 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  data            1    2[BANK0 ] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;Total ram usage:        3 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    3
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_Lcd_Init
  2158 ;;		_Lcd_Out
  2159 ;;		_main
  2160 ;;		_Lcd_Out2
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text10
  2165  0014FC                     __ptext10:
  2166                           	callstack 0
  2167  0014FC                     _Lcd_Cmd:
  2168                           	callstack 26
  2169                           
  2170                           ;incstack = 0
  2171                           ;Lcd_Cmd@data stored from wreg
  2172  0014FC  0100               	movlb	0	; () banked
  2173  0014FE  6F82               	movwf	Lcd_Cmd@data& (0+255),b
  2174  001500                     
  2175                           ;flexlcd.h: 153: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2176  001500  9284               	bcf	132,1,c	;volatile
  2177  001502  9484               	bcf	132,2,c	;volatile
  2178  001504                     
  2179                           ;flexlcd.h: 154: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  2180  001504  0100               	movlb	0	; () banked
  2181  001506  6B80               	clrf	??_Lcd_Cmd& (0+255),b
  2182  001508  AF82               	btfss	Lcd_Cmd@data& (0+255),7,b
  2183  00150A  D001               	bra	u1555
  2184  00150C  2B80               	incf	??_Lcd_Cmd& (0+255),f,b
  2185  00150E                     u1555:
  2186  00150E  0E01               	movlw	1
  2187  001510  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2188  001512  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2189  001514  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2190  001516  5083               	movf	131,w,c	;volatile
  2191  001518  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2192  00151A  0B7F               	andlw	-129
  2193  00151C  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2194  00151E  6E83               	movwf	131,c	;volatile
  2195  001520  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2196  001524  0E06               	movlw	6
  2197  001526  6F81               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  2198  001528                     u1565:
  2199  001528  90D8               	bcf	status,0,c
  2200  00152A  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2201  00152C  2F81               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  2202  00152E  EF94  F00A         	goto	u1565
  2203  001532  0E01               	movlw	1
  2204  001534  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2205  001536  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2206  001538  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2207  00153A  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2208  00153C  5083               	movf	131,w,c	;volatile
  2209  00153E  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2210  001540  0BBF               	andlw	-65
  2211  001542  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2212  001544  6E83               	movwf	131,c	;volatile
  2213                           
  2214                           ;flexlcd.h: 155: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  2215  001546  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2216  00154A  0E05               	movlw	5
  2217  00154C  6F81               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  2218  00154E                     u1575:
  2219  00154E  90D8               	bcf	status,0,c
  2220  001550  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2221  001552  2F81               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  2222  001554  EFA7  F00A         	goto	u1575
  2223  001558  0E01               	movlw	1
  2224  00155A  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2225  00155C  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2226  00155E  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2227  001560  5083               	movf	131,w,c	;volatile
  2228  001562  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2229  001564  0BDF               	andlw	-33
  2230  001566  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2231  001568  6E83               	movwf	131,c	;volatile
  2232  00156A  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2233  00156E  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2234  001570  0E0F               	movlw	15
  2235  001572  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2236  001574  0E01               	movlw	1
  2237  001576  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2238  001578  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2239  00157A  5083               	movf	131,w,c	;volatile
  2240  00157C  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2241  00157E  0BEF               	andlw	-17
  2242  001580  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2243  001582  6E83               	movwf	131,c	;volatile
  2244  001584                     
  2245                           ; BSR set to: 0
  2246                           ;flexlcd.h: 156: _delay(10);
  2247  001584  0E03               	movlw	3
  2248  001586                     u2017:
  2249  001586  2EE8               	decfsz	wreg,f,c
  2250  001588  D7FE               	bra	u2017
  2251  00158A  F000               	nop	
  2252  00158C                     
  2253                           ;flexlcd.h: 157: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2254  00158C  8284               	bsf	132,1,c	;volatile
  2255  00158E  0E03               	movlw	3
  2256  001590                     u2027:
  2257  001590  2EE8               	decfsz	wreg,f,c
  2258  001592  D7FE               	bra	u2027
  2259  001594  F000               	nop	
  2260  001596  9284               	bcf	132,1,c	;volatile
  2261                           
  2262                           ;flexlcd.h: 158: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  2263  001598  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2264  00159C  0100               	movlb	0	; () banked
  2265  00159E  90D8               	bcf	status,0,c
  2266  0015A0  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2267  0015A2  90D8               	bcf	status,0,c
  2268  0015A4  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2269  0015A6  90D8               	bcf	status,0,c
  2270  0015A8  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2271  0015AA  0E01               	movlw	1
  2272  0015AC  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2273  0015AE  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2274  0015B0  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2275  0015B2  5083               	movf	131,w,c	;volatile
  2276  0015B4  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2277  0015B6  0B7F               	andlw	-129
  2278  0015B8  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2279  0015BA  6E83               	movwf	131,c	;volatile
  2280  0015BC  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2281  0015C0  90D8               	bcf	status,0,c
  2282  0015C2  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2283  0015C4  90D8               	bcf	status,0,c
  2284  0015C6  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2285  0015C8  0E01               	movlw	1
  2286  0015CA  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2287  0015CC  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2288  0015CE  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2289  0015D0  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2290  0015D2  5083               	movf	131,w,c	;volatile
  2291  0015D4  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2292  0015D6  0BBF               	andlw	-65
  2293  0015D8  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2294  0015DA  6E83               	movwf	131,c	;volatile
  2295                           
  2296                           ;flexlcd.h: 159: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  2297  0015DC  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2298  0015E0  90D8               	bcf	status,0,c
  2299  0015E2  3380               	rrcf	??_Lcd_Cmd& (0+255),f,b
  2300  0015E4  0E01               	movlw	1
  2301  0015E6  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2302  0015E8  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2303  0015EA  4780               	rlncf	??_Lcd_Cmd& (0+255),f,b
  2304  0015EC  5083               	movf	131,w,c	;volatile
  2305  0015EE  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2306  0015F0  0BDF               	andlw	-33
  2307  0015F2  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2308  0015F4  6E83               	movwf	131,c	;volatile
  2309  0015F6  C082  F080         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2310  0015FA  0E01               	movlw	1
  2311  0015FC  1780               	andwf	??_Lcd_Cmd& (0+255),f,b
  2312  0015FE  3B80               	swapf	??_Lcd_Cmd& (0+255),f,b
  2313  001600  5083               	movf	131,w,c	;volatile
  2314  001602  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2315  001604  0BEF               	andlw	-17
  2316  001606  1980               	xorwf	??_Lcd_Cmd& (0+255),w,b
  2317  001608  6E83               	movwf	131,c	;volatile
  2318  00160A                     
  2319                           ; BSR set to: 0
  2320                           ;flexlcd.h: 160: _delay(10);
  2321  00160A  0E03               	movlw	3
  2322  00160C                     u2037:
  2323  00160C  2EE8               	decfsz	wreg,f,c
  2324  00160E  D7FE               	bra	u2037
  2325  001610  F000               	nop	
  2326  001612                     
  2327                           ;flexlcd.h: 161: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2328  001612  8284               	bsf	132,1,c	;volatile
  2329  001614  0E03               	movlw	3
  2330  001616                     u2047:
  2331  001616  2EE8               	decfsz	wreg,f,c
  2332  001618  D7FE               	bra	u2047
  2333  00161A  F000               	nop	
  2334  00161C  9284               	bcf	132,1,c	;volatile
  2335  00161E                     
  2336                           ;flexlcd.h: 162: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2337  00161E  0E0F               	movlw	15
  2338  001620  0100               	movlb	0	; () banked
  2339  001622  6F80               	movwf	??_Lcd_Cmd& (0+255),b
  2340  001624  0E47               	movlw	71
  2341  001626                     u2057:
  2342  001626  2EE8               	decfsz	wreg,f,c
  2343  001628  D7FE               	bra	u2057
  2344  00162A  2F80               	decfsz	??_Lcd_Cmd& (0+255),f,b
  2345  00162C  D7FC               	bra	u2057
  2346  00162E  D000               	nop2	
  2347  001630  0012               	return		;funcret
  2348  001632                     __end_of_Lcd_Cmd:
  2349                           	callstack 0
  2350                           
  2351 ;; *************** function _isr *****************
  2352 ;; Defined at:
  2353 ;;		line 91 in file "mainUART.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;		None
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;		None
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;Total ram usage:        9 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    2
  2374 ;; This function calls:
  2375 ;;		_PWM1_Set_Duty
  2376 ;;		_adc_amostra
  2377 ;;		_serial_tx_str
  2378 ;;		_sprintf
  2379 ;;		i2_Lcd_Out
  2380 ;; This function is called by:
  2381 ;;		Interrupt level 2
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	intcode
  2386  000008                     __pintcode:
  2387                           	callstack 0
  2388  000008                     _isr:
  2389                           	callstack 26
  2390                           
  2391                           ;incstack = 0
  2392  000008  825E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2393  00000A  EDE3  F00C         	call	int_func,f	;refresh shadow registers
  2394                           
  2395                           	psect	intcode_body
  2396  0019C6                     __pintcode_body:
  2397                           	callstack 26
  2398  0019C6                     int_func:
  2399                           	callstack 26
  2400  0019C6  0006               	pop		; remove dummy address from shadow register refresh
  2401  0019C8  CFD9 F054          	movff	fsr2l,??_isr+1
  2402  0019CC  CFDA F055          	movff	fsr2h,??_isr+2
  2403  0019D0  CFF3 F056          	movff	prodl,??_isr+3
  2404  0019D4  CFF4 F057          	movff	prodh,??_isr+4
  2405  0019D8  CFF6 F058          	movff	tblptrl,??_isr+5
  2406  0019DC  CFF7 F059          	movff	tblptrh,??_isr+6
  2407  0019E0  CFF8 F05A          	movff	tblptru,??_isr+7
  2408  0019E4  CFF5 F05B          	movff	tablat,??_isr+8
  2409  0019E8                     
  2410                           ;mainUART.c: 93: if (INTCONbits.TMR0IF == 1)
  2411  0019E8  A4F2               	btfss	242,2,c	;volatile
  2412  0019EA  EFF9  F00C         	goto	i2u152_41
  2413  0019EE  EFFB  F00C         	goto	i2u152_40
  2414  0019F2                     i2u152_41:
  2415  0019F2  EF5B  F00D         	goto	i2l218
  2416  0019F6                     i2u152_40:
  2417  0019F6                     
  2418                           ;mainUART.c: 94: {;mainUART.c: 95: INTCONbits.TMR0IF = 0;
  2419  0019F6  94F2               	bcf	242,2,c	;volatile
  2420  0019F8                     
  2421                           ;mainUART.c: 96: TMR0 = 131;
  2422  0019F8  0E00               	movlw	0
  2423  0019FA  6ED7               	movwf	215,c	;volatile
  2424  0019FC  0E83               	movlw	131
  2425  0019FE  6ED6               	movwf	214,c	;volatile
  2426  001A00                     
  2427                           ;mainUART.c: 97: count ++;
  2428  001A00  4A03               	infsnz	_count^0,f,c
  2429  001A02  2A04               	incf	(_count+1)^0,f,c
  2430  001A04                     
  2431                           ;mainUART.c: 98: if (count == 250)
  2432  001A04  0EFA               	movlw	250
  2433  001A06  1803               	xorwf	_count^0,w,c
  2434  001A08  1004               	iorwf	(_count+1)^0,w,c
  2435  001A0A  A4D8               	btfss	status,2,c
  2436  001A0C  EF0A  F00D         	goto	i2u153_41
  2437  001A10  EF0C  F00D         	goto	i2u153_40
  2438  001A14                     i2u153_41:
  2439  001A14  EF5B  F00D         	goto	i2l218
  2440  001A18                     i2u153_40:
  2441  001A18                     
  2442                           ;mainUART.c: 99: {;mainUART.c: 100: count = 0;
  2443  001A18  0E00               	movlw	0
  2444  001A1A  6E04               	movwf	(_count+1)^0,c
  2445  001A1C  0E00               	movlw	0
  2446  001A1E  6E03               	movwf	_count^0,c
  2447  001A20                     
  2448                           ;mainUART.c: 101: LATDbits.LATD1 = ~LATDbits.LATD1;
  2449  001A20  B28C               	btfsc	140,1,c	;volatile
  2450  001A22  EF15  F00D         	goto	i2u154_41
  2451  001A26  EF18  F00D         	goto	i2u154_40
  2452  001A2A                     i2u154_41:
  2453  001A2A  0E01               	movlw	1
  2454  001A2C  EF19  F00D         	goto	i2u154_46
  2455  001A30                     i2u154_40:
  2456  001A30  0E00               	movlw	0
  2457  001A32                     i2u154_46:
  2458  001A32  0AFF               	xorlw	255
  2459  001A34  6E53               	movwf	??_isr^0,c
  2460  001A36  4653               	rlncf	??_isr^0,f,c
  2461  001A38  508C               	movf	140,w,c	;volatile
  2462  001A3A  1853               	xorwf	??_isr^0,w,c
  2463  001A3C  0BFD               	andlw	-3
  2464  001A3E  1853               	xorwf	??_isr^0,w,c
  2465  001A40  6E8C               	movwf	140,c	;volatile
  2466  001A42                     
  2467                           ;mainUART.c: 102: PWM1_Set_Duty(duty);
  2468  001A42  505C               	movf	_duty^0,w,c
  2469  001A44  ECA8  F00F         	call	_PWM1_Set_Duty
  2470  001A48                     
  2471                           ;mainUART.c: 103: infrav = TMR1L;
  2472  001A48  CFCE F005          	movff	4046,_infrav	;volatile
  2473  001A4C  6A06               	clrf	(_infrav+1)^0,c
  2474  001A4E                     
  2475                           ;mainUART.c: 104: infrav += TMR1H<<8;
  2476  001A4E  50CF               	movf	207,w,c	;volatile
  2477  001A50  2606               	addwf	(_infrav+1)^0,f,c
  2478  001A52                     
  2479                           ;mainUART.c: 105: sprintf(str, "%05u", infrav);
  2480  001A52  0E2F               	movlw	low _str
  2481  001A54  6E40               	movwf	sprintf@sp^0,c
  2482  001A56  0E00               	movlw	high _str
  2483  001A58  6E41               	movwf	(sprintf@sp+1)^0,c
  2484  001A5A  0E13               	movlw	low STR_1
  2485  001A5C  6E42               	movwf	sprintf@f^0,c
  2486  001A5E  0E10               	movlw	high STR_1
  2487  001A60  6E43               	movwf	(sprintf@f+1)^0,c
  2488  001A62  C005  F044         	movff	_infrav,?_sprintf+4
  2489  001A66  C006  F045         	movff	_infrav+1,?_sprintf+5
  2490  001A6A  EC0D  F008         	call	_sprintf	;wreg free
  2491  001A6E                     
  2492                           ;mainUART.c: 106: Lcd_Out(1, 0, str);
  2493  001A6E  0E00               	movlw	0
  2494  001A70  6E37               	movwf	i2Lcd_Out@x^0,c
  2495  001A72  0E2F               	movlw	low _str
  2496  001A74  6E38               	movwf	i2Lcd_Out@buffer^0,c
  2497  001A76  0E00               	movlw	high _str
  2498  001A78  6E39               	movwf	(i2Lcd_Out@buffer+1)^0,c
  2499  001A7A  0E01               	movlw	1
  2500  001A7C  EC39  F010         	call	i2_Lcd_Out
  2501  001A80                     
  2502                           ;mainUART.c: 107: result = adc_amostra(1);
  2503  001A80  0E01               	movlw	1
  2504  001A82  EC7E  F010         	call	_adc_amostra
  2505  001A86  C034  F001         	movff	?_adc_amostra,_result
  2506  001A8A  C035  F002         	movff	?_adc_amostra+1,_result+1
  2507  001A8E                     
  2508                           ;mainUART.c: 108: sprintf(buffer_tx, "/*%04d/", result);
  2509  001A8E  0E1B               	movlw	low _buffer_tx
  2510  001A90  6E40               	movwf	sprintf@sp^0,c
  2511  001A92  0E00               	movlw	high _buffer_tx
  2512  001A94  6E41               	movwf	(sprintf@sp+1)^0,c
  2513  001A96  0E0B               	movlw	low STR_2
  2514  001A98  6E42               	movwf	sprintf@f^0,c
  2515  001A9A  0E10               	movlw	high STR_2
  2516  001A9C  6E43               	movwf	(sprintf@f+1)^0,c
  2517  001A9E  C001  F044         	movff	_result,?_sprintf+4
  2518  001AA2  C002  F045         	movff	_result+1,?_sprintf+5
  2519  001AA6  EC0D  F008         	call	_sprintf	;wreg free
  2520  001AAA                     
  2521                           ;mainUART.c: 109: serial_tx_str(buffer_tx);
  2522  001AAA  0E1B               	movlw	low _buffer_tx
  2523  001AAC  6E35               	movwf	serial_tx_str@val^0,c
  2524  001AAE  0E00               	movlw	high _buffer_tx
  2525  001AB0  6E36               	movwf	(serial_tx_str@val+1)^0,c
  2526  001AB2  EC5D  F011         	call	_serial_tx_str	;wreg free
  2527  001AB6                     i2l218:
  2528  001AB6  C05B  FFF5         	movff	??_isr+8,tablat
  2529  001ABA  C05A  FFF8         	movff	??_isr+7,tblptru
  2530  001ABE  C059  FFF7         	movff	??_isr+6,tblptrh
  2531  001AC2  C058  FFF6         	movff	??_isr+5,tblptrl
  2532  001AC6  C057  FFF4         	movff	??_isr+4,prodh
  2533  001ACA  C056  FFF3         	movff	??_isr+3,prodl
  2534  001ACE  C055  FFDA         	movff	??_isr+2,fsr2h
  2535  001AD2  C054  FFD9         	movff	??_isr+1,fsr2l
  2536  001AD6  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2537  001AD8  0011               	retfie		f
  2538  001ADA                     __end_of_isr:
  2539                           	callstack 0
  2540                           
  2541 ;; *************** function i2_Lcd_Out *****************
  2542 ;; Defined at:
  2543 ;;		line 96 in file "flexlcd.h"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  y               1    wreg     unsigned char 
  2546 ;;  x               1    3[COMRAM] unsigned char 
  2547 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  2548 ;;		 -> str(5), buffer_rx(20), 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  y               1    6[COMRAM] unsigned char 
  2551 ;;  data            1    7[COMRAM] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2561 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;Total ram usage:        5 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    1
  2568 ;; This function calls:
  2569 ;;		i2_Lcd_Chr_CP
  2570 ;;		i2_Lcd_Cmd
  2571 ;; This function is called by:
  2572 ;;		_isr
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text12
  2577  002072                     __ptext12:
  2578                           	callstack 0
  2579  002072                     i2_Lcd_Out:
  2580                           	callstack 26
  2581                           
  2582                           ;incstack = 0
  2583                           ;i2Lcd_Out@y stored from wreg
  2584  002072  6E3A               	movwf	i2Lcd_Out@y^0,c
  2585  002074                     
  2586                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  2587  002074  EF50  F010         	goto	i2l2232
  2588  002078                     i2l2222:
  2589  002078  5037               	movf	i2Lcd_Out@x^0,w,c
  2590  00207A  0F80               	addlw	128
  2591  00207C  6E3B               	movwf	i2Lcd_Out@data^0,c
  2592  00207E  EF63  F010         	goto	i2l2234
  2593  002082                     i2l2224:
  2594  002082  5037               	movf	i2Lcd_Out@x^0,w,c
  2595  002084  0FC0               	addlw	192
  2596  002086  6E3B               	movwf	i2Lcd_Out@data^0,c
  2597  002088  EF63  F010         	goto	i2l2234
  2598  00208C                     i2l2226:
  2599  00208C  5037               	movf	i2Lcd_Out@x^0,w,c
  2600  00208E  0F94               	addlw	148
  2601  002090  6E3B               	movwf	i2Lcd_Out@data^0,c
  2602  002092  EF63  F010         	goto	i2l2234
  2603  002096                     i2l2228:
  2604  002096  5037               	movf	i2Lcd_Out@x^0,w,c
  2605  002098  0FD4               	addlw	212
  2606  00209A  6E3B               	movwf	i2Lcd_Out@data^0,c
  2607  00209C  EF63  F010         	goto	i2l2234
  2608  0020A0                     i2l2232:
  2609  0020A0  503A               	movf	i2Lcd_Out@y^0,w,c
  2610                           
  2611                           ; Switch size 1, requested type "simple"
  2612                           ; Number of cases is 4, Range of values is 1 to 4
  2613                           ; switch strategies available:
  2614                           ; Name         Instructions Cycles
  2615                           ; simple_byte           13     7 (average)
  2616                           ;	Chosen strategy is simple_byte
  2617  0020A2  0A01               	xorlw	1	; case 1
  2618  0020A4  B4D8               	btfsc	status,2,c
  2619  0020A6  EF3C  F010         	goto	i2l2222
  2620  0020AA  0A03               	xorlw	3	; case 2
  2621  0020AC  B4D8               	btfsc	status,2,c
  2622  0020AE  EF41  F010         	goto	i2l2224
  2623  0020B2  0A01               	xorlw	1	; case 3
  2624  0020B4  B4D8               	btfsc	status,2,c
  2625  0020B6  EF46  F010         	goto	i2l2226
  2626  0020BA  0A07               	xorlw	7	; case 4
  2627  0020BC  B4D8               	btfsc	status,2,c
  2628  0020BE  EF4B  F010         	goto	i2l2228
  2629  0020C2  EF63  F010         	goto	i2l2234
  2630  0020C6                     i2l2234:
  2631                           
  2632                           ;flexlcd.h: 107: Lcd_Cmd(data);
  2633  0020C6  503B               	movf	i2Lcd_Out@data^0,w,c
  2634  0020C8  EC4D  F00C         	call	i2_Lcd_Cmd
  2635                           
  2636                           ;flexlcd.h: 108: while(*buffer)
  2637  0020CC  EF71  F010         	goto	i2l2240
  2638  0020D0                     i2l2236:
  2639                           
  2640                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  2641  0020D0  C038  FFD9         	movff	i2Lcd_Out@buffer,fsr2l
  2642  0020D4  C039  FFDA         	movff	i2Lcd_Out@buffer+1,fsr2h
  2643  0020D8  50DF               	movf	indf2,w,c
  2644  0020DA  ECB3  F00B         	call	i2_Lcd_Chr_CP
  2645  0020DE                     
  2646                           ;flexlcd.h: 111: buffer++;
  2647  0020DE  4A38               	infsnz	i2Lcd_Out@buffer^0,f,c
  2648  0020E0  2A39               	incf	(i2Lcd_Out@buffer+1)^0,f,c
  2649  0020E2                     i2l2240:
  2650  0020E2  C038  FFD9         	movff	i2Lcd_Out@buffer,fsr2l
  2651  0020E6  C039  FFDA         	movff	i2Lcd_Out@buffer+1,fsr2h
  2652  0020EA  50DF               	movf	indf2,w,c
  2653  0020EC  A4D8               	btfss	status,2,c
  2654  0020EE  EF7B  F010         	goto	i2u151_41
  2655  0020F2  EF7D  F010         	goto	i2u151_40
  2656  0020F6                     i2u151_41:
  2657  0020F6  EF68  F010         	goto	i2l2236
  2658  0020FA                     i2u151_40:
  2659  0020FA  0012               	return		;funcret
  2660  0020FC                     __end_ofi2_Lcd_Out:
  2661                           	callstack 0
  2662                           
  2663 ;; *************** function i2_Lcd_Cmd *****************
  2664 ;; Defined at:
  2665 ;;		line 152 in file "flexlcd.h"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  data            1    wreg     unsigned char 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  data            1    2[COMRAM] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        3 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		i2_Lcd_Out
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text13
  2693  00189A                     __ptext13:
  2694                           	callstack 0
  2695  00189A                     i2_Lcd_Cmd:
  2696                           	callstack 26
  2697                           
  2698                           ;incstack = 0
  2699                           ;i2Lcd_Cmd@data stored from wreg
  2700  00189A  6E36               	movwf	i2Lcd_Cmd@data^0,c
  2701  00189C                     
  2702                           ;flexlcd.h: 153: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2703  00189C  9284               	bcf	132,1,c	;volatile
  2704  00189E  9484               	bcf	132,2,c	;volatile
  2705  0018A0                     
  2706                           ;flexlcd.h: 154: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  2707  0018A0  6A34               	clrf	??i2_Lcd_Cmd^0,c
  2708  0018A2  AE36               	btfss	i2Lcd_Cmd@data^0,7,c
  2709  0018A4  D001               	bra	i2u113_45
  2710  0018A6  2A34               	incf	??i2_Lcd_Cmd^0,f,c
  2711  0018A8                     i2u113_45:
  2712  0018A8  0E01               	movlw	1
  2713  0018AA  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2714  0018AC  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2715  0018AE  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2716  0018B0  5083               	movf	131,w,c	;volatile
  2717  0018B2  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2718  0018B4  0B7F               	andlw	-129
  2719  0018B6  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2720  0018B8  6E83               	movwf	131,c	;volatile
  2721  0018BA  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2722  0018BE  0E06               	movlw	6
  2723  0018C0  6E35               	movwf	(??i2_Lcd_Cmd+1)^0,c
  2724  0018C2                     i2u114_45:
  2725  0018C2  90D8               	bcf	status,0,c
  2726  0018C4  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2727  0018C6  2E35               	decfsz	(??i2_Lcd_Cmd+1)^0,f,c
  2728  0018C8  EF61  F00C         	goto	i2u114_45
  2729  0018CC  0E01               	movlw	1
  2730  0018CE  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2731  0018D0  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2732  0018D2  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2733  0018D4  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2734  0018D6  5083               	movf	131,w,c	;volatile
  2735  0018D8  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2736  0018DA  0BBF               	andlw	-65
  2737  0018DC  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2738  0018DE  6E83               	movwf	131,c	;volatile
  2739                           
  2740                           ;flexlcd.h: 155: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  2741  0018E0  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2742  0018E4  0E05               	movlw	5
  2743  0018E6  6E35               	movwf	(??i2_Lcd_Cmd+1)^0,c
  2744  0018E8                     i2u115_45:
  2745  0018E8  90D8               	bcf	status,0,c
  2746  0018EA  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2747  0018EC  2E35               	decfsz	(??i2_Lcd_Cmd+1)^0,f,c
  2748  0018EE  EF74  F00C         	goto	i2u115_45
  2749  0018F2  0E01               	movlw	1
  2750  0018F4  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2751  0018F6  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2752  0018F8  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2753  0018FA  5083               	movf	131,w,c	;volatile
  2754  0018FC  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2755  0018FE  0BDF               	andlw	-33
  2756  001900  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2757  001902  6E83               	movwf	131,c	;volatile
  2758  001904  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2759  001908  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2760  00190A  0E0F               	movlw	15
  2761  00190C  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2762  00190E  0E01               	movlw	1
  2763  001910  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2764  001912  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2765  001914  5083               	movf	131,w,c	;volatile
  2766  001916  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2767  001918  0BEF               	andlw	-17
  2768  00191A  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2769  00191C  6E83               	movwf	131,c	;volatile
  2770  00191E                     
  2771                           ;flexlcd.h: 156: _delay(10);
  2772  00191E  0E03               	movlw	3
  2773  001920                     i2u206_47:
  2774  001920  2EE8               	decfsz	wreg,f,c
  2775  001922  D7FE               	bra	i2u206_47
  2776  001924  F000               	nop	
  2777  001926                     
  2778                           ;flexlcd.h: 157: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2779  001926  8284               	bsf	132,1,c	;volatile
  2780  001928  0E03               	movlw	3
  2781  00192A                     i2u207_47:
  2782  00192A  2EE8               	decfsz	wreg,f,c
  2783  00192C  D7FE               	bra	i2u207_47
  2784  00192E  F000               	nop	
  2785  001930  9284               	bcf	132,1,c	;volatile
  2786                           
  2787                           ;flexlcd.h: 158: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  2788  001932  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2789  001936  90D8               	bcf	status,0,c
  2790  001938  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2791  00193A  90D8               	bcf	status,0,c
  2792  00193C  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2793  00193E  90D8               	bcf	status,0,c
  2794  001940  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2795  001942  0E01               	movlw	1
  2796  001944  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2797  001946  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2798  001948  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2799  00194A  5083               	movf	131,w,c	;volatile
  2800  00194C  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2801  00194E  0B7F               	andlw	-129
  2802  001950  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2803  001952  6E83               	movwf	131,c	;volatile
  2804  001954  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2805  001958  90D8               	bcf	status,0,c
  2806  00195A  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2807  00195C  90D8               	bcf	status,0,c
  2808  00195E  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2809  001960  0E01               	movlw	1
  2810  001962  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2811  001964  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2812  001966  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2813  001968  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2814  00196A  5083               	movf	131,w,c	;volatile
  2815  00196C  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2816  00196E  0BBF               	andlw	-65
  2817  001970  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2818  001972  6E83               	movwf	131,c	;volatile
  2819                           
  2820                           ;flexlcd.h: 159: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  2821  001974  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2822  001978  90D8               	bcf	status,0,c
  2823  00197A  3234               	rrcf	??i2_Lcd_Cmd^0,f,c
  2824  00197C  0E01               	movlw	1
  2825  00197E  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2826  001980  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2827  001982  4634               	rlncf	??i2_Lcd_Cmd^0,f,c
  2828  001984  5083               	movf	131,w,c	;volatile
  2829  001986  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2830  001988  0BDF               	andlw	-33
  2831  00198A  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2832  00198C  6E83               	movwf	131,c	;volatile
  2833  00198E  C036  F034         	movff	i2Lcd_Cmd@data,??i2_Lcd_Cmd
  2834  001992  0E01               	movlw	1
  2835  001994  1634               	andwf	??i2_Lcd_Cmd^0,f,c
  2836  001996  3A34               	swapf	??i2_Lcd_Cmd^0,f,c
  2837  001998  5083               	movf	131,w,c	;volatile
  2838  00199A  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2839  00199C  0BEF               	andlw	-17
  2840  00199E  1834               	xorwf	??i2_Lcd_Cmd^0,w,c
  2841  0019A0  6E83               	movwf	131,c	;volatile
  2842  0019A2                     
  2843                           ;flexlcd.h: 160: _delay(10);
  2844  0019A2  0E03               	movlw	3
  2845  0019A4                     i2u208_47:
  2846  0019A4  2EE8               	decfsz	wreg,f,c
  2847  0019A6  D7FE               	bra	i2u208_47
  2848  0019A8  F000               	nop	
  2849  0019AA                     
  2850                           ;flexlcd.h: 161: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2851  0019AA  8284               	bsf	132,1,c	;volatile
  2852  0019AC  0E03               	movlw	3
  2853  0019AE                     i2u209_47:
  2854  0019AE  2EE8               	decfsz	wreg,f,c
  2855  0019B0  D7FE               	bra	i2u209_47
  2856  0019B2  F000               	nop	
  2857  0019B4  9284               	bcf	132,1,c	;volatile
  2858  0019B6                     
  2859                           ;flexlcd.h: 162: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2860  0019B6  0E0F               	movlw	15
  2861  0019B8  6E34               	movwf	??i2_Lcd_Cmd^0,c
  2862  0019BA  0E48               	movlw	72
  2863  0019BC                     i2u210_47:
  2864  0019BC  2EE8               	decfsz	wreg,f,c
  2865  0019BE  D7FE               	bra	i2u210_47
  2866  0019C0  2E34               	decfsz	??i2_Lcd_Cmd^0,f,c
  2867  0019C2  D7FC               	bra	i2u210_47
  2868  0019C4  0012               	return		;funcret
  2869  0019C6                     __end_ofi2_Lcd_Cmd:
  2870                           	callstack 0
  2871                           
  2872 ;; *************** function i2_Lcd_Chr_CP *****************
  2873 ;; Defined at:
  2874 ;;		line 138 in file "flexlcd.h"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  data            1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  data            1    2[COMRAM] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2, status,0
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;Total ram usage:        3 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		i2_Lcd_Out
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text14
  2902  001766                     __ptext14:
  2903                           	callstack 0
  2904  001766                     i2_Lcd_Chr_CP:
  2905                           	callstack 26
  2906                           
  2907                           ;incstack = 0
  2908                           ;i2Lcd_Chr_CP@data stored from wreg
  2909  001766  6E36               	movwf	i2Lcd_Chr_CP@data^0,c
  2910  001768                     
  2911                           ;flexlcd.h: 139: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  2912  001768  9284               	bcf	132,1,c	;volatile
  2913  00176A  8484               	bsf	132,2,c	;volatile
  2914  00176C                     
  2915                           ;flexlcd.h: 140: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  2916  00176C  6A34               	clrf	??i2_Lcd_Chr_CP^0,c
  2917  00176E  AE36               	btfss	i2Lcd_Chr_CP@data^0,7,c
  2918  001770  D001               	bra	i2u110_45
  2919  001772  2A34               	incf	??i2_Lcd_Chr_CP^0,f,c
  2920  001774                     i2u110_45:
  2921  001774  0E01               	movlw	1
  2922  001776  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  2923  001778  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  2924  00177A  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  2925  00177C  5083               	movf	131,w,c	;volatile
  2926  00177E  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2927  001780  0B7F               	andlw	-129
  2928  001782  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2929  001784  6E83               	movwf	131,c	;volatile
  2930  001786  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  2931  00178A  0E06               	movlw	6
  2932  00178C  6E35               	movwf	(??i2_Lcd_Chr_CP+1)^0,c
  2933  00178E                     i2u111_45:
  2934  00178E  90D8               	bcf	status,0,c
  2935  001790  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  2936  001792  2E35               	decfsz	(??i2_Lcd_Chr_CP+1)^0,f,c
  2937  001794  EFC7  F00B         	goto	i2u111_45
  2938  001798  0E01               	movlw	1
  2939  00179A  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  2940  00179C  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  2941  00179E  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  2942  0017A0  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  2943  0017A2  5083               	movf	131,w,c	;volatile
  2944  0017A4  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2945  0017A6  0BBF               	andlw	-65
  2946  0017A8  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2947  0017AA  6E83               	movwf	131,c	;volatile
  2948                           
  2949                           ;flexlcd.h: 141: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  2950  0017AC  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  2951  0017B0  0E05               	movlw	5
  2952  0017B2  6E35               	movwf	(??i2_Lcd_Chr_CP+1)^0,c
  2953  0017B4                     i2u112_45:
  2954  0017B4  90D8               	bcf	status,0,c
  2955  0017B6  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  2956  0017B8  2E35               	decfsz	(??i2_Lcd_Chr_CP+1)^0,f,c
  2957  0017BA  EFDA  F00B         	goto	i2u112_45
  2958  0017BE  0E01               	movlw	1
  2959  0017C0  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  2960  0017C2  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  2961  0017C4  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  2962  0017C6  5083               	movf	131,w,c	;volatile
  2963  0017C8  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2964  0017CA  0BDF               	andlw	-33
  2965  0017CC  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2966  0017CE  6E83               	movwf	131,c	;volatile
  2967  0017D0  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  2968  0017D4  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  2969  0017D6  0E0F               	movlw	15
  2970  0017D8  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  2971  0017DA  0E01               	movlw	1
  2972  0017DC  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  2973  0017DE  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  2974  0017E0  5083               	movf	131,w,c	;volatile
  2975  0017E2  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2976  0017E4  0BEF               	andlw	-17
  2977  0017E6  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  2978  0017E8  6E83               	movwf	131,c	;volatile
  2979  0017EA                     
  2980                           ;flexlcd.h: 142: _delay(10);
  2981  0017EA  0E03               	movlw	3
  2982  0017EC                     i2u211_47:
  2983  0017EC  2EE8               	decfsz	wreg,f,c
  2984  0017EE  D7FE               	bra	i2u211_47
  2985  0017F0  F000               	nop	
  2986  0017F2                     
  2987                           ;flexlcd.h: 143: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2988  0017F2  8284               	bsf	132,1,c	;volatile
  2989  0017F4  0E03               	movlw	3
  2990  0017F6                     i2u212_47:
  2991  0017F6  2EE8               	decfsz	wreg,f,c
  2992  0017F8  D7FE               	bra	i2u212_47
  2993  0017FA  F000               	nop	
  2994  0017FC  9284               	bcf	132,1,c	;volatile
  2995                           
  2996                           ;flexlcd.h: 144: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  2997  0017FE  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  2998  001802  90D8               	bcf	status,0,c
  2999  001804  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3000  001806  90D8               	bcf	status,0,c
  3001  001808  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3002  00180A  90D8               	bcf	status,0,c
  3003  00180C  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3004  00180E  0E01               	movlw	1
  3005  001810  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  3006  001812  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3007  001814  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3008  001816  5083               	movf	131,w,c	;volatile
  3009  001818  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3010  00181A  0B7F               	andlw	-129
  3011  00181C  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3012  00181E  6E83               	movwf	131,c	;volatile
  3013  001820  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  3014  001824  90D8               	bcf	status,0,c
  3015  001826  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3016  001828  90D8               	bcf	status,0,c
  3017  00182A  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3018  00182C  0E01               	movlw	1
  3019  00182E  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  3020  001830  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  3021  001832  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  3022  001834  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  3023  001836  5083               	movf	131,w,c	;volatile
  3024  001838  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3025  00183A  0BBF               	andlw	-65
  3026  00183C  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3027  00183E  6E83               	movwf	131,c	;volatile
  3028                           
  3029                           ;flexlcd.h: 145: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  3030  001840  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  3031  001844  90D8               	bcf	status,0,c
  3032  001846  3234               	rrcf	??i2_Lcd_Chr_CP^0,f,c
  3033  001848  0E01               	movlw	1
  3034  00184A  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  3035  00184C  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  3036  00184E  4634               	rlncf	??i2_Lcd_Chr_CP^0,f,c
  3037  001850  5083               	movf	131,w,c	;volatile
  3038  001852  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3039  001854  0BDF               	andlw	-33
  3040  001856  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3041  001858  6E83               	movwf	131,c	;volatile
  3042  00185A  C036  F034         	movff	i2Lcd_Chr_CP@data,??i2_Lcd_Chr_CP
  3043  00185E  0E01               	movlw	1
  3044  001860  1634               	andwf	??i2_Lcd_Chr_CP^0,f,c
  3045  001862  3A34               	swapf	??i2_Lcd_Chr_CP^0,f,c
  3046  001864  5083               	movf	131,w,c	;volatile
  3047  001866  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3048  001868  0BEF               	andlw	-17
  3049  00186A  1834               	xorwf	??i2_Lcd_Chr_CP^0,w,c
  3050  00186C  6E83               	movwf	131,c	;volatile
  3051  00186E                     
  3052                           ;flexlcd.h: 146: _delay(10);
  3053  00186E  0E03               	movlw	3
  3054  001870                     i2u213_47:
  3055  001870  2EE8               	decfsz	wreg,f,c
  3056  001872  D7FE               	bra	i2u213_47
  3057  001874  F000               	nop	
  3058  001876                     
  3059                           ;flexlcd.h: 147: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  3060  001876  8284               	bsf	132,1,c	;volatile
  3061  001878  0E03               	movlw	3
  3062  00187A                     i2u214_47:
  3063  00187A  2EE8               	decfsz	wreg,f,c
  3064  00187C  D7FE               	bra	i2u214_47
  3065  00187E  F000               	nop	
  3066  001880  9284               	bcf	132,1,c	;volatile
  3067  001882                     
  3068                           ;flexlcd.h: 148: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long
      +                          )((5500)*(8000000/4000000.0)));
  3069  001882  0E03               	movlw	3
  3070  001884                     i2u215_47:
  3071  001884  2EE8               	decfsz	wreg,f,c
  3072  001886  D7FE               	bra	i2u215_47
  3073  001888  F000               	nop	
  3074  00188A  0E0F               	movlw	15
  3075  00188C  6E34               	movwf	??i2_Lcd_Chr_CP^0,c
  3076  00188E  0E48               	movlw	72
  3077  001890                     i2u216_47:
  3078  001890  2EE8               	decfsz	wreg,f,c
  3079  001892  D7FE               	bra	i2u216_47
  3080  001894  2E34               	decfsz	??i2_Lcd_Chr_CP^0,f,c
  3081  001896  D7FC               	bra	i2u216_47
  3082  001898  0012               	return		;funcret
  3083  00189A                     __end_ofi2_Lcd_Chr_CP:
  3084                           	callstack 0
  3085                           
  3086 ;; *************** function _sprintf *****************
  3087 ;; Defined at:
  3088 ;;		line 505 in file "D:\MPLABX\XC8\pic\sources\c90\common\doprnt.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3091 ;;		 -> buffer_tx(20), str(5), 
  3092 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3093 ;;		 -> STR_2(8), STR_1(5), 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  tmpval          4    0        struct .
  3096 ;;  cp              3    0        PTR const unsigned char 
  3097 ;;  width           2   28[COMRAM] int 
  3098 ;;  val             2   25[COMRAM] unsigned int 
  3099 ;;  ap              2   23[COMRAM] PTR void [1]
  3100 ;;		 -> ?_sprintf(2), 
  3101 ;;  len             2    0        unsigned int 
  3102 ;;  c               1   30[COMRAM] unsigned char 
  3103 ;;  flag            1   27[COMRAM] unsigned char 
  3104 ;;  prec            1   22[COMRAM] char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  2   12[COMRAM] int 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:       19 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    1
  3121 ;; This function calls:
  3122 ;;		___lwdiv
  3123 ;;		___lwmod
  3124 ;;		___wmul
  3125 ;;		_isdigit
  3126 ;; This function is called by:
  3127 ;;		_isr
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text15
  3132  00101A                     __ptext15:
  3133                           	callstack 0
  3134  00101A                     _sprintf:
  3135                           	callstack 26
  3136  00101A                     
  3137                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  3138  00101A  0E44               	movlw	low (?_sprintf+4)
  3139  00101C  6E4B               	movwf	sprintf@ap^0,c
  3140  00101E  0E00               	movlw	high (?_sprintf+4)
  3141  001020  6E4C               	movwf	(sprintf@ap+1)^0,c
  3142                           
  3143                           ;doprnt.c: 553: while((c = *f++)) {
  3144  001022  EFC7  F009         	goto	i2l2206
  3145  001026                     i2l2094:
  3146                           
  3147                           ;doprnt.c: 555: if(c != '%')
  3148  001026  0E25               	movlw	37
  3149  001028  1852               	xorwf	sprintf@c^0,w,c
  3150  00102A  B4D8               	btfsc	status,2,c
  3151  00102C  EF1A  F008         	goto	i2u131_41
  3152  001030  EF1C  F008         	goto	i2u131_40
  3153  001034                     i2u131_41:
  3154  001034  EF26  F008         	goto	i2l2100
  3155  001038                     i2u131_40:
  3156  001038                     
  3157                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  3158  001038  C040  FFD9         	movff	sprintf@sp,fsr2l
  3159  00103C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3160  001040  C052  FFDF         	movff	sprintf@c,indf2
  3161  001044  4A40               	infsnz	sprintf@sp^0,f,c
  3162  001046  2A41               	incf	(sprintf@sp+1)^0,f,c
  3163                           
  3164                           ;doprnt.c: 559: continue;
  3165  001048  EFC7  F009         	goto	i2l2206
  3166  00104C                     i2l2100:
  3167                           
  3168                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  3169  00104C  0E00               	movlw	0
  3170  00104E  6E51               	movwf	(sprintf@width+1)^0,c
  3171  001050  0E00               	movlw	0
  3172  001052  6E50               	movwf	sprintf@width^0,c
  3173                           
  3174                           ;doprnt.c: 565: flag = 0;
  3175  001054  0E00               	movlw	0
  3176  001056  6E4F               	movwf	sprintf@flag^0,c
  3177  001058  EF31  F008         	goto	i2l2106
  3178  00105C                     i2l2102:
  3179                           
  3180                           ;doprnt.c: 597: flag |= 0x04;
  3181  00105C  844F               	bsf	sprintf@flag^0,2,c
  3182                           
  3183                           ;doprnt.c: 598: f++;
  3184  00105E  4A42               	infsnz	sprintf@f^0,f,c
  3185  001060  2A43               	incf	(sprintf@f+1)^0,f,c
  3186  001062                     i2l2106:
  3187  001062  C042  FFF6         	movff	sprintf@f,tblptrl
  3188  001066  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3189  00106A                     	if	0	;tblptru may be non-zero
  3190  00106A                     	endif
  3191  00106A                     	if	0	;tblptru may be non-zero
  3192  00106A                     	endif
  3193  00106A  0008               	tblrd		*
  3194  00106C  50F5               	movf	tablat,w,c
  3195                           
  3196                           ; Switch size 1, requested type "simple"
  3197                           ; Number of cases is 1, Range of values is 48 to 48
  3198                           ; switch strategies available:
  3199                           ; Name         Instructions Cycles
  3200                           ; simple_byte            4     3 (average)
  3201                           ;	Chosen strategy is simple_byte
  3202  00106E  0A30               	xorlw	48	; case 48
  3203  001070  B4D8               	btfsc	status,2,c
  3204  001072  EF2E  F008         	goto	i2l2102
  3205  001076  EF3D  F008         	goto	i2l2108
  3206  00107A                     i2l2108:
  3207                           
  3208                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  3209  00107A  C042  FFF6         	movff	sprintf@f,tblptrl
  3210  00107E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3211  001082                     	if	0	;tblptru may be non-zero
  3212  001082                     	endif
  3213  001082                     	if	0	;tblptru may be non-zero
  3214  001082                     	endif
  3215  001082  0008               	tblrd		*
  3216  001084  50F5               	movf	tablat,w,c
  3217  001086  EC93  F011         	call	_isdigit
  3218  00108A  A0D8               	btfss	status,0,c
  3219  00108C  EF4A  F008         	goto	i2u132_41
  3220  001090  EF4C  F008         	goto	i2u132_40
  3221  001094                     i2u132_41:
  3222  001094  EF88  F008         	goto	i2l2124
  3223  001098                     i2u132_40:
  3224  001098                     
  3225                           ;doprnt.c: 615: width = 0;
  3226  001098  0E00               	movlw	0
  3227  00109A  6E51               	movwf	(sprintf@width+1)^0,c
  3228  00109C  0E00               	movlw	0
  3229  00109E  6E50               	movwf	sprintf@width^0,c
  3230  0010A0                     i2l2112:
  3231                           
  3232                           ;doprnt.c: 617: width *= 10;
  3233  0010A0  C050  F034         	movff	sprintf@width,___wmul@multiplier
  3234  0010A4  C051  F035         	movff	sprintf@width+1,___wmul@multiplier+1
  3235  0010A8  0E00               	movlw	0
  3236  0010AA  6E37               	movwf	(___wmul@multiplicand+1)^0,c
  3237  0010AC  0E0A               	movlw	10
  3238  0010AE  6E36               	movwf	___wmul@multiplicand^0,c
  3239  0010B0  ECC2  F011         	call	___wmul	;wreg free
  3240  0010B4  C034  F050         	movff	?___wmul,sprintf@width
  3241  0010B8  C035  F051         	movff	?___wmul+1,sprintf@width+1
  3242  0010BC                     
  3243                           ;doprnt.c: 618: width += *f++ - '0';
  3244  0010BC  0ED0               	movlw	208
  3245  0010BE  6E46               	movwf	??_sprintf^0,c
  3246  0010C0  0EFF               	movlw	255
  3247  0010C2  6E47               	movwf	(??_sprintf+1)^0,c
  3248  0010C4  C042  FFF6         	movff	sprintf@f,tblptrl
  3249  0010C8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3250  0010CC                     	if	0	;tblptru may be non-zero
  3251  0010CC                     	endif
  3252  0010CC                     	if	0	;tblptru may be non-zero
  3253  0010CC                     	endif
  3254  0010CC  0008               	tblrd		*
  3255  0010CE  50F5               	movf	tablat,w,c
  3256  0010D0  6E48               	movwf	(??_sprintf+2)^0,c
  3257  0010D2  6A49               	clrf	(??_sprintf+3)^0,c
  3258  0010D4  5046               	movf	??_sprintf^0,w,c
  3259  0010D6  2648               	addwf	(??_sprintf+2)^0,f,c
  3260  0010D8  5047               	movf	(??_sprintf+1)^0,w,c
  3261  0010DA  2249               	addwfc	(??_sprintf+3)^0,f,c
  3262  0010DC  5048               	movf	(??_sprintf+2)^0,w,c
  3263  0010DE  2650               	addwf	sprintf@width^0,f,c
  3264  0010E0  5049               	movf	(??_sprintf+3)^0,w,c
  3265  0010E2  2251               	addwfc	(sprintf@width+1)^0,f,c
  3266  0010E4  4A42               	infsnz	sprintf@f^0,f,c
  3267  0010E6  2A43               	incf	(sprintf@f+1)^0,f,c
  3268  0010E8                     
  3269                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  3270  0010E8  C042  FFF6         	movff	sprintf@f,tblptrl
  3271  0010EC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3272  0010F0                     	if	0	;tblptru may be non-zero
  3273  0010F0                     	endif
  3274  0010F0                     	if	0	;tblptru may be non-zero
  3275  0010F0                     	endif
  3276  0010F0  0008               	tblrd		*
  3277  0010F2  50F5               	movf	tablat,w,c
  3278  0010F4  EC93  F011         	call	_isdigit
  3279  0010F8  B0D8               	btfsc	status,0,c
  3280  0010FA  EF81  F008         	goto	i2u133_41
  3281  0010FE  EF83  F008         	goto	i2u133_40
  3282  001102                     i2u133_41:
  3283  001102  EF50  F008         	goto	i2l2112
  3284  001106                     i2u133_40:
  3285  001106  EF88  F008         	goto	i2l2124
  3286  00110A                     i2l2120:
  3287                           
  3288                           ;doprnt.c: 844: flag |= 0x40;
  3289  00110A  8C4F               	bsf	sprintf@flag^0,6,c
  3290                           
  3291                           ;doprnt.c: 845: break;
  3292  00110C  EFA4  F008         	goto	i2l331
  3293  001110                     i2l2124:
  3294  001110  C042  FFF6         	movff	sprintf@f,tblptrl
  3295  001114  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3296  001118  4A42               	infsnz	sprintf@f^0,f,c
  3297  00111A  2A43               	incf	(sprintf@f+1)^0,f,c
  3298  00111C                     	if	0	;tblptru may be non-zero
  3299  00111C                     	endif
  3300  00111C                     	if	0	;tblptru may be non-zero
  3301  00111C                     	endif
  3302  00111C  0008               	tblrd		*
  3303  00111E  CFF5 F052          	movff	tablat,sprintf@c
  3304  001122  5052               	movf	sprintf@c^0,w,c
  3305                           
  3306                           ; Switch size 1, requested type "simple"
  3307                           ; Number of cases is 4, Range of values is 0 to 117
  3308                           ; switch strategies available:
  3309                           ; Name         Instructions Cycles
  3310                           ; simple_byte           13     7 (average)
  3311                           ;	Chosen strategy is simple_byte
  3312  001124  0A00               	xorlw	0	; case 0
  3313  001126  B4D8               	btfsc	status,2,c
  3314  001128  EFD8  F009         	goto	i2l2208
  3315  00112C  0A64               	xorlw	100	; case 100
  3316  00112E  B4D8               	btfsc	status,2,c
  3317  001130  EFA4  F008         	goto	i2l331
  3318  001134  0A0D               	xorlw	13	; case 105
  3319  001136  B4D8               	btfsc	status,2,c
  3320  001138  EFA4  F008         	goto	i2l331
  3321  00113C  0A1C               	xorlw	28	; case 117
  3322  00113E  B4D8               	btfsc	status,2,c
  3323  001140  EF85  F008         	goto	i2l2120
  3324  001144  EFC7  F009         	goto	i2l2206
  3325  001148                     i2l331:
  3326                           
  3327                           ;doprnt.c: 1277: if((flag & 0x40) == 0x00)
  3328  001148  BC4F               	btfsc	sprintf@flag^0,6,c
  3329  00114A  EFA9  F008         	goto	i2u134_41
  3330  00114E  EFAB  F008         	goto	i2u134_40
  3331  001152                     i2u134_41:
  3332  001152  EFC6  F008         	goto	i2l2136
  3333  001156                     i2u134_40:
  3334  001156                     
  3335                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  3336  001156  C04B  FFD9         	movff	sprintf@ap,fsr2l
  3337  00115A  C04C  FFDA         	movff	sprintf@ap+1,fsr2h
  3338  00115E  CFDE F04D          	movff	postinc2,sprintf@val
  3339  001162  CFDD F04E          	movff	postdec2,sprintf@val+1
  3340  001166  0E02               	movlw	2
  3341  001168  264B               	addwf	sprintf@ap^0,f,c
  3342  00116A  0E00               	movlw	0
  3343  00116C  224C               	addwfc	(sprintf@ap+1)^0,f,c
  3344  00116E                     
  3345                           ;doprnt.c: 1287: if((int)val < 0) {
  3346  00116E  BE4E               	btfsc	(sprintf@val+1)^0,7,c
  3347  001170  EFBE  F008         	goto	i2u135_40
  3348  001174  EFBC  F008         	goto	i2u135_41
  3349  001178                     i2u135_41:
  3350  001178  EFD2  F008         	goto	i2l2140
  3351  00117C                     i2u135_40:
  3352  00117C                     
  3353                           ;doprnt.c: 1288: flag |= 0x03;
  3354  00117C  0E03               	movlw	3
  3355  00117E  124F               	iorwf	sprintf@flag^0,f,c
  3356  001180                     
  3357                           ;doprnt.c: 1289: val = -val;
  3358  001180  6C4D               	negf	sprintf@val^0,c
  3359  001182  1E4E               	comf	(sprintf@val+1)^0,f,c
  3360  001184  B0D8               	btfsc	status,0,c
  3361  001186  2A4E               	incf	(sprintf@val+1)^0,f,c
  3362  001188  EFD2  F008         	goto	i2l2140
  3363  00118C                     i2l2136:
  3364                           
  3365                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  3366  00118C  C04B  FFD9         	movff	sprintf@ap,fsr2l
  3367  001190  C04C  FFDA         	movff	sprintf@ap+1,fsr2h
  3368  001194  CFDE F04D          	movff	postinc2,sprintf@val
  3369  001198  CFDD F04E          	movff	postdec2,sprintf@val+1
  3370  00119C  0E02               	movlw	2
  3371  00119E  264B               	addwf	sprintf@ap^0,f,c
  3372  0011A0  0E00               	movlw	0
  3373  0011A2  224C               	addwfc	(sprintf@ap+1)^0,f,c
  3374  0011A4                     i2l2140:
  3375                           
  3376                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  3377  0011A4  0E01               	movlw	1
  3378  0011A6  6E52               	movwf	sprintf@c^0,c
  3379  0011A8                     i2l2146:
  3380                           
  3381                           ;doprnt.c: 1332: if(val < dpowers[c])
  3382  0011A8  5052               	movf	sprintf@c^0,w,c
  3383  0011AA  0D02               	mullw	2
  3384  0011AC  0E01               	movlw	low _dpowers
  3385  0011AE  24F3               	addwf	243,w,c
  3386  0011B0  6EF6               	movwf	tblptrl,c
  3387  0011B2  0E10               	movlw	high _dpowers
  3388  0011B4  20F4               	addwfc	244,w,c
  3389  0011B6  6EF7               	movwf	tblptrh,c
  3390  0011B8                     	if	0	;There are less than 3 active tblptr bytes
  3391  0011B8                     	endif
  3392  0011B8  0009               	tblrd		*+
  3393  0011BA  50F5               	movf	tablat,w,c
  3394  0011BC  5C4D               	subwf	sprintf@val^0,w,c
  3395  0011BE  0009               	tblrd		*+
  3396  0011C0  50F5               	movf	tablat,w,c
  3397  0011C2  584E               	subwfb	(sprintf@val+1)^0,w,c
  3398  0011C4  B0D8               	btfsc	status,0,c
  3399  0011C6  EFE7  F008         	goto	i2u136_41
  3400  0011CA  EFE9  F008         	goto	i2u136_40
  3401  0011CE                     i2u136_41:
  3402  0011CE  EFEB  F008         	goto	i2l2150
  3403  0011D2                     i2u136_40:
  3404  0011D2  EFF5  F008         	goto	i2l2154
  3405  0011D6                     i2l2150:
  3406  0011D6  2A52               	incf	sprintf@c^0,f,c
  3407  0011D8  0E05               	movlw	5
  3408  0011DA  1852               	xorwf	sprintf@c^0,w,c
  3409  0011DC  A4D8               	btfss	status,2,c
  3410  0011DE  EFF3  F008         	goto	i2u137_41
  3411  0011E2  EFF5  F008         	goto	i2u137_40
  3412  0011E6                     i2u137_41:
  3413  0011E6  EFD4  F008         	goto	i2l2146
  3414  0011EA                     i2u137_40:
  3415  0011EA                     i2l2154:
  3416                           
  3417                           ;doprnt.c: 1371: if(width && flag & 0x03)
  3418  0011EA  5050               	movf	sprintf@width^0,w,c
  3419  0011EC  1051               	iorwf	(sprintf@width+1)^0,w,c
  3420  0011EE  B4D8               	btfsc	status,2,c
  3421  0011F0  EFFC  F008         	goto	i2u138_41
  3422  0011F4  EFFE  F008         	goto	i2u138_40
  3423  0011F8                     i2u138_41:
  3424  0011F8  EF0C  F009         	goto	i2l2160
  3425  0011FC                     i2u138_40:
  3426  0011FC  C04F  F046         	movff	sprintf@flag,??_sprintf
  3427  001200  0E03               	movlw	3
  3428  001202  1646               	andwf	??_sprintf^0,f,c
  3429  001204  B4D8               	btfsc	status,2,c
  3430  001206  EF07  F009         	goto	i2u139_41
  3431  00120A  EF09  F009         	goto	i2u139_40
  3432  00120E                     i2u139_41:
  3433  00120E  EF0C  F009         	goto	i2l2160
  3434  001212                     i2u139_40:
  3435  001212                     
  3436                           ;doprnt.c: 1372: width--;
  3437  001212  0650               	decf	sprintf@width^0,f,c
  3438  001214  A0D8               	btfss	status,0,c
  3439  001216  0651               	decf	(sprintf@width+1)^0,f,c
  3440  001218                     i2l2160:
  3441                           
  3442                           ;doprnt.c: 1407: if(width > c)
  3443  001218  5052               	movf	sprintf@c^0,w,c
  3444  00121A  6E46               	movwf	??_sprintf^0,c
  3445  00121C  6A47               	clrf	(??_sprintf+1)^0,c
  3446  00121E  5050               	movf	sprintf@width^0,w,c
  3447  001220  5C46               	subwf	??_sprintf^0,w,c
  3448  001222  5047               	movf	(??_sprintf+1)^0,w,c
  3449  001224  0A80               	xorlw	128
  3450  001226  6E48               	movwf	(??_sprintf+2)^0,c
  3451  001228  5051               	movf	(sprintf@width+1)^0,w,c
  3452  00122A  0A80               	xorlw	128
  3453  00122C  5848               	subwfb	(??_sprintf+2)^0,w,c
  3454  00122E  B0D8               	btfsc	status,0,c
  3455  001230  EF1C  F009         	goto	i2u140_41
  3456  001234  EF1E  F009         	goto	i2u140_40
  3457  001238                     i2u140_41:
  3458  001238  EF24  F009         	goto	i2l2164
  3459  00123C                     i2u140_40:
  3460  00123C                     
  3461                           ;doprnt.c: 1408: width -= c;
  3462  00123C  5052               	movf	sprintf@c^0,w,c
  3463  00123E  5E50               	subwf	sprintf@width^0,f,c
  3464  001240  0E00               	movlw	0
  3465  001242  5A51               	subwfb	(sprintf@width+1)^0,f,c
  3466  001244  EF28  F009         	goto	i2l2166
  3467  001248                     i2l2164:
  3468                           
  3469                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  3470  001248  0E00               	movlw	0
  3471  00124A  6E51               	movwf	(sprintf@width+1)^0,c
  3472  00124C  0E00               	movlw	0
  3473  00124E  6E50               	movwf	sprintf@width^0,c
  3474  001250                     i2l2166:
  3475                           
  3476                           ;doprnt.c: 1413: if(flag & 0x04) {
  3477  001250  A44F               	btfss	sprintf@flag^0,2,c
  3478  001252  EF2D  F009         	goto	i2u141_41
  3479  001256  EF2F  F009         	goto	i2u141_40
  3480  00125A                     i2u141_41:
  3481  00125A  EF61  F009         	goto	i2l2182
  3482  00125E                     i2u141_40:
  3483  00125E                     
  3484                           ;doprnt.c: 1418: if(flag & 0x03)
  3485  00125E  C04F  F046         	movff	sprintf@flag,??_sprintf
  3486  001262  0E03               	movlw	3
  3487  001264  1646               	andwf	??_sprintf^0,f,c
  3488  001266  B4D8               	btfsc	status,2,c
  3489  001268  EF38  F009         	goto	i2u142_41
  3490  00126C  EF3A  F009         	goto	i2u142_40
  3491  001270                     i2u142_41:
  3492  001270  EF42  F009         	goto	i2l2174
  3493  001274                     i2u142_40:
  3494  001274                     
  3495                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  3496  001274  C040  FFD9         	movff	sprintf@sp,fsr2l
  3497  001278  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3498  00127C  0E2D               	movlw	45
  3499  00127E  6EDF               	movwf	indf2,c
  3500  001280  4A40               	infsnz	sprintf@sp^0,f,c
  3501  001282  2A41               	incf	(sprintf@sp+1)^0,f,c
  3502  001284                     i2l2174:
  3503                           
  3504                           ;doprnt.c: 1441: if(width)
  3505  001284  5050               	movf	sprintf@width^0,w,c
  3506  001286  1051               	iorwf	(sprintf@width+1)^0,w,c
  3507  001288  B4D8               	btfsc	status,2,c
  3508  00128A  EF49  F009         	goto	i2u143_41
  3509  00128E  EF4B  F009         	goto	i2u143_40
  3510  001292                     i2u143_41:
  3511  001292  EF91  F009         	goto	i2l2196
  3512  001296                     i2u143_40:
  3513  001296                     i2l2176:
  3514                           
  3515                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  3516  001296  C040  FFD9         	movff	sprintf@sp,fsr2l
  3517  00129A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3518  00129E  0E30               	movlw	48
  3519  0012A0  6EDF               	movwf	indf2,c
  3520  0012A2  4A40               	infsnz	sprintf@sp^0,f,c
  3521  0012A4  2A41               	incf	(sprintf@sp+1)^0,f,c
  3522  0012A6                     
  3523                           ;doprnt.c: 1444: while(--width);
  3524  0012A6  0650               	decf	sprintf@width^0,f,c
  3525  0012A8  A0D8               	btfss	status,0,c
  3526  0012AA  0651               	decf	(sprintf@width+1)^0,f,c
  3527  0012AC  5050               	movf	sprintf@width^0,w,c
  3528  0012AE  1051               	iorwf	(sprintf@width+1)^0,w,c
  3529  0012B0  A4D8               	btfss	status,2,c
  3530  0012B2  EF5D  F009         	goto	i2u144_41
  3531  0012B6  EF5F  F009         	goto	i2u144_40
  3532  0012BA                     i2u144_41:
  3533  0012BA  EF4B  F009         	goto	i2l2176
  3534  0012BE                     i2u144_40:
  3535  0012BE  EF91  F009         	goto	i2l2196
  3536  0012C2                     i2l2182:
  3537                           
  3538                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  3539  0012C2  5050               	movf	sprintf@width^0,w,c
  3540  0012C4  1051               	iorwf	(sprintf@width+1)^0,w,c
  3541  0012C6  B4D8               	btfsc	status,2,c
  3542  0012C8  EF68  F009         	goto	i2u145_41
  3543  0012CC  EF6A  F009         	goto	i2u145_40
  3544  0012D0                     i2u145_41:
  3545  0012D0  EF7E  F009         	goto	i2l2190
  3546  0012D4                     i2u145_40:
  3547  0012D4                     i2l2184:
  3548                           
  3549                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  3550  0012D4  C040  FFD9         	movff	sprintf@sp,fsr2l
  3551  0012D8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3552  0012DC  0E20               	movlw	32
  3553  0012DE  6EDF               	movwf	indf2,c
  3554  0012E0  4A40               	infsnz	sprintf@sp^0,f,c
  3555  0012E2  2A41               	incf	(sprintf@sp+1)^0,f,c
  3556  0012E4                     
  3557                           ;doprnt.c: 1457: while(--width);
  3558  0012E4  0650               	decf	sprintf@width^0,f,c
  3559  0012E6  A0D8               	btfss	status,0,c
  3560  0012E8  0651               	decf	(sprintf@width+1)^0,f,c
  3561  0012EA  5050               	movf	sprintf@width^0,w,c
  3562  0012EC  1051               	iorwf	(sprintf@width+1)^0,w,c
  3563  0012EE  A4D8               	btfss	status,2,c
  3564  0012F0  EF7C  F009         	goto	i2u146_41
  3565  0012F4  EF7E  F009         	goto	i2u146_40
  3566  0012F8                     i2u146_41:
  3567  0012F8  EF6A  F009         	goto	i2l2184
  3568  0012FC                     i2u146_40:
  3569  0012FC                     i2l2190:
  3570                           
  3571                           ;doprnt.c: 1464: if(flag & 0x03)
  3572  0012FC  C04F  F046         	movff	sprintf@flag,??_sprintf
  3573  001300  0E03               	movlw	3
  3574  001302  1646               	andwf	??_sprintf^0,f,c
  3575  001304  B4D8               	btfsc	status,2,c
  3576  001306  EF87  F009         	goto	i2u147_41
  3577  00130A  EF89  F009         	goto	i2u147_40
  3578  00130E                     i2u147_41:
  3579  00130E  EF91  F009         	goto	i2l2196
  3580  001312                     i2u147_40:
  3581  001312                     
  3582                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3583  001312  C040  FFD9         	movff	sprintf@sp,fsr2l
  3584  001316  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3585  00131A  0E2D               	movlw	45
  3586  00131C  6EDF               	movwf	indf2,c
  3587  00131E  4A40               	infsnz	sprintf@sp^0,f,c
  3588  001320  2A41               	incf	(sprintf@sp+1)^0,f,c
  3589  001322                     i2l2196:
  3590                           
  3591                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  3592  001322  C052  F04A         	movff	sprintf@c,sprintf@prec
  3593                           
  3594                           ;doprnt.c: 1500: while(prec--) {
  3595  001326  EFBE  F009         	goto	i2l2204
  3596  00132A                     i2l2198:
  3597                           
  3598                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  3599  00132A  504A               	movf	sprintf@prec^0,w,c
  3600  00132C  0D02               	mullw	2
  3601  00132E  0E01               	movlw	low _dpowers
  3602  001330  24F3               	addwf	243,w,c
  3603  001332  6EF6               	movwf	tblptrl,c
  3604  001334  0E10               	movlw	high _dpowers
  3605  001336  20F4               	addwfc	244,w,c
  3606  001338  6EF7               	movwf	tblptrh,c
  3607  00133A                     	if	0	;There are less than 3 active tblptr bytes
  3608  00133A                     	endif
  3609  00133A  0009               	tblrd		*+
  3610  00133C  CFF5 F036          	movff	tablat,___lwdiv@divisor
  3611  001340  000A               	tblrd		*-
  3612  001342  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  3613  001346  C04D  F034         	movff	sprintf@val,___lwdiv@dividend
  3614  00134A  C04E  F035         	movff	sprintf@val+1,___lwdiv@dividend+1
  3615  00134E  ECBC  F010         	call	___lwdiv	;wreg free
  3616  001352  C034  F03B         	movff	?___lwdiv,___lwmod@dividend
  3617  001356  C035  F03C         	movff	?___lwdiv+1,___lwmod@dividend+1
  3618  00135A  0E00               	movlw	0
  3619  00135C  6E3E               	movwf	(___lwmod@divisor+1)^0,c
  3620  00135E  0E0A               	movlw	10
  3621  001360  6E3D               	movwf	___lwmod@divisor^0,c
  3622  001362  EC2B  F011         	call	___lwmod	;wreg free
  3623  001366  503B               	movf	?___lwmod^0,w,c
  3624  001368  0F30               	addlw	48
  3625  00136A  6E52               	movwf	sprintf@c^0,c
  3626  00136C                     
  3627                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  3628  00136C  C040  FFD9         	movff	sprintf@sp,fsr2l
  3629  001370  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3630  001374  C052  FFDF         	movff	sprintf@c,indf2
  3631  001378  4A40               	infsnz	sprintf@sp^0,f,c
  3632  00137A  2A41               	incf	(sprintf@sp+1)^0,f,c
  3633  00137C                     i2l2204:
  3634  00137C  064A               	decf	sprintf@prec^0,f,c
  3635  00137E  284A               	incf	sprintf@prec^0,w,c
  3636  001380  A4D8               	btfss	status,2,c
  3637  001382  EFC5  F009         	goto	i2u148_41
  3638  001386  EFC7  F009         	goto	i2u148_40
  3639  00138A                     i2u148_41:
  3640  00138A  EF95  F009         	goto	i2l2198
  3641  00138E                     i2u148_40:
  3642  00138E                     i2l2206:
  3643  00138E  C042  FFF6         	movff	sprintf@f,tblptrl
  3644  001392  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3645  001396  4A42               	infsnz	sprintf@f^0,f,c
  3646  001398  2A43               	incf	(sprintf@f+1)^0,f,c
  3647  00139A                     	if	0	;tblptru may be non-zero
  3648  00139A                     	endif
  3649  00139A                     	if	0	;tblptru may be non-zero
  3650  00139A                     	endif
  3651  00139A  0008               	tblrd		*
  3652  00139C  CFF5 F052          	movff	tablat,sprintf@c
  3653  0013A0  5052               	movf	sprintf@c^0,w,c
  3654  0013A2  A4D8               	btfss	status,2,c
  3655  0013A4  EFD6  F009         	goto	i2u149_41
  3656  0013A8  EFD8  F009         	goto	i2u149_40
  3657  0013AC                     i2u149_41:
  3658  0013AC  EF13  F008         	goto	i2l2094
  3659  0013B0                     i2u149_40:
  3660  0013B0                     i2l2208:
  3661                           
  3662                           ;doprnt.c: 1564: *sp = 0;
  3663  0013B0  C040  FFD9         	movff	sprintf@sp,fsr2l
  3664  0013B4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3665  0013B8  0E00               	movlw	0
  3666  0013BA  6EDF               	movwf	indf2,c
  3667  0013BC  0012               	return		;funcret
  3668  0013BE                     __end_of_sprintf:
  3669                           	callstack 0
  3670                           
  3671 ;; *************** function _isdigit *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "D:\MPLABX\XC8\pic\sources\c90\common\isdigit.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  c               1    wreg     unsigned char 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  c               1    2[COMRAM] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        3 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_sprintf
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text16
  3701  002326                     __ptext16:
  3702                           	callstack 0
  3703  002326                     _isdigit:
  3704                           	callstack 26
  3705                           
  3706                           ;incstack = 0
  3707                           ;isdigit@c stored from wreg
  3708  002326  6E36               	movwf	isdigit@c^0,c
  3709  002328  0E00               	movlw	0
  3710  00232A  6E35               	movwf	_isdigit$1604^0,c
  3711  00232C  0E3A               	movlw	58
  3712  00232E  6036               	cpfslt	isdigit@c^0,c
  3713  002330  EF9C  F011         	goto	i2u91_41
  3714  002334  EF9E  F011         	goto	i2u91_40
  3715  002338                     i2u91_41:
  3716  002338  EFA8  F011         	goto	i2l1816
  3717  00233C                     i2u91_40:
  3718  00233C  0E2F               	movlw	47
  3719  00233E  6436               	cpfsgt	isdigit@c^0,c
  3720  002340  EFA4  F011         	goto	i2u92_41
  3721  002344  EFA6  F011         	goto	i2u92_40
  3722  002348                     i2u92_41:
  3723  002348  EFA8  F011         	goto	i2l1816
  3724  00234C                     i2u92_40:
  3725  00234C  0E01               	movlw	1
  3726  00234E  6E35               	movwf	_isdigit$1604^0,c
  3727  002350                     i2l1816:
  3728  002350  C035  F034         	movff	_isdigit$1604,??_isdigit
  3729  002354  3034               	rrcf	??_isdigit^0,w,c
  3730  002356  0012               	return		;funcret
  3731  002358                     __end_of_isdigit:
  3732                           	callstack 0
  3733                           
  3734 ;; *************** function ___wmul *****************
  3735 ;; Defined at:
  3736 ;;		line 15 in file "D:\MPLABX\XC8\pic\sources\c90\common\Umul16.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  multiplier      2    0[COMRAM] unsigned int 
  3739 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  product         2    4[COMRAM] unsigned int 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  2    0[COMRAM] unsigned int 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0, prodl, prodh
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:        6 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_sprintf
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text17
  3765  002384                     __ptext17:
  3766                           	callstack 0
  3767  002384                     ___wmul:
  3768                           	callstack 26
  3769  002384  5034               	movf	___wmul@multiplier^0,w,c
  3770  002386  0236               	mulwf	___wmul@multiplicand^0,c
  3771  002388  CFF3 F038          	movff	prodl,___wmul@product
  3772  00238C  CFF4 F039          	movff	prodh,___wmul@product+1
  3773  002390  5034               	movf	___wmul@multiplier^0,w,c
  3774  002392  0237               	mulwf	(___wmul@multiplicand+1)^0,c
  3775  002394  50F3               	movf	243,w,c
  3776  002396  2639               	addwf	(___wmul@product+1)^0,f,c
  3777  002398  5035               	movf	(___wmul@multiplier+1)^0,w,c
  3778  00239A  0236               	mulwf	___wmul@multiplicand^0,c
  3779  00239C  50F3               	movf	243,w,c
  3780  00239E  2639               	addwf	(___wmul@product+1)^0,f,c
  3781  0023A0  C038  F034         	movff	___wmul@product,?___wmul
  3782  0023A4  C039  F035         	movff	___wmul@product+1,?___wmul+1
  3783  0023A8  0012               	return		;funcret
  3784  0023AA                     __end_of___wmul:
  3785                           	callstack 0
  3786                           
  3787 ;; *************** function ___lwmod *****************
  3788 ;; Defined at:
  3789 ;;		line 7 in file "D:\MPLABX\XC8\pic\sources\c90\common\lwmod.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  dividend        2    7[COMRAM] unsigned int 
  3792 ;;  divisor         2    9[COMRAM] unsigned int 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  counter         1   11[COMRAM] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  2    7[COMRAM] unsigned int 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        5 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_sprintf
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text18
  3818  002256                     __ptext18:
  3819                           	callstack 0
  3820  002256                     ___lwmod:
  3821                           	callstack 26
  3822  002256  503D               	movf	___lwmod@divisor^0,w,c
  3823  002258  103E               	iorwf	(___lwmod@divisor+1)^0,w,c
  3824  00225A  B4D8               	btfsc	status,2,c
  3825  00225C  EF32  F011         	goto	i2u107_41
  3826  002260  EF34  F011         	goto	i2u107_40
  3827  002264                     i2u107_41:
  3828  002264  EF58  F011         	goto	i2l849
  3829  002268                     i2u107_40:
  3830  002268  0E01               	movlw	1
  3831  00226A  6E3F               	movwf	___lwmod@counter^0,c
  3832  00226C  EF3C  F011         	goto	i2l1930
  3833  002270                     i2l1928:
  3834  002270  90D8               	bcf	status,0,c
  3835  002272  363D               	rlcf	___lwmod@divisor^0,f,c
  3836  002274  363E               	rlcf	(___lwmod@divisor+1)^0,f,c
  3837  002276  2A3F               	incf	___lwmod@counter^0,f,c
  3838  002278                     i2l1930:
  3839  002278  AE3E               	btfss	(___lwmod@divisor+1)^0,7,c
  3840  00227A  EF41  F011         	goto	i2u108_41
  3841  00227E  EF43  F011         	goto	i2u108_40
  3842  002282                     i2u108_41:
  3843  002282  EF38  F011         	goto	i2l1928
  3844  002286                     i2u108_40:
  3845  002286                     i2l1932:
  3846  002286  503D               	movf	___lwmod@divisor^0,w,c
  3847  002288  5C3B               	subwf	___lwmod@dividend^0,w,c
  3848  00228A  503E               	movf	(___lwmod@divisor+1)^0,w,c
  3849  00228C  583C               	subwfb	(___lwmod@dividend+1)^0,w,c
  3850  00228E  A0D8               	btfss	status,0,c
  3851  002290  EF4C  F011         	goto	i2u109_41
  3852  002294  EF4E  F011         	goto	i2u109_40
  3853  002298                     i2u109_41:
  3854  002298  EF52  F011         	goto	i2l1936
  3855  00229C                     i2u109_40:
  3856  00229C  503D               	movf	___lwmod@divisor^0,w,c
  3857  00229E  5E3B               	subwf	___lwmod@dividend^0,f,c
  3858  0022A0  503E               	movf	(___lwmod@divisor+1)^0,w,c
  3859  0022A2  5A3C               	subwfb	(___lwmod@dividend+1)^0,f,c
  3860  0022A4                     i2l1936:
  3861  0022A4  90D8               	bcf	status,0,c
  3862  0022A6  323E               	rrcf	(___lwmod@divisor+1)^0,f,c
  3863  0022A8  323D               	rrcf	___lwmod@divisor^0,f,c
  3864  0022AA  2E3F               	decfsz	___lwmod@counter^0,f,c
  3865  0022AC  EF43  F011         	goto	i2l1932
  3866  0022B0                     i2l849:
  3867  0022B0  C03B  F03B         	movff	___lwmod@dividend,?___lwmod
  3868  0022B4  C03C  F03C         	movff	___lwmod@dividend+1,?___lwmod+1
  3869  0022B8  0012               	return		;funcret
  3870  0022BA                     __end_of___lwmod:
  3871                           	callstack 0
  3872                           
  3873 ;; *************** function ___lwdiv *****************
  3874 ;; Defined at:
  3875 ;;		line 7 in file "D:\MPLABX\XC8\pic\sources\c90\common\lwdiv.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  dividend        2    0[COMRAM] unsigned int 
  3878 ;;  divisor         2    2[COMRAM] unsigned int 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  quotient        2    4[COMRAM] unsigned int 
  3881 ;;  counter         1    6[COMRAM] unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  2    0[COMRAM] unsigned int 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;Total ram usage:        7 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_sprintf
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text19
  3905  002178                     __ptext19:
  3906                           	callstack 0
  3907  002178                     ___lwdiv:
  3908                           	callstack 26
  3909  002178  0E00               	movlw	0
  3910  00217A  6E39               	movwf	(___lwdiv@quotient+1)^0,c
  3911  00217C  0E00               	movlw	0
  3912  00217E  6E38               	movwf	___lwdiv@quotient^0,c
  3913  002180  5036               	movf	___lwdiv@divisor^0,w,c
  3914  002182  1037               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3915  002184  B4D8               	btfsc	status,2,c
  3916  002186  EFC7  F010         	goto	i2u104_41
  3917  00218A  EFC9  F010         	goto	i2u104_40
  3918  00218E                     i2u104_41:
  3919  00218E  EFF1  F010         	goto	i2l839
  3920  002192                     i2u104_40:
  3921  002192  0E01               	movlw	1
  3922  002194  6E3A               	movwf	___lwdiv@counter^0,c
  3923  002196  EFD1  F010         	goto	i2l1910
  3924  00219A                     i2l1908:
  3925  00219A  90D8               	bcf	status,0,c
  3926  00219C  3636               	rlcf	___lwdiv@divisor^0,f,c
  3927  00219E  3637               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3928  0021A0  2A3A               	incf	___lwdiv@counter^0,f,c
  3929  0021A2                     i2l1910:
  3930  0021A2  AE37               	btfss	(___lwdiv@divisor+1)^0,7,c
  3931  0021A4  EFD6  F010         	goto	i2u105_41
  3932  0021A8  EFD8  F010         	goto	i2u105_40
  3933  0021AC                     i2u105_41:
  3934  0021AC  EFCD  F010         	goto	i2l1908
  3935  0021B0                     i2u105_40:
  3936  0021B0                     i2l1912:
  3937  0021B0  90D8               	bcf	status,0,c
  3938  0021B2  3638               	rlcf	___lwdiv@quotient^0,f,c
  3939  0021B4  3639               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3940  0021B6  5036               	movf	___lwdiv@divisor^0,w,c
  3941  0021B8  5C34               	subwf	___lwdiv@dividend^0,w,c
  3942  0021BA  5037               	movf	(___lwdiv@divisor+1)^0,w,c
  3943  0021BC  5835               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3944  0021BE  A0D8               	btfss	status,0,c
  3945  0021C0  EFE4  F010         	goto	i2u106_41
  3946  0021C4  EFE6  F010         	goto	i2u106_40
  3947  0021C8                     i2u106_41:
  3948  0021C8  EFEB  F010         	goto	i2l1920
  3949  0021CC                     i2u106_40:
  3950  0021CC  5036               	movf	___lwdiv@divisor^0,w,c
  3951  0021CE  5E34               	subwf	___lwdiv@dividend^0,f,c
  3952  0021D0  5037               	movf	(___lwdiv@divisor+1)^0,w,c
  3953  0021D2  5A35               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3954  0021D4  8038               	bsf	___lwdiv@quotient^0,0,c
  3955  0021D6                     i2l1920:
  3956  0021D6  90D8               	bcf	status,0,c
  3957  0021D8  3237               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3958  0021DA  3236               	rrcf	___lwdiv@divisor^0,f,c
  3959  0021DC  2E3A               	decfsz	___lwdiv@counter^0,f,c
  3960  0021DE  EFD8  F010         	goto	i2l1912
  3961  0021E2                     i2l839:
  3962  0021E2  C038  F034         	movff	___lwdiv@quotient,?___lwdiv
  3963  0021E6  C039  F035         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3964  0021EA  0012               	return		;funcret
  3965  0021EC                     __end_of___lwdiv:
  3966                           	callstack 0
  3967                           
  3968 ;; *************** function _serial_tx_str *****************
  3969 ;; Defined at:
  3970 ;;		line 53 in file "serial.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  val             2    1[COMRAM] PTR const unsigned char 
  3973 ;;		 -> buffer_tx(20), 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  i               1    3[COMRAM] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:        3 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    1
  3992 ;; This function calls:
  3993 ;;		_serial_tx
  3994 ;; This function is called by:
  3995 ;;		_isr
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text20
  4000  0022BA                     __ptext20:
  4001                           	callstack 0
  4002  0022BA                     _serial_tx_str:
  4003                           	callstack 26
  4004  0022BA                     
  4005                           ;serial.c: 55: unsigned char i=0;
  4006  0022BA  0E00               	movlw	0
  4007  0022BC  6E37               	movwf	serial_tx_str@i^0,c
  4008                           
  4009                           ;serial.c: 57: while(val[i])
  4010  0022BE  EF6B  F011         	goto	i2l2218
  4011  0022C2                     i2l2214:
  4012                           
  4013                           ;serial.c: 58: {;serial.c: 59: serial_tx(val[i]);
  4014  0022C2  5037               	movf	serial_tx_str@i^0,w,c
  4015  0022C4  2435               	addwf	serial_tx_str@val^0,w,c
  4016  0022C6  6ED9               	movwf	fsr2l,c
  4017  0022C8  0E00               	movlw	0
  4018  0022CA  2036               	addwfc	(serial_tx_str@val+1)^0,w,c
  4019  0022CC  6EDA               	movwf	fsr2h,c
  4020  0022CE  50DF               	movf	indf2,w,c
  4021  0022D0  ECE0  F011         	call	_serial_tx
  4022  0022D4                     
  4023                           ;serial.c: 60: i++;
  4024  0022D4  2A37               	incf	serial_tx_str@i^0,f,c
  4025  0022D6                     i2l2218:
  4026  0022D6  5037               	movf	serial_tx_str@i^0,w,c
  4027  0022D8  2435               	addwf	serial_tx_str@val^0,w,c
  4028  0022DA  6ED9               	movwf	fsr2l,c
  4029  0022DC  0E00               	movlw	0
  4030  0022DE  2036               	addwfc	(serial_tx_str@val+1)^0,w,c
  4031  0022E0  6EDA               	movwf	fsr2h,c
  4032  0022E2  50DF               	movf	indf2,w,c
  4033  0022E4  A4D8               	btfss	status,2,c
  4034  0022E6  EF77  F011         	goto	i2u150_41
  4035  0022EA  EF79  F011         	goto	i2u150_40
  4036  0022EE                     i2u150_41:
  4037  0022EE  EF61  F011         	goto	i2l2214
  4038  0022F2                     i2u150_40:
  4039  0022F2  0012               	return		;funcret
  4040  0022F4                     __end_of_serial_tx_str:
  4041                           	callstack 0
  4042                           
  4043 ;; *************** function _serial_tx *****************
  4044 ;; Defined at:
  4045 ;;		line 47 in file "serial.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  val             1    wreg     unsigned char 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  val             1    0[COMRAM] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        1 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_serial_tx_str
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text21
  4073  0023C0                     __ptext21:
  4074                           	callstack 0
  4075  0023C0                     _serial_tx:
  4076                           	callstack 26
  4077                           
  4078                           ;incstack = 0
  4079                           ;serial_tx@val stored from wreg
  4080  0023C0  6E34               	movwf	serial_tx@val^0,c
  4081  0023C2                     
  4082                           ;serial.c: 49: TXREG=val;
  4083  0023C2  C034  FFAD         	movff	serial_tx@val,4013	;volatile
  4084  0023C6                     i2l240:
  4085  0023C6  A2AC               	btfss	172,1,c	;volatile
  4086  0023C8  EFE8  F011         	goto	i2u7_41
  4087  0023CC  EFEA  F011         	goto	i2u7_40
  4088  0023D0                     i2u7_41:
  4089  0023D0  EFE3  F011         	goto	i2l240
  4090  0023D4                     i2u7_40:
  4091  0023D4  0012               	return		;funcret
  4092  0023D6                     __end_of_serial_tx:
  4093                           	callstack 0
  4094                           
  4095 ;; *************** function _adc_amostra *****************
  4096 ;; Defined at:
  4097 ;;		line 44 in file "adc.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  canal           1    wreg     unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  canal           1    6[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  2    0[COMRAM] unsigned int 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;Total ram usage:        7 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_isr
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text22
  4125  0020FC                     __ptext22:
  4126                           	callstack 0
  4127  0020FC                     _adc_amostra:
  4128                           	callstack 27
  4129                           
  4130                           ;incstack = 0
  4131                           ;adc_amostra@canal stored from wreg
  4132  0020FC  6E3A               	movwf	adc_amostra@canal^0,c
  4133  0020FE                     
  4134                           ;adc.c: 49: switch(canal)
  4135  0020FE  EF8D  F010         	goto	i2l1996
  4136  002102                     i2l1988:
  4137                           
  4138                           ;adc.c: 52: ADCON0=0x01;
  4139  002102  0E01               	movlw	1
  4140  002104  6EC2               	movwf	194,c	;volatile
  4141                           
  4142                           ;adc.c: 53: break;
  4143  002106  EF9C  F010         	goto	i2l20
  4144  00210A                     i2l1990:
  4145                           
  4146                           ;adc.c: 55: ADCON0=0x05;
  4147  00210A  0E05               	movlw	5
  4148  00210C  6EC2               	movwf	194,c	;volatile
  4149                           
  4150                           ;adc.c: 56: break;
  4151  00210E  EF9C  F010         	goto	i2l20
  4152  002112                     i2l1992:
  4153                           
  4154                           ;adc.c: 58: ADCON0=0x09;
  4155  002112  0E09               	movlw	9
  4156  002114  6EC2               	movwf	194,c	;volatile
  4157                           
  4158                           ;adc.c: 59: break;
  4159  002116  EF9C  F010         	goto	i2l20
  4160  00211A                     i2l1996:
  4161  00211A  503A               	movf	adc_amostra@canal^0,w,c
  4162                           
  4163                           ; Switch size 1, requested type "simple"
  4164                           ; Number of cases is 3, Range of values is 0 to 2
  4165                           ; switch strategies available:
  4166                           ; Name         Instructions Cycles
  4167                           ; simple_byte           10     6 (average)
  4168                           ;	Chosen strategy is simple_byte
  4169  00211C  0A00               	xorlw	0	; case 0
  4170  00211E  B4D8               	btfsc	status,2,c
  4171  002120  EF81  F010         	goto	i2l1988
  4172  002124  0A01               	xorlw	1	; case 1
  4173  002126  B4D8               	btfsc	status,2,c
  4174  002128  EF85  F010         	goto	i2l1990
  4175  00212C  0A03               	xorlw	3	; case 2
  4176  00212E  B4D8               	btfsc	status,2,c
  4177  002130  EF89  F010         	goto	i2l1992
  4178  002134  EF9C  F010         	goto	i2l20
  4179  002138                     i2l20:
  4180                           
  4181                           ;adc.c: 77: ADCON0bits.GO=1;
  4182  002138  82C2               	bsf	194,1,c	;volatile
  4183  00213A                     i2l23:
  4184  00213A  B2C2               	btfsc	194,1,c	;volatile
  4185  00213C  EFA2  F010         	goto	i2u116_41
  4186  002140  EFA4  F010         	goto	i2u116_40
  4187  002144                     i2u116_41:
  4188  002144  EF9D  F010         	goto	i2l23
  4189  002148                     i2u116_40:
  4190  002148                     
  4191                           ;adc.c: 80: return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  4192  002148  CFC3 F036          	movff	4035,??_adc_amostra	;volatile
  4193  00214C  0E06               	movlw	6
  4194  00214E  6E37               	movwf	(??_adc_amostra+1)^0,c
  4195  002150                     i2u117_45:
  4196  002150  90D8               	bcf	status,0,c
  4197  002152  3236               	rrcf	??_adc_amostra^0,f,c
  4198  002154  2E37               	decfsz	(??_adc_amostra+1)^0,f,c
  4199  002156  EFA8  F010         	goto	i2u117_45
  4200  00215A  5036               	movf	??_adc_amostra^0,w,c
  4201  00215C  CFC4 F038          	movff	4036,??_adc_amostra+2	;volatile
  4202  002160  6A39               	clrf	(??_adc_amostra+3)^0,c
  4203  002162  90D8               	bcf	status,0,c
  4204  002164  3638               	rlcf	(??_adc_amostra+2)^0,f,c
  4205  002166  3639               	rlcf	(??_adc_amostra+3)^0,f,c
  4206  002168  90D8               	bcf	status,0,c
  4207  00216A  3638               	rlcf	(??_adc_amostra+2)^0,f,c
  4208  00216C  3639               	rlcf	(??_adc_amostra+3)^0,f,c
  4209  00216E  1038               	iorwf	(??_adc_amostra+2)^0,w,c
  4210  002170  6E34               	movwf	?_adc_amostra^0,c
  4211  002172  5039               	movf	(??_adc_amostra+3)^0,w,c
  4212  002174  6E35               	movwf	(?_adc_amostra+1)^0,c
  4213  002176  0012               	return		;funcret
  4214  002178                     __end_of_adc_amostra:
  4215                           	callstack 0
  4216                           
  4217 ;; *************** function _PWM1_Set_Duty *****************
  4218 ;; Defined at:
  4219 ;;		line 93 in file "pwm.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  d               1    wreg     unsigned char 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;  d               1   27[COMRAM] unsigned char 
  4224 ;;  temp            2   28[COMRAM] unsigned int 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        5 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    1
  4241 ;; This function calls:
  4242 ;;		___lldiv
  4243 ;;		___lmul
  4244 ;; This function is called by:
  4245 ;;		_isr
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text23
  4250  001F50                     __ptext23:
  4251                           	callstack 0
  4252  001F50                     _PWM1_Set_Duty:
  4253                           	callstack 26
  4254                           
  4255                           ;incstack = 0
  4256                           ;PWM1_Set_Duty@d stored from wreg
  4257  001F50  6E4F               	movwf	PWM1_Set_Duty@d^0,c
  4258  001F52                     
  4259                           ;pwm.c: 95: unsigned int temp;;pwm.c: 97: temp=(((unsigned long)(d))*((PR2<<2)|0x03))/25
      +                          5;
  4260  001F52  504F               	movf	PWM1_Set_Duty@d^0,w,c
  4261  001F54  6E34               	movwf	___lmul@multiplier^0,c
  4262  001F56  6A35               	clrf	(___lmul@multiplier+1)^0,c
  4263  001F58  6A36               	clrf	(___lmul@multiplier+2)^0,c
  4264  001F5A  6A37               	clrf	(___lmul@multiplier+3)^0,c
  4265  001F5C  50CB               	movf	203,w,c	;volatile
  4266  001F5E  6E4D               	movwf	??_PWM1_Set_Duty^0,c
  4267  001F60  6A4E               	clrf	(??_PWM1_Set_Duty+1)^0,c
  4268  001F62  90D8               	bcf	status,0,c
  4269  001F64  364D               	rlcf	??_PWM1_Set_Duty^0,f,c
  4270  001F66  364E               	rlcf	(??_PWM1_Set_Duty+1)^0,f,c
  4271  001F68  90D8               	bcf	status,0,c
  4272  001F6A  364D               	rlcf	??_PWM1_Set_Duty^0,f,c
  4273  001F6C  364E               	rlcf	(??_PWM1_Set_Duty+1)^0,f,c
  4274  001F6E  0E03               	movlw	3
  4275  001F70  124D               	iorwf	??_PWM1_Set_Duty^0,f,c
  4276  001F72  0E00               	movlw	0
  4277  001F74  124E               	iorwf	(??_PWM1_Set_Duty+1)^0,f,c
  4278  001F76  C04D  F038         	movff	??_PWM1_Set_Duty,___lmul@multiplicand
  4279  001F7A  C04E  F039         	movff	??_PWM1_Set_Duty+1,___lmul@multiplicand+1
  4280  001F7E  0E00               	movlw	0
  4281  001F80  BE39               	btfsc	(___lmul@multiplicand+1)^0,7,c
  4282  001F82  0EFF               	movlw	-1
  4283  001F84  6E3A               	movwf	(___lmul@multiplicand+2)^0,c
  4284  001F86  6E3B               	movwf	(___lmul@multiplicand+3)^0,c
  4285  001F88  ECF6  F010         	call	___lmul	;wreg free
  4286  001F8C  C034  F040         	movff	?___lmul,___lldiv@dividend
  4287  001F90  C035  F041         	movff	?___lmul+1,___lldiv@dividend+1
  4288  001F94  C036  F042         	movff	?___lmul+2,___lldiv@dividend+2
  4289  001F98  C037  F043         	movff	?___lmul+3,___lldiv@dividend+3
  4290  001F9C  0EFF               	movlw	255
  4291  001F9E  6E44               	movwf	___lldiv@divisor^0,c
  4292  001FA0  0E00               	movlw	0
  4293  001FA2  6E45               	movwf	(___lldiv@divisor+1)^0,c
  4294  001FA4  0E00               	movlw	0
  4295  001FA6  6E46               	movwf	(___lldiv@divisor+2)^0,c
  4296  001FA8  0E00               	movlw	0
  4297  001FAA  6E47               	movwf	(___lldiv@divisor+3)^0,c
  4298  001FAC  EC56  F00F         	call	___lldiv	;wreg free
  4299  001FB0  C040  F050         	movff	?___lldiv,PWM1_Set_Duty@temp
  4300  001FB4  C041  F051         	movff	?___lldiv+1,PWM1_Set_Duty@temp+1
  4301  001FB8                     
  4302                           ;pwm.c: 99: CCPR1L= (0x03FC&temp)>>2;
  4303  001FB8  C050  F04D         	movff	PWM1_Set_Duty@temp,??_PWM1_Set_Duty
  4304  001FBC  C051  F04E         	movff	PWM1_Set_Duty@temp+1,??_PWM1_Set_Duty+1
  4305  001FC0  90D8               	bcf	status,0,c
  4306  001FC2  324E               	rrcf	(??_PWM1_Set_Duty+1)^0,f,c
  4307  001FC4  324D               	rrcf	??_PWM1_Set_Duty^0,f,c
  4308  001FC6  90D8               	bcf	status,0,c
  4309  001FC8  324E               	rrcf	(??_PWM1_Set_Duty+1)^0,f,c
  4310  001FCA  324D               	rrcf	??_PWM1_Set_Duty^0,f,c
  4311  001FCC  504D               	movf	??_PWM1_Set_Duty^0,w,c
  4312  001FCE  6EBE               	movwf	190,c	;volatile
  4313  001FD0                     
  4314                           ;pwm.c: 100: CCP1CON=((0x0003&temp)<<4)|0x0F;
  4315  001FD0  C050  F04D         	movff	PWM1_Set_Duty@temp,??_PWM1_Set_Duty
  4316  001FD4  0E03               	movlw	3
  4317  001FD6  164D               	andwf	??_PWM1_Set_Duty^0,f,c
  4318  001FD8  384D               	swapf	??_PWM1_Set_Duty^0,w,c
  4319  001FDA  0BF0               	andlw	240
  4320  001FDC  090F               	iorlw	15
  4321  001FDE  6EBD               	movwf	189,c	;volatile
  4322  001FE0  0012               	return		;funcret
  4323  001FE2                     __end_of_PWM1_Set_Duty:
  4324                           	callstack 0
  4325                           
  4326 ;; *************** function ___lmul *****************
  4327 ;; Defined at:
  4328 ;;		line 15 in file "D:\MPLABX\XC8\pic\sources\c90\common\Umul32.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  multiplier      4    0[COMRAM] unsigned long 
  4331 ;;  multiplicand    4    4[COMRAM] unsigned long 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  product         4    8[COMRAM] unsigned long 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  4    0[COMRAM] unsigned long 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:       12 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_PWM1_Set_Duty
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text24
  4357  0021EC                     __ptext24:
  4358                           	callstack 0
  4359  0021EC                     ___lmul:
  4360                           	callstack 26
  4361  0021EC  0E00               	movlw	0
  4362  0021EE  6E3C               	movwf	___lmul@product^0,c
  4363  0021F0  0E00               	movlw	0
  4364  0021F2  6E3D               	movwf	(___lmul@product+1)^0,c
  4365  0021F4  0E00               	movlw	0
  4366  0021F6  6E3E               	movwf	(___lmul@product+2)^0,c
  4367  0021F8  0E00               	movlw	0
  4368  0021FA  6E3F               	movwf	(___lmul@product+3)^0,c
  4369  0021FC                     i2l1828:
  4370  0021FC  A034               	btfss	___lmul@multiplier^0,0,c
  4371  0021FE  EF03  F011         	goto	i2u93_41
  4372  002202  EF05  F011         	goto	i2u93_40
  4373  002206                     i2u93_41:
  4374  002206  EF0D  F011         	goto	i2l1832
  4375  00220A                     i2u93_40:
  4376  00220A  5038               	movf	___lmul@multiplicand^0,w,c
  4377  00220C  263C               	addwf	___lmul@product^0,f,c
  4378  00220E  5039               	movf	(___lmul@multiplicand+1)^0,w,c
  4379  002210  223D               	addwfc	(___lmul@product+1)^0,f,c
  4380  002212  503A               	movf	(___lmul@multiplicand+2)^0,w,c
  4381  002214  223E               	addwfc	(___lmul@product+2)^0,f,c
  4382  002216  503B               	movf	(___lmul@multiplicand+3)^0,w,c
  4383  002218  223F               	addwfc	(___lmul@product+3)^0,f,c
  4384  00221A                     i2l1832:
  4385  00221A  90D8               	bcf	status,0,c
  4386  00221C  3638               	rlcf	___lmul@multiplicand^0,f,c
  4387  00221E  3639               	rlcf	(___lmul@multiplicand+1)^0,f,c
  4388  002220  363A               	rlcf	(___lmul@multiplicand+2)^0,f,c
  4389  002222  363B               	rlcf	(___lmul@multiplicand+3)^0,f,c
  4390  002224  90D8               	bcf	status,0,c
  4391  002226  3237               	rrcf	(___lmul@multiplier+3)^0,f,c
  4392  002228  3236               	rrcf	(___lmul@multiplier+2)^0,f,c
  4393  00222A  3235               	rrcf	(___lmul@multiplier+1)^0,f,c
  4394  00222C  3234               	rrcf	___lmul@multiplier^0,f,c
  4395  00222E  5034               	movf	___lmul@multiplier^0,w,c
  4396  002230  1035               	iorwf	(___lmul@multiplier+1)^0,w,c
  4397  002232  1036               	iorwf	(___lmul@multiplier+2)^0,w,c
  4398  002234  1037               	iorwf	(___lmul@multiplier+3)^0,w,c
  4399  002236  A4D8               	btfss	status,2,c
  4400  002238  EF20  F011         	goto	i2u94_41
  4401  00223C  EF22  F011         	goto	i2u94_40
  4402  002240                     i2u94_41:
  4403  002240  EFFE  F010         	goto	i2l1828
  4404  002244                     i2u94_40:
  4405  002244  C03C  F034         	movff	___lmul@product,?___lmul
  4406  002248  C03D  F035         	movff	___lmul@product+1,?___lmul+1
  4407  00224C  C03E  F036         	movff	___lmul@product+2,?___lmul+2
  4408  002250  C03F  F037         	movff	___lmul@product+3,?___lmul+3
  4409  002254  0012               	return		;funcret
  4410  002256                     __end_of___lmul:
  4411                           	callstack 0
  4412                           
  4413 ;; *************** function ___lldiv *****************
  4414 ;; Defined at:
  4415 ;;		line 7 in file "D:\MPLABX\XC8\pic\sources\c90\common\__lldiv.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  dividend        4   12[COMRAM] unsigned long 
  4418 ;;  divisor         4   16[COMRAM] unsigned long 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  quotient        4   20[COMRAM] unsigned long 
  4421 ;;  counter         1   24[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  4   12[COMRAM] unsigned long 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4431 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;Total ram usage:       13 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_PWM1_Set_Duty
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text25
  4445  001EAC                     __ptext25:
  4446                           	callstack 0
  4447  001EAC                     ___lldiv:
  4448                           	callstack 26
  4449  001EAC  0E00               	movlw	0
  4450  001EAE  6E48               	movwf	___lldiv@quotient^0,c
  4451  001EB0  0E00               	movlw	0
  4452  001EB2  6E49               	movwf	(___lldiv@quotient+1)^0,c
  4453  001EB4  0E00               	movlw	0
  4454  001EB6  6E4A               	movwf	(___lldiv@quotient+2)^0,c
  4455  001EB8  0E00               	movlw	0
  4456  001EBA  6E4B               	movwf	(___lldiv@quotient+3)^0,c
  4457  001EBC  5044               	movf	___lldiv@divisor^0,w,c
  4458  001EBE  1045               	iorwf	(___lldiv@divisor+1)^0,w,c
  4459  001EC0  1046               	iorwf	(___lldiv@divisor+2)^0,w,c
  4460  001EC2  1047               	iorwf	(___lldiv@divisor+3)^0,w,c
  4461  001EC4  B4D8               	btfsc	status,2,c
  4462  001EC6  EF67  F00F         	goto	i2u95_41
  4463  001ECA  EF69  F00F         	goto	i2u95_40
  4464  001ECE                     i2u95_41:
  4465  001ECE  EF9F  F00F         	goto	i2l387
  4466  001ED2                     i2u95_40:
  4467  001ED2  0E01               	movlw	1
  4468  001ED4  6E4C               	movwf	___lldiv@counter^0,c
  4469  001ED6  EF73  F00F         	goto	i2l1844
  4470  001EDA                     i2l1842:
  4471  001EDA  90D8               	bcf	status,0,c
  4472  001EDC  3644               	rlcf	___lldiv@divisor^0,f,c
  4473  001EDE  3645               	rlcf	(___lldiv@divisor+1)^0,f,c
  4474  001EE0  3646               	rlcf	(___lldiv@divisor+2)^0,f,c
  4475  001EE2  3647               	rlcf	(___lldiv@divisor+3)^0,f,c
  4476  001EE4  2A4C               	incf	___lldiv@counter^0,f,c
  4477  001EE6                     i2l1844:
  4478  001EE6  AE47               	btfss	(___lldiv@divisor+3)^0,7,c
  4479  001EE8  EF78  F00F         	goto	i2u96_41
  4480  001EEC  EF7A  F00F         	goto	i2u96_40
  4481  001EF0                     i2u96_41:
  4482  001EF0  EF6D  F00F         	goto	i2l1842
  4483  001EF4                     i2u96_40:
  4484  001EF4                     i2l1846:
  4485  001EF4  90D8               	bcf	status,0,c
  4486  001EF6  3648               	rlcf	___lldiv@quotient^0,f,c
  4487  001EF8  3649               	rlcf	(___lldiv@quotient+1)^0,f,c
  4488  001EFA  364A               	rlcf	(___lldiv@quotient+2)^0,f,c
  4489  001EFC  364B               	rlcf	(___lldiv@quotient+3)^0,f,c
  4490  001EFE  5044               	movf	___lldiv@divisor^0,w,c
  4491  001F00  5C40               	subwf	___lldiv@dividend^0,w,c
  4492  001F02  5045               	movf	(___lldiv@divisor+1)^0,w,c
  4493  001F04  5841               	subwfb	(___lldiv@dividend+1)^0,w,c
  4494  001F06  5046               	movf	(___lldiv@divisor+2)^0,w,c
  4495  001F08  5842               	subwfb	(___lldiv@dividend+2)^0,w,c
  4496  001F0A  5047               	movf	(___lldiv@divisor+3)^0,w,c
  4497  001F0C  5843               	subwfb	(___lldiv@dividend+3)^0,w,c
  4498  001F0E  A0D8               	btfss	status,0,c
  4499  001F10  EF8C  F00F         	goto	i2u97_41
  4500  001F14  EF8E  F00F         	goto	i2u97_40
  4501  001F18                     i2u97_41:
  4502  001F18  EF97  F00F         	goto	i2l1854
  4503  001F1C                     i2u97_40:
  4504  001F1C  5044               	movf	___lldiv@divisor^0,w,c
  4505  001F1E  5E40               	subwf	___lldiv@dividend^0,f,c
  4506  001F20  5045               	movf	(___lldiv@divisor+1)^0,w,c
  4507  001F22  5A41               	subwfb	(___lldiv@dividend+1)^0,f,c
  4508  001F24  5046               	movf	(___lldiv@divisor+2)^0,w,c
  4509  001F26  5A42               	subwfb	(___lldiv@dividend+2)^0,f,c
  4510  001F28  5047               	movf	(___lldiv@divisor+3)^0,w,c
  4511  001F2A  5A43               	subwfb	(___lldiv@dividend+3)^0,f,c
  4512  001F2C  8048               	bsf	___lldiv@quotient^0,0,c
  4513  001F2E                     i2l1854:
  4514  001F2E  90D8               	bcf	status,0,c
  4515  001F30  3247               	rrcf	(___lldiv@divisor+3)^0,f,c
  4516  001F32  3246               	rrcf	(___lldiv@divisor+2)^0,f,c
  4517  001F34  3245               	rrcf	(___lldiv@divisor+1)^0,f,c
  4518  001F36  3244               	rrcf	___lldiv@divisor^0,f,c
  4519  001F38  2E4C               	decfsz	___lldiv@counter^0,f,c
  4520  001F3A  EF7A  F00F         	goto	i2l1846
  4521  001F3E                     i2l387:
  4522  001F3E  C048  F040         	movff	___lldiv@quotient,?___lldiv
  4523  001F42  C049  F041         	movff	___lldiv@quotient+1,?___lldiv+1
  4524  001F46  C04A  F042         	movff	___lldiv@quotient+2,?___lldiv+2
  4525  001F4A  C04B  F043         	movff	___lldiv@quotient+3,?___lldiv+3
  4526  001F4E  0012               	return		;funcret
  4527  001F50                     __end_of___lldiv:
  4528                           	callstack 0
  4529                           
  4530                           	psect	rparam
  4531  0000                     
  4532                           	psect	temp
  4533  00005E                     btemp:
  4534                           	callstack 0
  4535  00005E                     	ds	1
  4536  0000                     int$flags	set	btemp
  4537  0000                     wtemp8	set	btemp+1
  4538  0000                     ttemp5	set	btemp+1
  4539  0000                     ttemp6	set	btemp+4
  4540  0000                     ttemp7	set	btemp+8
  4541                           
  4542                           	psect	idloc
  4543                           
  4544                           ;Config register IDLOC0 @ 0x200000
  4545                           ;	unspecified, using default values
  4546  200000                     	org	2097152
  4547  200000  FF                 	db	255
  4548                           
  4549                           ;Config register IDLOC1 @ 0x200001
  4550                           ;	unspecified, using default values
  4551  200001                     	org	2097153
  4552  200001  FF                 	db	255
  4553                           
  4554                           ;Config register IDLOC2 @ 0x200002
  4555                           ;	unspecified, using default values
  4556  200002                     	org	2097154
  4557  200002  FF                 	db	255
  4558                           
  4559                           ;Config register IDLOC3 @ 0x200003
  4560                           ;	unspecified, using default values
  4561  200003                     	org	2097155
  4562  200003  FF                 	db	255
  4563                           
  4564                           ;Config register IDLOC4 @ 0x200004
  4565                           ;	unspecified, using default values
  4566  200004                     	org	2097156
  4567  200004  FF                 	db	255
  4568                           
  4569                           ;Config register IDLOC5 @ 0x200005
  4570                           ;	unspecified, using default values
  4571  200005                     	org	2097157
  4572  200005  FF                 	db	255
  4573                           
  4574                           ;Config register IDLOC6 @ 0x200006
  4575                           ;	unspecified, using default values
  4576  200006                     	org	2097158
  4577  200006  FF                 	db	255
  4578                           
  4579                           ;Config register IDLOC7 @ 0x200007
  4580                           ;	unspecified, using default values
  4581  200007                     	org	2097159
  4582  200007  FF                 	db	255
  4583                           
  4584                           	psect	config
  4585                           
  4586                           ; Padding undefined space
  4587  300000                     	org	3145728
  4588  300000  FF                 	db	255
  4589                           
  4590                           ;Config register CONFIG1H @ 0x300001
  4591                           ;	Oscillator Selection bits
  4592                           ;	OSC = HS, HS oscillator
  4593                           ;	Fail-Safe Clock Monitor Enable bit
  4594                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4595                           ;	Internal/External Oscillator Switchover bit
  4596                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4597  300001                     	org	3145729
  4598  300001  02                 	db	2
  4599                           
  4600                           ;Config register CONFIG2L @ 0x300002
  4601                           ;	Power-up Timer Enable bit
  4602                           ;	PWRT = OFF, PWRT disabled
  4603                           ;	Brown-out Reset Enable bits
  4604                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4605                           ;	Brown Out Reset Voltage bits
  4606                           ;	BORV = 3, Minimum setting
  4607  300002                     	org	3145730
  4608  300002  1F                 	db	31
  4609                           
  4610                           ;Config register CONFIG2H @ 0x300003
  4611                           ;	Watchdog Timer Enable bit
  4612                           ;	WDT = ON, WDT enabled
  4613                           ;	Watchdog Timer Postscale Select bits
  4614                           ;	WDTPS = 32768, 1:32768
  4615  300003                     	org	3145731
  4616  300003  1F                 	db	31
  4617                           
  4618                           ; Padding undefined space
  4619  300004                     	org	3145732
  4620  300004  FF                 	db	255
  4621                           
  4622                           ;Config register CONFIG3H @ 0x300005
  4623                           ;	CCP2 MUX bit
  4624                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  4625                           ;	PORTB A/D Enable bit
  4626                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4627                           ;	Low-Power Timer1 Oscillator Enable bit
  4628                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4629                           ;	MCLR Pin Enable bit
  4630                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4631  300005                     	org	3145733
  4632  300005  81                 	db	129
  4633                           
  4634                           ;Config register CONFIG4L @ 0x300006
  4635                           ;	Stack Full/Underflow Reset Enable bit
  4636                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4637                           ;	Single-Supply ICSP Enable bit
  4638                           ;	LVP = ON, Single-Supply ICSP enabled
  4639                           ;	Extended Instruction Set Enable bit
  4640                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4641                           ;	Background Debugger Enable bit
  4642                           ;	DEBUG = 0x1, unprogrammed default
  4643  300006                     	org	3145734
  4644  300006  85                 	db	133
  4645                           
  4646                           ; Padding undefined space
  4647  300007                     	org	3145735
  4648  300007  FF                 	db	255
  4649                           
  4650                           ;Config register CONFIG5L @ 0x300008
  4651                           ;	Code Protection bit
  4652                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  4653                           ;	Code Protection bit
  4654                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  4655                           ;	Code Protection bit
  4656                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  4657                           ;	Code Protection bit
  4658                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  4659  300008                     	org	3145736
  4660  300008  0F                 	db	15
  4661                           
  4662                           ;Config register CONFIG5H @ 0x300009
  4663                           ;	Boot Block Code Protection bit
  4664                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4665                           ;	Data EEPROM Code Protection bit
  4666                           ;	CPD = OFF, Data EEPROM not code-protected
  4667  300009                     	org	3145737
  4668  300009  C0                 	db	192
  4669                           
  4670                           ;Config register CONFIG6L @ 0x30000A
  4671                           ;	Write Protection bit
  4672                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  4673                           ;	Write Protection bit
  4674                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  4675                           ;	Write Protection bit
  4676                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  4677                           ;	Write Protection bit
  4678                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  4679  30000A                     	org	3145738
  4680  30000A  0F                 	db	15
  4681                           
  4682                           ;Config register CONFIG6H @ 0x30000B
  4683                           ;	Configuration Register Write Protection bit
  4684                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4685                           ;	Boot Block Write Protection bit
  4686                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  4687                           ;	Data EEPROM Write Protection bit
  4688                           ;	WRTD = OFF, Data EEPROM not write-protected
  4689  30000B                     	org	3145739
  4690  30000B  E0                 	db	224
  4691                           
  4692                           ;Config register CONFIG7L @ 0x30000C
  4693                           ;	Table Read Protection bit
  4694                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  4695                           ;	Table Read Protection bit
  4696                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4697                           ;	Table Read Protection bit
  4698                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  4699                           ;	Table Read Protection bit
  4700                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  4701  30000C                     	org	3145740
  4702  30000C  0F                 	db	15
  4703                           
  4704                           ;Config register CONFIG7H @ 0x30000D
  4705                           ;	Boot Block Table Read Protection bit
  4706                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4707  30000D                     	org	3145741
  4708  30000D  40                 	db	64
  4709                           tosu	equ	0xFFF
  4710                           tosh	equ	0xFFE
  4711                           tosl	equ	0xFFD
  4712                           stkptr	equ	0xFFC
  4713                           pclatu	equ	0xFFB
  4714                           pclath	equ	0xFFA
  4715                           pcl	equ	0xFF9
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           indf0	equ	0xFEF
  4723                           postinc0	equ	0xFEE
  4724                           postdec0	equ	0xFED
  4725                           preinc0	equ	0xFEC
  4726                           plusw0	equ	0xFEB
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           preinc1	equ	0xFE4
  4734                           plusw1	equ	0xFE3
  4735                           fsr1h	equ	0xFE2
  4736                           fsr1l	equ	0xFE1
  4737                           bsr	equ	0xFE0
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           preinc2	equ	0xFDC
  4742                           plusw2	equ	0xFDB
  4743                           fsr2h	equ	0xFDA
  4744                           fsr2l	equ	0xFD9
  4745                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    10
    Data        2
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     40      93
    BANK0           128     22      22
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_tx(COMRAM[20]), str(COMRAM[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    serial_rx_str_until@buff	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_rx(COMRAM[20]), 

    sp__serial_rx_str	PTR unsigned char  size(2) Largest target is 0

    serial_tx_str@val	PTR const unsigned char  size(2) Largest target is 20
		 -> buffer_tx(COMRAM[20]), 

    sp__serial_rx_str_until	PTR unsigned char  size(2) Largest target is 20
		 -> buffer_rx(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 20
		 -> str(COMRAM[5]), buffer_rx(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_sprintf
    i2_Lcd_Out->i2_Lcd_Chr_CP
    i2_Lcd_Out->i2_Lcd_Cmd
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _serial_tx_str->_serial_tx
    _PWM1_Set_Duty->___lldiv
    ___lldiv->___lmul

Critical Paths under _main in BANK0

    _main->_PWM1_Init
    _PWM1_Init->___aldiv
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3019
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                          _PWM1_Init
                         _PWM1_Start
                           _adc_init
                        _serial_init
                _serial_rx_str_until
 ---------------------------------------------------------------------------------
 (1) _serial_rx_str_until                                 10     5      5     720
                                              0 BANK0     10     5      5
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Init                                            8     6      2     904
                                             14 BANK0      8     6      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     905
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  9     9      0    4986
                                             31 COMRAM     9     9      0
                      _PWM1_Set_Duty
                        _adc_amostra
                      _serial_tx_str
                            _sprintf
                          i2_Lcd_Out
 ---------------------------------------------------------------------------------
 (4) i2_Lcd_Out                                            5     2      3     585
                                              3 COMRAM     5     2      3
                       i2_Lcd_Chr_CP
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (5) i2_Lcd_Cmd                                            3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) i2_Lcd_Chr_CP                                         3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             28    22      6    3447
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     903
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     906
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) _serial_tx_str                                        3     1      2     181
                                              1 COMRAM     3     1      2
                          _serial_tx
 ---------------------------------------------------------------------------------
 (5) _serial_tx                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _adc_amostra                                          7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _PWM1_Set_Duty                                        5     5      0     751
                                             25 COMRAM     5     5      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     314
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _PWM1_Init
     ___aldiv
   _PWM1_Start
   _adc_init
   _serial_init
   _serial_rx_str_until

 _isr (ROOT)
   _PWM1_Set_Duty
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _adc_amostra
   _serial_tx_str
     _serial_tx
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   i2_Lcd_Out
     i2_Lcd_Chr_CP
     i2_Lcd_Cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     16      16       5       17.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     28      5D       1       73.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      34        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Nov 23 13:29:00 2020

       ??_serial_rx_str_until 0085                            l15 23E2                            l60 2374  
                          l54 1DE8                            l63 2382                            l57 2364  
                          l59 2372             PWM1_Set_Duty@temp 0050           ___wmul@multiplicand 0036  
        __size_of_adc_amostra 007C                           l303 1CF2                           l208 1E74  
                         l170 2070                           l155 16BC                           l156 170E  
                         l157 1764                           l237 23BE                           l186 14FA  
                         l291 1C04                           l189 1630                           l439 1BE6  
                         _PR2 000FCB                           _isr 0008                           _str 002F  
                         wreg 000FE8                          l2310 1584                          l2320 1612  
                        l2312 158C                          l2400 1CF8                          l2322 1614  
                        l2314 158E                          l2306 1500                          l2330 13C6  
                        l2410 1D06                          l2402 1CFA                          l2324 161C  
                        l2316 1596                          l2308 1504                          l2340 14CC  
                        l2332 1446                          l2500 1FFE                          l2420 1D94  
                        l2412 1D52                          l2404 1CFC                          l2326 161E  
                        l2318 160A                          l2350 14E8                          l2342 14D4  
                        l2334 144E                          l2510 2044                          l2502 2008  
                        l2422 1D9C                          l2414 1D64                          l2406 1CFE  
                        l2430 2358                          l2440 164A                          l2344 14D6  
                        l2336 1450                          l2328 13C2                          l2512 2052  
                        l2360 1B02                          l2352 1ADA                          l2424 1DBC  
                        l2416 1D68                          l2408 1D04                          l2432 235C  
                        l2520 23B0                          l2600 1E54                          l2450 16DC  
                        l2442 16B6                          l2346 14DE                          l2338 1458  
                        l2514 2058                          l2506 2012                          l2370 1B4A  
                        l2362 1B10                          l2354 1AE0                          l2426 1DDC  
                        l2418 1D70                          l2434 2360                          l2530 23BA  
                        l2522 23B2                          l2610 1E66                          l2602 1E58  
                        l2460 16E6                          l2452 16DE                          l2348 14E0  
                        l2508 203A                          l2380 1B94                          l2372 1B52  
                        l2364 1B20                          l2356 1AEE                          l2428 1DE4  
                        l2436 2362                          l2532 23BC                          l2524 23B4  
                        l2516 23AA                          l2540 1C10                          l2612 1E6E  
                        l2604 1E5E                          l2470 1732                          l2462 16FA  
                        l2454 16E0                          l2438 1632                          l2390 1BC6  
                        l2382 1BA4                          l2374 1B5E                          l2366 1B24  
                        l2358 1AFE                          l2526 23B6                          l2518 23AC  
                        l2550 1C54                          l2542 1C1C                          l2534 1BE8  
                        l2614 1E72                          l2606 1E60                          l2480 174C  
                        l2472 1734                          l2464 1726                          l2456 16E2  
                        l2448 16D4                          l2392 1BD6                          l2384 1BA6  
                        l2376 1B6C                          l2368 1B34                          l2528 23B8  
                        l2560 1CE2                          l2552 1C62                          l2544 1C30  
                        l2536 1BF6                          l2616 1E76                          l2608 1E62  
                        l2490 175E                          l2482 1752                          l2474 1736  
                        l2466 172E                          l2458 16E4                          l2386 1BB0  
                        l2378 1B76                          l2554 1C78                          l2546 1C3E  
                        l2538 1C08                          l2618 1E90                          l2492 175E  
                        l2484 1752                          l2476 1738                          l2468 1730  
                        l2388 1BB6                          l2396 23D6                          l2556 1CA2  
                        l2548 1C50                          l2486 1758                          l2478 174C  
                        l2494 1FE6                          l2398 1CF4                          l2558 1CB8  
                        l2590 1E00                          l2488 1758                          l2496 1FEA  
                        l2592 1E3A                          l2498 1FF4                          l2594 1E48  
                        l2586 1DEA                          l2596 1E4C                          l2588 1DF2  
                        l2598 1E50                          ?_isr 0034                          STR_1 1013  
                        STR_2 100B                          u2007 1742                          u2017 1586  
                        u2027 1590                          u2037 160C                          _LATA 000F89  
                        _LATB 000F8A                          u2047 1616                          _LATC 000F8B  
                        _LATD 000F8C                          u2057 1626                          _LATE 000F8D  
                        u1610 1AEE                          u1611 1AEA                          u1620 1B10  
                        u1605 1410                          u1621 1B0C                          u1630 1B4A  
                        u1710 2372                          u1631 1B46                          u1711 236E  
                        u1640 1B6C                          u1720 2382                          u1800 1CA2  
                        u1641 1B68                          u1705 1DCC                          u1721 237E  
                        u1801 1C9E                          u1730 170E                          u1650 1B94  
                        u1810 1CB8                          u1555 150E                          u1731 170A  
                        u1651 1B90                          u1811 1CB4                          u1740 2070  
                        u1660 1BC6                          u1820 1CE2                          u1565 1528  
                        u1741 206C                          u1661 1BC2                          u1821 1CDE  
                        u1750 1BF6                          u1575 154E                          u1751 1BF2  
                        u1680 1D64                          u1760 1C04                          u1585 13D0  
                        u1681 1D60                          u1761 1C00                          u1690 1D94  
                        u1770 1C3E                          u1907 14F0                          u1595 13EA  
                        u1691 1D90                          u1675 1D26                          u1771 1C3A  
                        u1780 1C62                          u1917 1652                          u1781 1C5E  
                        u1790 1C78                          u1927 1664                          u1791 1C74  
                        u1847 1C24                          u1937 1676                          u1857 1448  
                        u1947 1688                          u1867 1452                          u1957 169A  
                        u1877 14CE                          u1967 16AC                          u1887 14D8  
                        u1977 16D6                          u1897 14E2                          u1987 16F0  
                        i2l20 2138                          u1997 1728                          i2l23 213A  
                        i2l26 2176                          i2l66 1FE0                          _TMR0 000FD6  
                        _main 1DEA                          _duty 005C                          fsr2h 000FDA  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 005E  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
             __end_of_Lcd_Cmd 1632               __end_of_Lcd_Out 2072                  ___param_bank 000000  
                  _Lcd_Chr_CP 13BE                         ??_isr 0053               __end_of___aldiv 1BE8  
                       ?_main 0034               __end_of___lldiv 1F50                         _T0CON 000FD5  
                       _T1CON 000FCD               __end_of___lwdiv 21EC               __end_of___lwmod 22BA  
                       i2l240 23C6                         i2l170 20FA                         i2l218 1AB6  
                       i2l243 23D4                         i2l331 1148                         i2l360 23A8  
                       i2l249 22F2                         i2l186 1898                         i2l371 2244  
                       i2l372 2254                         i2l357 13BC                         i2l189 19C4  
                       i2l394 1F4E                         i2l387 1F3E                         i2l846 21EA  
                       i2l839 21E2                         i2l856 22B8                         i2l849 22B0  
                       _RCREG 000FAE                         _TMR1H 000FCF                         _TMR1L 000FCE  
                       _SPBRG 000FAF                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                         _PORTD 000F83                         _PORTE 000F84  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                         _TXREG 000FAD  
         ___lmul@multiplicand 0038            __size_of_PWM1_Init 00F6                   ?_PWM1_Start 0034  
          __size_ofi2_Lcd_Cmd 012C            __size_ofi2_Lcd_Out 008A               __end_of_dpowers 100B  
                       _count 0003               __end_of_isdigit 2358                         tablat 000FF5  
                       ttemp5 005F                         ttemp6 0062                         ttemp7 0066  
                       status 000FD8                         wtemp8 005F               __end_of_sprintf 13BE  
            __end_of_Lcd_Init 1766               __initialization 22F4                  __end_of_main 1EAC  
            serial_tx_str@val 0035                        ??_main 0096                 __activetblptr 000002  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _CCPR1L 000FBE  
            __end_of_adc_init 23E4                        i2l1024 2356                        i2l2100 104C  
                      i2l2110 1098                        i2l2102 105C                        i2l2200 136C  
                      i2l2120 110A                        i2l2112 10A0                        i2l2034 1F52  
                      i2l2202 1378                        i2l2130 116E                        i2l2114 10BC  
                      i2l2106 1062                        i2l2036 1FB8                        i2l1156 23C2  
                      i2l2212 22BA                        i2l2204 137C                        i2l2132 117C  
                      i2l2140 11A4                        i2l2116 10E4                        i2l2124 1110  
                      i2l2108 107A                        i2l2220 2074                        i2l2300 1A80  
                      i2l2038 1FD0                        i2l2214 22C2                        i2l2150 11D6  
                      i2l2134 1180                        i2l2126 1156                        i2l2118 10E8  
                      i2l2206 138E                        i2l2222 2078                        i2l2302 1A8E  
                      i2l2216 22D4                        i2l2160 1218                        i2l2152 11D8  
                      i2l2128 1166                        i2l2136 118C                        i2l2208 13B0  
                      i2l2240 20E2                        i2l2224 2082                        i2l2232 20A0  
                      i2l2304 1AAA                        i2l2218 22D6                        i2l2170 1274  
                      i2l2162 123C                        i2l2154 11EA                        i2l2146 11A8  
                      i2l2138 119C                        i2l2226 208C                        i2l2234 20C6  
                      i2l2180 12A6                        i2l2172 1280                        i2l2164 1248  
                      i2l2156 11FC                        i2l2092 101A                        i2l2236 20D0  
                      i2l2228 2096                        i2l2190 12FC                        i2l2174 1284  
                      i2l2182 12C2                        i2l2166 1250                        i2l2158 1212  
                      i2l2094 1026                        i2l2238 20DE                        i2l2192 1312  
                      i2l2184 12D4                        i2l2176 1296                        i2l2168 125E  
                      i2l2096 1038                        i2l2280 19F8                        i2l1810 232C  
                      i2l2194 131E                        i2l2186 12E0                        i2l2178 12A2  
                      i2l2098 1044                        i2l2290 1A42                        i2l2282 1A00  
                      i2l1820 2384                        i2l1812 233C                        i2l2188 12E4  
                      i2l2196 1322                        i2l2292 1A48                        i2l2284 1A04  
                      i2l2276 19E8                        i2l1830 220A                        i2l1910 21A2  
                      i2l1902 2178                        i2l1822 23A0                        i2l1814 234C  
                      i2l2198 132A                        i2l2294 1A4E                        i2l2286 1A18  
                      i2l2278 19F6                        i2l1840 1ED2                        i2l1832 221A  
                      i2l1920 21D6                        i2l1912 21B0                        i2l1904 2180  
                      i2l1816 2350                        i2l1808 2328                        i2l2296 1A52  
                      i2l2288 1A20                        i2l1850 1F1C                        i2l1842 1EDA  
                      i2l1834 2224                        i2l1826 21EC                        i2l1922 21DC  
                      i2l1914 21B6                        i2l1906 2192                        i2l1930 2278  
                      i2l2298 1A6E                        i2l1852 1F2C                        i2l1844 1EE6  
                      i2l1836 1EAC                        i2l1828 21FC                        i2l1916 21CC  
                      i2l1908 219A                        i2l1932 2286                        i2l1924 2256  
                      i2l1940 1768                        i2l1854 1F2E                        i2l1846 1EF4  
                      i2l1838 1EBC                        i2l1918 21D4                        i2l1934 229C  
                      i2l1926 2268                        i2l1950 17FC                        i2l1942 176C  
                      i2l1856 1F38                        i2l1848 1EFE                        i2l1936 22A4  
                      i2l1928 2270                        i2l1960 1882                        i2l1952 186E  
                      i2l1944 17EA                        i2l1938 22AA                        i2l1962 188A  
                      i2l1954 1876                        i2l1946 17F2                        i2l1970 1926  
                      i2l1956 1878                        i2l1948 17F4                        i2l1980 19AC  
                      i2l1972 1928                        i2l1964 189C                        i2l1990 210A  
                      i2l1958 1880                        i2l1982 19B4                        i2l1974 1930  
                      i2l1966 18A0                        i2l1992 2112                        i2l1984 19B6  
                      i2l1976 19A2                        i2l1968 191E                        i2l1986 20FE  
                      i2l1978 19AA                        i2l1988 2102                        i2l1996 211A  
                      i2l1998 2148                        _INTCON 000FF2                     ??_Lcd_Cmd 0080  
                   ??_Lcd_Out 0086                        i2u7_40 23D4                        i2u7_41 23D0  
                ?_serial_init 0034             __end_of_PWM1_Init 1DEA                        ___lmul 21EC  
                 ?_Lcd_Chr_CP 0034             __end_ofi2_Lcd_Cmd 19C6                     ??___aldiv 0088  
                      ___wmul 2384             __end_ofi2_Lcd_Out 20FC           __size_of_PWM1_Start 002C  
                   ??___lldiv 0048                     ??___lwdiv 0038                     ??___lwmod 003F  
                      _infrav 0005                        clear_0 2312                        _result 0001  
        serial_rx_str_until@i 0088                  __pdataCOMRAM 005C                     ??_isdigit 0034  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_sprintf 0046                    __accesstop 0080  
     __end_of__initialization 2318                 ___rparam_used 000001                __pcstackCOMRAM 0034  
       __end_of_PWM1_Set_Duty 1FE2         __end_of_serial_tx_str 22F4                     ?_Lcd_Init 0034  
                sprintf@width 0050           __size_of_Lcd_Chr_CP 013E   __end_of_serial_rx_str_until 1CF4  
                     ?___lmul 0034                       ?___wmul 0034                 ??_adc_amostra 0036  
                     _CCP1CON 000FBD                ___lmul@product 003C                     ?_adc_init 0034  
          __size_of_serial_tx 0016                  ??_PWM1_Start 0080                       i2u91_40 233C  
                     i2u91_41 2338                       i2u92_40 234C                       i2u92_41 2348  
                     i2u93_40 220A                    ??_Lcd_Init 0083                       i2u93_41 2206  
                     i2u94_40 2244                       i2u94_41 2240                       i2u95_40 1ED2  
                     i2u95_41 1ECE                       i2u96_40 1EF4                       i2u96_41 1EF0  
                     i2u97_40 1F1C                       i2u97_41 1F18                       _Lcd_Cmd 14FC  
                     _Lcd_Out 1FE2                       __Hparam 0000                       __Lparam 0000  
                     ___aldiv 1ADA                 ?i2_Lcd_Chr_CP 0034               __size_of___lmul 006A  
                     ___lldiv 1EAC               __size_of___wmul 0026                       ___lwdiv 2178  
                     ___lwmod 2256            __end_of_PWM1_Start 2384          __size_of_serial_init 0016  
                __psmallconst 1000                       __pcinit 22F4                       __ramtop 1000  
                  ??_adc_init 0080                       __ptext0 1DEA                       __ptext1 1BE8  
                     __ptext2 23AA                       __ptext3 23D6                       __ptext4 2358  
                     __ptext5 1CF4                       __ptext6 1ADA                       __ptext7 1FE2  
                     __ptext8 13BE                       __ptext9 1632                       _dpowers 1001  
                   _T2CONbits 000FCA           __end_of_adc_amostra 2178                       _isdigit 2326  
                __size_of_isr 1AD2              ___aldiv@dividend 0080                       _sprintf 101A  
              __pintcode_body 19C6          end_of_initialization 2318                 __Lmediumconst 0000  
                     int_func 19C6             __end_of_serial_tx 23D6                 i2Lcd_Cmd@data 0036  
             ___lldiv@divisor 0044               ___lldiv@counter 004C                ??i2_Lcd_Chr_CP 0034  
                   _RCSTAbits 000FAB              ___aldiv@quotient 008A                  ??_Lcd_Chr_CP 0080  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _PWM1_Init 1CF4                     i2_Lcd_Cmd 189A                     i2_Lcd_Out 2072  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _PORTEbits 000F84  
               i2Lcd_Out@data 003B                     _TRISCbits 000F94                     _TRISDbits 000F95  
                   _TRISEbits 000F96                PWM1_Set_Duty@d 004F            __end_of_Lcd_Chr_CP 14FC  
                   _TXSTAbits 000FAC                serial_tx_str@i 0037                   _adc_amostra 20FC  
              __end_of___lmul 2256                __end_of___wmul 23AA                   _BAUDCONbits 000FB8  
               __pidataCOMRAM 23E4                    ?_PWM1_Init 008E                    ?i2_Lcd_Cmd 0034  
                  ?i2_Lcd_Out 0037           start_initialization 22F4                   __end_of_isr 1ADA  
               Lcd_Out@buffer 0084             __size_of_Lcd_Init 0134                      ??___lmul 003C  
                    ??___wmul 0038             __size_of_adc_init 000E                   __pbssCOMRAM 0001  
               __pcstackBANK0 0080                  _isdigit$1604 0035          __end_ofi2_Lcd_Chr_CP 189A  
      __size_of_PWM1_Set_Duty 0092                      ?_Lcd_Cmd 0034        __size_of_serial_tx_str 003A  
                 sprintf@flag 004F                      ?_Lcd_Out 0083                   sprintf@prec 004A  
            ___lwdiv@dividend 0034              i2Lcd_Chr_CP@data 0036                     __pintcode 0008  
                    ?___aldiv 0080                      ?___lldiv 0040                      ?___lwdiv 0034  
                    ?___lwmod 003B  __size_of_serial_rx_str_until 010C                   ??_PWM1_Init 0090  
                   _buffer_rx 0007                   ??i2_Lcd_Cmd 0034                     _buffer_tx 001B  
                 ??i2_Lcd_Out 003A                   __smallconst 1000                      ?_isdigit 0034  
            ___lwdiv@quotient 0038                      ?_sprintf 0040                    PWM1_Init@f 008E  
             ___aldiv@divisor 0084               ___aldiv@counter 0088                ___wmul@product 0038  
                    _LATDbits 000F8C                 PWM1_Init@temp 0094                      i2u110_45 1774  
                    i2u111_45 178E                      i2u104_40 2192                      i2u104_41 218E  
                    i2u112_45 17B4                      i2u105_40 21B0                      i2u105_41 21AC  
                    i2u113_45 18A8                      i2u106_40 21CC                      i2u106_41 21C8  
                    i2u114_45 18C2                      i2u210_47 19BC                      i2u107_40 2268  
                    i2u131_40 1038                      i2u107_41 2264                      i2u131_41 1034  
                    i2u115_45 18E8                      i2u211_47 17EC                      i2u116_40 2148  
                    i2u108_40 2286                      i2u140_40 123C                      i2u132_40 1098  
                    i2u116_41 2144                      i2u108_41 2282                      i2u140_41 1238  
                    i2u132_41 1094                      i2u212_47 17F6                      i2u109_40 229C  
                    i2u141_40 125E                      i2u133_40 1106                      i2u109_41 2298  
                    i2u141_41 125A                      i2u133_41 1102                      i2u117_45 2150  
                    i2u213_47 1870                      i2u150_40 22F2                      i2u142_40 1274  
                    i2u134_40 1156                      i2u150_41 22EE                      i2u142_41 1270  
                    i2u134_41 1152                      i2u214_47 187A                      i2u206_47 1920  
                    i2u143_40 1296                      i2u135_40 117C                      i2u151_40 20FA  
                    i2u143_41 1292                      i2u135_41 1178                      i2u151_41 20F6  
                    i2u215_47 1884                      i2u207_47 192A                      i2u144_40 12BE  
                    i2u136_40 11D2                      i2u152_40 19F6                      i2u144_41 12BA  
                    i2u136_41 11CE                      i2u152_41 19F2                      i2u216_47 1890  
                    i2u208_47 19A4                      i2u145_40 12D4                      i2u137_40 11EA  
                    i2u153_40 1A18                      i2u145_41 12D0                      i2u137_41 11E6  
                    i2u153_41 1A14                      i2u209_47 19AE                      i2u146_40 12FC  
                    i2u138_40 11FC                      i2u154_40 1A30                      i2u146_41 12F8  
                    i2u138_41 11F8                      i2u154_41 1A2A                      i2u154_46 1A32  
                    i2u147_40 1312                      i2u139_40 1212                      i2u147_41 130E  
                    i2u139_41 120E                      i2u148_40 138E                      i2u148_41 138A  
                    i2u149_40 13B0                      i2u149_41 13AC                      _PIR1bits 000F9E  
               ??_serial_init 0080                     _serial_tx 23C0                      Lcd_Out@x 0083  
                    Lcd_Out@y 0086                 _PWM1_Set_Duty 1F50                 _serial_tx_str 22BA  
                Lcd_Init@data 0084                    _ADCON0bits 000FC2             ___wmul@multiplier 0034  
     serial_rx_str_until@buff 0080       serial_rx_str_until@term 0084       serial_rx_str_until@size 0082  
                    _Lcd_Init 1632             ___lmul@multiplier 0034                   _INTCON2bits 000FF1  
            __size_of_Lcd_Cmd 0136              __size_of_Lcd_Out 0090                      __Hrparam 0000  
                    __Lrparam 0000                    ?_serial_tx 0034                ?_PWM1_Set_Duty 0034  
                ?_adc_amostra 0034              __size_of___aldiv 010E                ?_serial_tx_str 0035  
            __size_of___lldiv 00A4              __size_of___lwdiv 0074              __size_of___lwmod 0064  
         __end_of_serial_init 23C0                      _adc_init 23D6         __size_ofi2_Lcd_Chr_CP 0134  
                  sprintf@val 004D              __size_of_isdigit 0032                Lcd_Chr_CP@data 0082  
             ___lwdiv@divisor 0036               ___lwdiv@counter 003A                      __ptext10 14FC  
                    __ptext20 22BA                      __ptext12 2072                      __ptext21 23C0  
                    __ptext13 189A                      __ptext22 20FC                      __ptext14 1766  
                    __ptext23 1F50                      __ptext15 101A                      __ptext24 21EC  
                    __ptext16 2326                      __ptext25 1EAC                      __ptext17 2384  
                    __ptext18 2256                      __ptext19 2178              __size_of_sprintf 03A4  
                 Lcd_Cmd@data 0082                 __size_of_main 00C2                      int$flags 005E  
                i2_Lcd_Chr_CP 1766                  serial_tx@val 0034                   Lcd_Out@data 0087  
                  _INTCONbits 000FF2                      isdigit@c 0036                      intlevel2 0000  
         _serial_rx_str_until 1BE8                     sprintf@ap 004B                     sprintf@sp 0040  
            ___lwmod@dividend 003B              ___lldiv@dividend 0040               ??_PWM1_Set_Duty 004D  
                 ??_serial_tx 0034                   _serial_init 23AA                    i2Lcd_Out@x 0037  
                  i2Lcd_Out@y 003A               ??_serial_tx_str 0037          ?_serial_rx_str_until 0080  
                    sprintf@c 0052                      sprintf@f 0042              ___lldiv@quotient 0048  
             ___lwmod@divisor 003D               ___lwmod@counter 003F              adc_amostra@canal 003A  
                ___aldiv@sign 0089                    _PWM1_Start 2358               i2Lcd_Out@buffer 0038  
