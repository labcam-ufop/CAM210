

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Nov 24 18:08:31 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4520 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  0012D6                     __pidataCOMRAM:
    69                           	callstack 0
    70                           
    71                           ;initializer for _duty
    72  0012D6  000C               	dw	12
    73                           
    74                           	psect	smallconst
    75  000600                     __psmallconst:
    76                           	callstack 0
    77  000600  00                 	db	0
    78  000601                     _dpowers:
    79                           	callstack 0
    80  000601  0001               	dw	1
    81  000603  000A               	dw	10
    82  000605  0064               	dw	100
    83  000607  03E8               	dw	1000
    84  000609  2710               	dw	10000
    85  00060B                     __end_of_dpowers:
    86                           	callstack 0
    87  0000                     _LATE	set	3981
    88  0000                     _PORTE	set	3972
    89  0000                     _LATD	set	3980
    90  0000                     _PORTD	set	3971
    91  0000                     _LATC	set	3979
    92  0000                     _PORTC	set	3970
    93  0000                     _LATB	set	3978
    94  0000                     _PORTB	set	3969
    95  0000                     _LATA	set	3977
    96  0000                     _PORTA	set	3968
    97  0000                     _TRISE	set	3990
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISC	set	3988
   100  0000                     _TRISB	set	3987
   101  0000                     _TRISA	set	3986
   102  0000                     _TMR1H	set	4047
   103  0000                     _TMR1L	set	4046
   104  0000                     _T1CON	set	4045
   105  0000                     _INTCON2bits	set	4081
   106  0000                     _PORTEbits	set	3972
   107  0000                     _TRISEbits	set	3990
   108  0000                     _PIR1bits	set	3998
   109  0000                     _PR2	set	4043
   110  0000                     _T2CONbits	set	4042
   111  0000                     _CCPR1L	set	4030
   112  0000                     _PORTDbits	set	3971
   113  0000                     _PORTCbits	set	3970
   114  0000                     _TRISDbits	set	3989
   115  0000                     _TRISCbits	set	3988
   116  0000                     _CCP1CON	set	4029
   117  0000                     _ADRESL	set	4035
   118  0000                     _ADRESH	set	4036
   119  0000                     _ADCON0bits	set	4034
   120  0000                     _ADCON2	set	4032
   121  0000                     _ADCON1	set	4033
   122  0000                     _ADCON0	set	4034
   123  00060B                     STR_1:
   124  00060B  25                 	db	37
   125  00060C  30                 	db	48	;'0'
   126  00060D  35                 	db	53	;'5'
   127  00060E  75                 	db	117	;'u'
   128  00060F  00                 	db	0
   129  000610  00                 	db	0	; dummy byte at the end
   130  0000                     
   131                           ; #config settings
   132                           
   133                           	psect	cinit
   134  001256                     __pcinit:
   135                           	callstack 0
   136  001256                     start_initialization:
   137                           	callstack 0
   138  001256                     __initialization:
   139                           	callstack 0
   140                           
   141                           ; Initialize objects allocated to COMRAM (2 bytes)
   142                           ; load TBLPTR registers with __pidataCOMRAM
   143  001256  0ED6               	movlw	low __pidataCOMRAM
   144  001258  6EF6               	movwf	tblptrl,c
   145  00125A  0E12               	movlw	high __pidataCOMRAM
   146  00125C  6EF7               	movwf	tblptrh,c
   147  00125E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   148  001260  6EF8               	movwf	tblptru,c
   149  001262  0009               	tblrd		*+	;fetch initializer
   150  001264  CFF5 F029          	movff	tablat,__pdataCOMRAM
   151  001268  0009               	tblrd		*+	;fetch initializer
   152  00126A  CFF5 F02A          	movff	tablat,__pdataCOMRAM+1
   153                           
   154                           ; Clear objects allocated to COMRAM (7 bytes)
   155  00126E  EE00  F022         	lfsr	0,__pbssCOMRAM
   156  001272  0E07               	movlw	7
   157  001274                     clear_0:
   158  001274  6AEE               	clrf	postinc0,c
   159  001276  06E8               	decf	wreg,f,c
   160  001278  E1FD               	bnz	clear_0
   161  00127A                     end_of_initialization:
   162                           	callstack 0
   163  00127A                     __end_of__initialization:
   164                           	callstack 0
   165  00127A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   166  00127C  6EF8               	movwf	tblptru,c
   167  00127E  0100               	movlb	0
   168  001280  EF2C  F007         	goto	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMRAM
   171  000022                     __pbssCOMRAM:
   172                           	callstack 0
   173  000022                     _count:
   174                           	callstack 0
   175  000022                     	ds	2
   176  000024                     _str:
   177                           	callstack 0
   178  000024                     	ds	5
   179                           
   180                           	psect	dataCOMRAM
   181  000029                     __pdataCOMRAM:
   182                           	callstack 0
   183  000029                     _duty:
   184                           	callstack 0
   185  000029                     	ds	2
   186                           
   187                           	psect	cstackCOMRAM
   188  000001                     __pcstackCOMRAM:
   189                           	callstack 0
   190  000001                     ??_Lcd_Cmd:
   191  000001                     ??_Lcd_Chr_CP:
   192  000001                     ??_isdigit:
   193  000001                     ?___wmul:
   194                           	callstack 0
   195  000001                     ?___lwdiv:
   196                           	callstack 0
   197  000001                     ?___lmul:
   198                           	callstack 0
   199  000001                     ?___aldiv:
   200                           	callstack 0
   201  000001                     ___wmul@multiplier:
   202                           	callstack 0
   203  000001                     ___lwdiv@dividend:
   204                           	callstack 0
   205  000001                     ___lmul@multiplier:
   206                           	callstack 0
   207  000001                     ___aldiv@dividend:
   208                           	callstack 0
   209                           
   210                           ; 4 bytes @ 0x0
   211  000001                     	ds	1
   212  000002                     _isdigit$1229:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x1
   216  000002                     	ds	1
   217  000003                     Lcd_Chr_CP@data:
   218                           	callstack 0
   219  000003                     Lcd_Cmd@data:
   220                           	callstack 0
   221  000003                     isdigit@c:
   222                           	callstack 0
   223  000003                     ___wmul@multiplicand:
   224                           	callstack 0
   225  000003                     ___lwdiv@divisor:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x2
   229  000003                     	ds	1
   230  000004                     ??_Lcd_Init:
   231  000004                     Lcd_Out@x:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x3
   235  000004                     	ds	1
   236  000005                     Lcd_Init@data:
   237                           	callstack 0
   238  000005                     Lcd_Out@buffer:
   239                           	callstack 0
   240  000005                     ___wmul@product:
   241                           	callstack 0
   242  000005                     ___lwdiv@quotient:
   243                           	callstack 0
   244  000005                     ___lmul@multiplicand:
   245                           	callstack 0
   246  000005                     ___aldiv@divisor:
   247                           	callstack 0
   248                           
   249                           ; 4 bytes @ 0x4
   250  000005                     	ds	2
   251  000007                     Lcd_Out@y:
   252                           	callstack 0
   253  000007                     ___lwdiv@counter:
   254                           	callstack 0
   255                           
   256                           ; 1 bytes @ 0x6
   257  000007                     	ds	1
   258  000008                     ?___lwmod:
   259                           	callstack 0
   260  000008                     Lcd_Out@data:
   261                           	callstack 0
   262  000008                     ___lwmod@dividend:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x7
   266  000008                     	ds	1
   267  000009                     ___aldiv@counter:
   268                           	callstack 0
   269  000009                     ___lmul@product:
   270                           	callstack 0
   271                           
   272                           ; 4 bytes @ 0x8
   273  000009                     	ds	1
   274  00000A                     ___aldiv@sign:
   275                           	callstack 0
   276  00000A                     ___lwmod@divisor:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  00000A                     	ds	1
   281  00000B                     ___aldiv@quotient:
   282                           	callstack 0
   283                           
   284                           ; 4 bytes @ 0xA
   285  00000B                     	ds	1
   286  00000C                     ___lwmod@counter:
   287                           	callstack 0
   288                           
   289                           ; 1 bytes @ 0xB
   290  00000C                     	ds	1
   291  00000D                     ?_sprintf:
   292                           	callstack 0
   293  00000D                     ?___lldiv:
   294                           	callstack 0
   295  00000D                     sprintf@sp:
   296                           	callstack 0
   297  00000D                     ___lldiv@dividend:
   298                           	callstack 0
   299                           
   300                           ; 4 bytes @ 0xC
   301  00000D                     	ds	2
   302  00000F                     PWM1_Init@f:
   303                           	callstack 0
   304  00000F                     sprintf@f:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xE
   308  00000F                     	ds	2
   309  000011                     ??_PWM1_Init:
   310  000011                     ___lldiv@divisor:
   311                           	callstack 0
   312                           
   313                           ; 4 bytes @ 0x10
   314  000011                     	ds	2
   315  000013                     ??_sprintf:
   316                           
   317                           ; 1 bytes @ 0x12
   318  000013                     	ds	2
   319  000015                     PWM1_Init@temp:
   320                           	callstack 0
   321  000015                     ___lldiv@quotient:
   322                           	callstack 0
   323                           
   324                           ; 4 bytes @ 0x14
   325  000015                     	ds	2
   326  000017                     sprintf@ap:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x16
   330  000017                     	ds	2
   331  000019                     sprintf@flag:
   332                           	callstack 0
   333  000019                     ___lldiv@counter:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x18
   337  000019                     	ds	1
   338  00001A                     ??_PWM1_Set_Duty:
   339  00001A                     sprintf@val:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x19
   343  00001A                     	ds	2
   344  00001C                     PWM1_Set_Duty@d:
   345                           	callstack 0
   346  00001C                     sprintf@prec:
   347                           	callstack 0
   348                           
   349                           ; 1 bytes @ 0x1B
   350  00001C                     	ds	1
   351  00001D                     PWM1_Set_Duty@temp:
   352                           	callstack 0
   353  00001D                     sprintf@width:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x1C
   357  00001D                     	ds	2
   358  00001F                     sprintf@c:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0x1E
   362  00001F                     	ds	1
   363  000020                     ??_main:
   364                           
   365                           ; 1 bytes @ 0x1F
   366  000020                     	ds	2
   367                           
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 32 in file "mainPWM.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   382 ;; Tracked objects:
   383 ;;		On entry : 0/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   387 ;;      Params:         0       0       0       0       0       0       0
   388 ;;      Locals:         0       0       0       0       0       0       0
   389 ;;      Temps:          2       0       0       0       0       0       0
   390 ;;      Totals:         2       0       0       0       0       0       0
   391 ;;Total ram usage:        2 bytes
   392 ;; Hardware stack levels required when called: 2
   393 ;; This function calls:
   394 ;;		_Lcd_Cmd
   395 ;;		_Lcd_Init
   396 ;;		_Lcd_Out
   397 ;;		_PWM1_Init
   398 ;;		_PWM1_Set_Duty
   399 ;;		_PWM1_Start
   400 ;;		_sprintf
   401 ;; This function is called by:
   402 ;;		Startup code after reset
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           	psect	text0
   407  000E58                     __ptext0:
   408                           	callstack 0
   409  000E58                     _main:
   410                           	callstack 29
   411  000E58                     
   412                           ;mainPWM.c: 34: ADCON0 = 0b00000000;
   413  000E58  0E00               	movlw	0
   414  000E5A  6EC2               	movwf	194,c	;volatile
   415                           
   416                           ;mainPWM.c: 35: ADCON1 = 0x06;
   417  000E5C  0E06               	movlw	6
   418  000E5E  6EC1               	movwf	193,c	;volatile
   419  000E60                     
   420                           ;mainPWM.c: 38: INTCON2bits.RBPU = 1;
   421  000E60  8EF1               	bsf	241,7,c	;volatile
   422                           
   423                           ;mainPWM.c: 39: T1CON = 0b10000011;
   424  000E62  0E83               	movlw	131
   425  000E64  6ECD               	movwf	205,c	;volatile
   426                           
   427                           ;mainPWM.c: 42: TMR1L = 0;
   428  000E66  0E00               	movlw	0
   429  000E68  6ECE               	movwf	206,c	;volatile
   430                           
   431                           ;mainPWM.c: 43: TMR1H = 0;
   432  000E6A  0E00               	movlw	0
   433  000E6C  6ECF               	movwf	207,c	;volatile
   434  000E6E                     
   435                           ;mainPWM.c: 46: TRISA = 0xFF;
   436  000E6E  6892               	setf	146,c	;volatile
   437                           
   438                           ;mainPWM.c: 47: TRISB = 0b00000000;
   439  000E70  0E00               	movlw	0
   440  000E72  6E93               	movwf	147,c	;volatile
   441                           
   442                           ;mainPWM.c: 48: TRISC = 0b00000001;
   443  000E74  0E01               	movlw	1
   444  000E76  6E94               	movwf	148,c	;volatile
   445                           
   446                           ;mainPWM.c: 49: TRISD = 0b00001111;
   447  000E78  0E0F               	movlw	15
   448  000E7A  6E95               	movwf	149,c	;volatile
   449                           
   450                           ;mainPWM.c: 50: TRISE = 0b00000000;
   451  000E7C  0E00               	movlw	0
   452  000E7E  6E96               	movwf	150,c	;volatile
   453                           
   454                           ;mainPWM.c: 52: PORTA = 0;
   455  000E80  0E00               	movlw	0
   456  000E82  6E80               	movwf	128,c	;volatile
   457                           
   458                           ;mainPWM.c: 53: LATA = 0;
   459  000E84  0E00               	movlw	0
   460  000E86  6E89               	movwf	137,c	;volatile
   461                           
   462                           ;mainPWM.c: 54: PORTB = 0;
   463  000E88  0E00               	movlw	0
   464  000E8A  6E81               	movwf	129,c	;volatile
   465                           
   466                           ;mainPWM.c: 55: LATB = 0;
   467  000E8C  0E00               	movlw	0
   468  000E8E  6E8A               	movwf	138,c	;volatile
   469                           
   470                           ;mainPWM.c: 56: PORTC = 0;
   471  000E90  0E00               	movlw	0
   472  000E92  6E82               	movwf	130,c	;volatile
   473                           
   474                           ;mainPWM.c: 57: LATC = 0;
   475  000E94  0E00               	movlw	0
   476  000E96  6E8B               	movwf	139,c	;volatile
   477                           
   478                           ;mainPWM.c: 58: PORTD = 0;
   479  000E98  0E00               	movlw	0
   480  000E9A  6E83               	movwf	131,c	;volatile
   481                           
   482                           ;mainPWM.c: 59: LATD = 0;
   483  000E9C  0E00               	movlw	0
   484  000E9E  6E8C               	movwf	140,c	;volatile
   485                           
   486                           ;mainPWM.c: 60: PORTE = 0;
   487  000EA0  0E00               	movlw	0
   488  000EA2  6E84               	movwf	132,c	;volatile
   489                           
   490                           ;mainPWM.c: 61: LATE = 0;
   491  000EA4  0E00               	movlw	0
   492  000EA6  6E8D               	movwf	141,c	;volatile
   493  000EA8                     
   494                           ;mainPWM.c: 64: Lcd_Init();
   495  000EA8  ECA5  F005         	call	_Lcd_Init	;wreg free
   496  000EAC                     
   497                           ;mainPWM.c: 65: Lcd_Cmd(12);
   498  000EAC  0E0C               	movlw	12
   499  000EAE  EC0F  F005         	call	_Lcd_Cmd
   500  000EB2                     
   501                           ;mainPWM.c: 66: PWM1_Init(1000);
   502  000EB2  0E03               	movlw	3
   503  000EB4  6E10               	movwf	(PWM1_Init@f+1)^0,c
   504  000EB6  0EE8               	movlw	232
   505  000EB8  6E0F               	movwf	PWM1_Init@f^0,c
   506  000EBA  ECB3  F006         	call	_PWM1_Init	;wreg free
   507  000EBE                     
   508                           ;mainPWM.c: 67: PWM1_Start();
   509  000EBE  EC42  F009         	call	_PWM1_Start	;wreg free
   510  000EC2                     l180:
   511  000EC2  0004               	clrwdt		;# 
   512  000EC4                     
   513                           ;mainPWM.c: 75: PWM1_Set_Duty(duty);
   514  000EC4  0E0C               	movlw	12
   515  000EC6  ECE3  F007         	call	_PWM1_Set_Duty
   516  000ECA                     
   517                           ;mainPWM.c: 76: count = TMR1L;
   518  000ECA  CFCE F022          	movff	4046,_count	;volatile
   519  000ECE  6A23               	clrf	(_count+1)^0,c
   520  000ED0                     
   521                           ;mainPWM.c: 77: count += TMR1H<<8;
   522  000ED0  50CF               	movf	207,w,c	;volatile
   523  000ED2  2623               	addwf	(_count+1)^0,f,c
   524  000ED4                     
   525                           ;mainPWM.c: 78: sprintf(str, "%05u", count);
   526  000ED4  0E24               	movlw	low _str
   527  000ED6  6E0D               	movwf	sprintf@sp^0,c
   528  000ED8  0E00               	movlw	high _str
   529  000EDA  6E0E               	movwf	(sprintf@sp+1)^0,c
   530  000EDC  0E0B               	movlw	low STR_1
   531  000EDE  6E0F               	movwf	sprintf@f^0,c
   532  000EE0  0E06               	movlw	high STR_1
   533  000EE2  6E10               	movwf	(sprintf@f+1)^0,c
   534  000EE4  C022  F011         	movff	_count,?_sprintf+4
   535  000EE8  C023  F012         	movff	_count+1,?_sprintf+5
   536  000EEC  EC09  F003         	call	_sprintf	;wreg free
   537  000EF0                     
   538                           ;mainPWM.c: 79: Lcd_Out(1, 0, str);
   539  000EF0  0E00               	movlw	0
   540  000EF2  6E04               	movwf	Lcd_Out@x^0,c
   541  000EF4  0E24               	movlw	low _str
   542  000EF6  6E05               	movwf	Lcd_Out@buffer^0,c
   543  000EF8  0E00               	movlw	high _str
   544  000EFA  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   545  000EFC  0E01               	movlw	1
   546  000EFE  EC2C  F008         	call	_Lcd_Out
   547  000F02                     
   548                           ;mainPWM.c: 80: _delaywdt((unsigned long)((1000)*(8000000/4000.0)));
   549  000F02  0E08               	movlw	8
   550  000F04  6E21               	movwf	(??_main+1)^0,c
   551  000F06  0E9E               	movlw	158
   552  000F08  6E20               	movwf	??_main^0,c
   553  000F0A  0E4C               	movlw	76
   554  000F0C                     u867:
   555  000F0C  0004               	clrwdt	
   556  000F0E  2EE8               	decfsz	wreg,f,c
   557  000F10  D7FD               	bra	u867
   558  000F12  2E20               	decfsz	??_main^0,f,c
   559  000F14  D7FB               	bra	u867
   560  000F16  2E21               	decfsz	(??_main+1)^0,f,c
   561  000F18  D7F9               	bra	u867
   562  000F1A  EF61  F007         	goto	l180
   563  000F1E  EF00  F000         	goto	start
   564  000F22                     __end_of_main:
   565                           	callstack 0
   566                           
   567 ;; *************** function _sprintf *****************
   568 ;; Defined at:
   569 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  sp              2   12[COMRAM] PTR unsigned char 
   572 ;;		 -> str(5), 
   573 ;;  f               2   14[COMRAM] PTR const unsigned char 
   574 ;;		 -> STR_1(5), 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  tmpval          4    0        struct .
   577 ;;  cp              3    0        PTR const unsigned char 
   578 ;;  width           2   28[COMRAM] int 
   579 ;;  val             2   25[COMRAM] unsigned int 
   580 ;;  ap              2   22[COMRAM] PTR void [1]
   581 ;;		 -> ?_sprintf(2), 
   582 ;;  len             2    0        unsigned int 
   583 ;;  c               1   30[COMRAM] unsigned char 
   584 ;;  prec            1   27[COMRAM] char 
   585 ;;  flag            1   24[COMRAM] unsigned char 
   586 ;; Return value:  Size  Location     Type
   587 ;;                  2   12[COMRAM] int 
   588 ;; Registers used:
   589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : 0/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   595 ;;      Params:         6       0       0       0       0       0       0
   596 ;;      Locals:         9       0       0       0       0       0       0
   597 ;;      Temps:          4       0       0       0       0       0       0
   598 ;;      Totals:        19       0       0       0       0       0       0
   599 ;;Total ram usage:       19 bytes
   600 ;; Hardware stack levels used: 1
   601 ;; Hardware stack levels required when called: 1
   602 ;; This function calls:
   603 ;;		___lwdiv
   604 ;;		___lwmod
   605 ;;		___wmul
   606 ;;		_isdigit
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text1
   613  000612                     __ptext1:
   614                           	callstack 0
   615  000612                     _sprintf:
   616                           	callstack 29
   617  000612                     
   618                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
   619  000612  0E11               	movlw	low (?_sprintf+4)
   620  000614  6E17               	movwf	sprintf@ap^0,c
   621  000616  0E00               	movlw	high (?_sprintf+4)
   622  000618  6E18               	movwf	(sprintf@ap+1)^0,c
   623                           
   624                           ;doprnt.c: 553: while((c = *f++)) {
   625  00061A  EF5D  F004         	goto	l1712
   626  00061E                     l1630:
   627                           
   628                           ;doprnt.c: 555: if(c != '%')
   629  00061E  0E25               	movlw	37
   630  000620  181F               	xorwf	sprintf@c^0,w,c
   631  000622  B4D8               	btfsc	status,2,c
   632  000624  EF16  F003         	goto	u731
   633  000628  EF18  F003         	goto	u730
   634  00062C                     u731:
   635  00062C  EF22  F003         	goto	l1636
   636  000630                     u730:
   637  000630                     
   638                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   639  000630  C00D  FFD9         	movff	sprintf@sp,fsr2l
   640  000634  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   641  000638  C01F  FFDF         	movff	sprintf@c,indf2
   642  00063C  4A0D               	infsnz	sprintf@sp^0,f,c
   643  00063E  2A0E               	incf	(sprintf@sp+1)^0,f,c
   644                           
   645                           ;doprnt.c: 559: continue;
   646  000640  EF5D  F004         	goto	l1712
   647  000644                     l1636:
   648                           
   649                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
   650  000644  0E00               	movlw	0
   651  000646  6E1E               	movwf	(sprintf@width+1)^0,c
   652  000648  0E00               	movlw	0
   653  00064A  6E1D               	movwf	sprintf@width^0,c
   654                           
   655                           ;doprnt.c: 565: flag = 0;
   656  00064C  0E00               	movlw	0
   657  00064E  6E19               	movwf	sprintf@flag^0,c
   658  000650  EF2D  F003         	goto	l1642
   659  000654                     l1638:
   660                           
   661                           ;doprnt.c: 597: flag |= 0x04;
   662  000654  8419               	bsf	sprintf@flag^0,2,c
   663                           
   664                           ;doprnt.c: 598: f++;
   665  000656  4A0F               	infsnz	sprintf@f^0,f,c
   666  000658  2A10               	incf	(sprintf@f+1)^0,f,c
   667  00065A                     l1642:
   668  00065A  C00F  FFF6         	movff	sprintf@f,tblptrl
   669  00065E  C010  FFF7         	movff	sprintf@f+1,tblptrh
   670  000662                     	if	0	;tblptru may be non-zero
   671  000662                     	endif
   672  000662                     	if	0	;tblptru may be non-zero
   673  000662                     	endif
   674  000662  0008               	tblrd		*
   675  000664  50F5               	movf	tablat,w,c
   676                           
   677                           ; Switch size 1, requested type "simple"
   678                           ; Number of cases is 1, Range of values is 48 to 48
   679                           ; switch strategies available:
   680                           ; Name         Instructions Cycles
   681                           ; simple_byte            4     3 (average)
   682                           ;	Chosen strategy is simple_byte
   683  000666  0A30               	xorlw	48	; case 48
   684  000668  B4D8               	btfsc	status,2,c
   685  00066A  EF2A  F003         	goto	l1638
   686  00066E  EF39  F003         	goto	l1644
   687  000672                     l1644:
   688                           
   689                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
   690  000672  C00F  FFF6         	movff	sprintf@f,tblptrl
   691  000676  C010  FFF7         	movff	sprintf@f+1,tblptrh
   692  00067A                     	if	0	;tblptru may be non-zero
   693  00067A                     	endif
   694  00067A                     	if	0	;tblptru may be non-zero
   695  00067A                     	endif
   696  00067A  0008               	tblrd		*
   697  00067C  50F5               	movf	tablat,w,c
   698  00067E  EC12  F009         	call	_isdigit
   699  000682  A0D8               	btfss	status,0,c
   700  000684  EF46  F003         	goto	u741
   701  000688  EF48  F003         	goto	u740
   702  00068C                     u741:
   703  00068C  EF85  F003         	goto	l1660
   704  000690                     u740:
   705  000690                     
   706                           ;doprnt.c: 615: width = 0;
   707  000690  0E00               	movlw	0
   708  000692  6E1E               	movwf	(sprintf@width+1)^0,c
   709  000694  0E00               	movlw	0
   710  000696  6E1D               	movwf	sprintf@width^0,c
   711  000698                     l1648:
   712                           
   713                           ;doprnt.c: 617: width *= 10;
   714  000698  C01D  F001         	movff	sprintf@width,___wmul@multiplier
   715  00069C  C01E  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   716  0006A0  0E00               	movlw	0
   717  0006A2  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   718  0006A4  0E0A               	movlw	10
   719  0006A6  6E03               	movwf	___wmul@multiplicand^0,c
   720  0006A8  EC58  F009         	call	___wmul	;wreg free
   721  0006AC  C001  F01D         	movff	?___wmul,sprintf@width
   722  0006B0  C002  F01E         	movff	?___wmul+1,sprintf@width+1
   723  0006B4                     
   724                           ;doprnt.c: 618: width += *f++ - '0';
   725  0006B4  0ED0               	movlw	208
   726  0006B6  6E13               	movwf	??_sprintf^0,c
   727  0006B8  0EFF               	movlw	255
   728  0006BA  6E14               	movwf	(??_sprintf+1)^0,c
   729  0006BC  C00F  FFF6         	movff	sprintf@f,tblptrl
   730  0006C0  C010  FFF7         	movff	sprintf@f+1,tblptrh
   731  0006C4                     	if	0	;tblptru may be non-zero
   732  0006C4                     	endif
   733  0006C4                     	if	0	;tblptru may be non-zero
   734  0006C4                     	endif
   735  0006C4  0008               	tblrd		*
   736  0006C6  50F5               	movf	tablat,w,c
   737  0006C8  6E15               	movwf	(??_sprintf+2)^0,c
   738  0006CA  6A16               	clrf	(??_sprintf+3)^0,c
   739  0006CC  5013               	movf	??_sprintf^0,w,c
   740  0006CE  2615               	addwf	(??_sprintf+2)^0,f,c
   741  0006D0  5014               	movf	(??_sprintf+1)^0,w,c
   742  0006D2  2216               	addwfc	(??_sprintf+3)^0,f,c
   743  0006D4  5015               	movf	(??_sprintf+2)^0,w,c
   744  0006D6  261D               	addwf	sprintf@width^0,f,c
   745  0006D8  5016               	movf	(??_sprintf+3)^0,w,c
   746  0006DA  221E               	addwfc	(sprintf@width+1)^0,f,c
   747  0006DC  4A0F               	infsnz	sprintf@f^0,f,c
   748  0006DE  2A10               	incf	(sprintf@f+1)^0,f,c
   749  0006E0                     
   750                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
   751  0006E0  C00F  FFF6         	movff	sprintf@f,tblptrl
   752  0006E4  C010  FFF7         	movff	sprintf@f+1,tblptrh
   753  0006E8                     	if	0	;tblptru may be non-zero
   754  0006E8                     	endif
   755  0006E8                     	if	0	;tblptru may be non-zero
   756  0006E8                     	endif
   757  0006E8  0008               	tblrd		*
   758  0006EA  50F5               	movf	tablat,w,c
   759  0006EC  EC12  F009         	call	_isdigit
   760  0006F0  B0D8               	btfsc	status,0,c
   761  0006F2  EF7D  F003         	goto	u751
   762  0006F6  EF7F  F003         	goto	u750
   763  0006FA                     u751:
   764  0006FA  EF4C  F003         	goto	l1648
   765  0006FE                     u750:
   766  0006FE  EF85  F003         	goto	l1660
   767  000702                     l1656:
   768                           
   769                           ;doprnt.c: 844: flag |= 0xC0;
   770  000702  0EC0               	movlw	192
   771  000704  1219               	iorwf	sprintf@flag^0,f,c
   772                           
   773                           ;doprnt.c: 845: break;
   774  000706  EF99  F003         	goto	l1662
   775  00070A                     l1660:
   776  00070A  C00F  FFF6         	movff	sprintf@f,tblptrl
   777  00070E  C010  FFF7         	movff	sprintf@f+1,tblptrh
   778  000712  4A0F               	infsnz	sprintf@f^0,f,c
   779  000714  2A10               	incf	(sprintf@f+1)^0,f,c
   780  000716                     	if	0	;tblptru may be non-zero
   781  000716                     	endif
   782  000716                     	if	0	;tblptru may be non-zero
   783  000716                     	endif
   784  000716  0008               	tblrd		*
   785  000718  CFF5 F01F          	movff	tablat,sprintf@c
   786  00071C  501F               	movf	sprintf@c^0,w,c
   787                           
   788                           ; Switch size 1, requested type "simple"
   789                           ; Number of cases is 2, Range of values is 0 to 117
   790                           ; switch strategies available:
   791                           ; Name         Instructions Cycles
   792                           ; simple_byte            7     4 (average)
   793                           ;	Chosen strategy is simple_byte
   794  00071E  0A00               	xorlw	0	; case 0
   795  000720  B4D8               	btfsc	status,2,c
   796  000722  EF6E  F004         	goto	l1714
   797  000726  0A75               	xorlw	117	; case 117
   798  000728  B4D8               	btfsc	status,2,c
   799  00072A  EF81  F003         	goto	l1656
   800  00072E  EF5D  F004         	goto	l1712
   801  000732                     l1662:
   802                           
   803                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
   804  000732  C017  FFD9         	movff	sprintf@ap,fsr2l
   805  000736  C018  FFDA         	movff	sprintf@ap+1,fsr2h
   806  00073A  CFDE F01A          	movff	postinc2,sprintf@val
   807  00073E  CFDD F01B          	movff	postdec2,sprintf@val+1
   808  000742  0E02               	movlw	2
   809  000744  2617               	addwf	sprintf@ap^0,f,c
   810  000746  0E00               	movlw	0
   811  000748  2218               	addwfc	(sprintf@ap+1)^0,f,c
   812  00074A                     
   813                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
   814  00074A  0E01               	movlw	1
   815  00074C  6E1F               	movwf	sprintf@c^0,c
   816  00074E                     l1672:
   817                           
   818                           ;doprnt.c: 1332: if(val < dpowers[c])
   819  00074E  501F               	movf	sprintf@c^0,w,c
   820  000750  0D02               	mullw	2
   821  000752  0E01               	movlw	low _dpowers
   822  000754  24F3               	addwf	243,w,c
   823  000756  6EF6               	movwf	tblptrl,c
   824  000758  0E06               	movlw	high _dpowers
   825  00075A  20F4               	addwfc	244,w,c
   826  00075C  6EF7               	movwf	tblptrh,c
   827  00075E                     	if	0	;There are less than 3 active tblptr bytes
   828  00075E                     	endif
   829  00075E  0009               	tblrd		*+
   830  000760  50F5               	movf	tablat,w,c
   831  000762  5C1A               	subwf	sprintf@val^0,w,c
   832  000764  0009               	tblrd		*+
   833  000766  50F5               	movf	tablat,w,c
   834  000768  581B               	subwfb	(sprintf@val+1)^0,w,c
   835  00076A  B0D8               	btfsc	status,0,c
   836  00076C  EFBA  F003         	goto	u761
   837  000770  EFBC  F003         	goto	u760
   838  000774                     u761:
   839  000774  EFBE  F003         	goto	l1676
   840  000778                     u760:
   841  000778  EFC8  F003         	goto	l1680
   842  00077C                     l1676:
   843  00077C  2A1F               	incf	sprintf@c^0,f,c
   844  00077E  0E05               	movlw	5
   845  000780  181F               	xorwf	sprintf@c^0,w,c
   846  000782  A4D8               	btfss	status,2,c
   847  000784  EFC6  F003         	goto	u771
   848  000788  EFC8  F003         	goto	u770
   849  00078C                     u771:
   850  00078C  EFA7  F003         	goto	l1672
   851  000790                     u770:
   852  000790                     l1680:
   853                           
   854                           ;doprnt.c: 1407: if(width > c)
   855  000790  501F               	movf	sprintf@c^0,w,c
   856  000792  6E13               	movwf	??_sprintf^0,c
   857  000794  6A14               	clrf	(??_sprintf+1)^0,c
   858  000796  501D               	movf	sprintf@width^0,w,c
   859  000798  5C13               	subwf	??_sprintf^0,w,c
   860  00079A  5014               	movf	(??_sprintf+1)^0,w,c
   861  00079C  0A80               	xorlw	128
   862  00079E  6E15               	movwf	(??_sprintf+2)^0,c
   863  0007A0  501E               	movf	(sprintf@width+1)^0,w,c
   864  0007A2  0A80               	xorlw	128
   865  0007A4  5815               	subwfb	(??_sprintf+2)^0,w,c
   866  0007A6  B0D8               	btfsc	status,0,c
   867  0007A8  EFD8  F003         	goto	u781
   868  0007AC  EFDA  F003         	goto	u780
   869  0007B0                     u781:
   870  0007B0  EFE0  F003         	goto	l1684
   871  0007B4                     u780:
   872  0007B4                     
   873                           ;doprnt.c: 1408: width -= c;
   874  0007B4  501F               	movf	sprintf@c^0,w,c
   875  0007B6  5E1D               	subwf	sprintf@width^0,f,c
   876  0007B8  0E00               	movlw	0
   877  0007BA  5A1E               	subwfb	(sprintf@width+1)^0,f,c
   878  0007BC  EFE4  F003         	goto	l1686
   879  0007C0                     l1684:
   880                           
   881                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
   882  0007C0  0E00               	movlw	0
   883  0007C2  6E1E               	movwf	(sprintf@width+1)^0,c
   884  0007C4  0E00               	movlw	0
   885  0007C6  6E1D               	movwf	sprintf@width^0,c
   886  0007C8                     l1686:
   887                           
   888                           ;doprnt.c: 1413: if(flag & 0x04) {
   889  0007C8  A419               	btfss	sprintf@flag^0,2,c
   890  0007CA  EFE9  F003         	goto	u791
   891  0007CE  EFEB  F003         	goto	u790
   892  0007D2                     u791:
   893  0007D2  EF0A  F004         	goto	l1696
   894  0007D6                     u790:
   895  0007D6                     
   896                           ;doprnt.c: 1441: if(width)
   897  0007D6  501D               	movf	sprintf@width^0,w,c
   898  0007D8  101E               	iorwf	(sprintf@width+1)^0,w,c
   899  0007DA  B4D8               	btfsc	status,2,c
   900  0007DC  EFF2  F003         	goto	u801
   901  0007E0  EFF4  F003         	goto	u800
   902  0007E4                     u801:
   903  0007E4  EF27  F004         	goto	l221
   904  0007E8                     u800:
   905  0007E8                     l1690:
   906                           
   907                           ;doprnt.c: 1443: ((*sp++ = ('0')));
   908  0007E8  C00D  FFD9         	movff	sprintf@sp,fsr2l
   909  0007EC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   910  0007F0  0E30               	movlw	48
   911  0007F2  6EDF               	movwf	indf2,c
   912  0007F4  4A0D               	infsnz	sprintf@sp^0,f,c
   913  0007F6  2A0E               	incf	(sprintf@sp+1)^0,f,c
   914  0007F8                     
   915                           ;doprnt.c: 1444: while(--width);
   916  0007F8  061D               	decf	sprintf@width^0,f,c
   917  0007FA  A0D8               	btfss	status,0,c
   918  0007FC  061E               	decf	(sprintf@width+1)^0,f,c
   919  0007FE  501D               	movf	sprintf@width^0,w,c
   920  000800  101E               	iorwf	(sprintf@width+1)^0,w,c
   921  000802  A4D8               	btfss	status,2,c
   922  000804  EF06  F004         	goto	u811
   923  000808  EF08  F004         	goto	u810
   924  00080C                     u811:
   925  00080C  EFF4  F003         	goto	l1690
   926  000810                     u810:
   927  000810  EF27  F004         	goto	l221
   928  000814                     l1696:
   929                           
   930                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
   931  000814  501D               	movf	sprintf@width^0,w,c
   932  000816  101E               	iorwf	(sprintf@width+1)^0,w,c
   933  000818  B4D8               	btfsc	status,2,c
   934  00081A  EF11  F004         	goto	u821
   935  00081E  EF13  F004         	goto	u820
   936  000822                     u821:
   937  000822  EF27  F004         	goto	l221
   938  000826                     u820:
   939  000826                     l1698:
   940                           
   941                           ;doprnt.c: 1456: ((*sp++ = (' ')));
   942  000826  C00D  FFD9         	movff	sprintf@sp,fsr2l
   943  00082A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   944  00082E  0E20               	movlw	32
   945  000830  6EDF               	movwf	indf2,c
   946  000832  4A0D               	infsnz	sprintf@sp^0,f,c
   947  000834  2A0E               	incf	(sprintf@sp+1)^0,f,c
   948  000836                     
   949                           ;doprnt.c: 1457: while(--width);
   950  000836  061D               	decf	sprintf@width^0,f,c
   951  000838  A0D8               	btfss	status,0,c
   952  00083A  061E               	decf	(sprintf@width+1)^0,f,c
   953  00083C  501D               	movf	sprintf@width^0,w,c
   954  00083E  101E               	iorwf	(sprintf@width+1)^0,w,c
   955  000840  A4D8               	btfss	status,2,c
   956  000842  EF25  F004         	goto	u831
   957  000846  EF27  F004         	goto	u830
   958  00084A                     u831:
   959  00084A  EF13  F004         	goto	l1698
   960  00084E                     u830:
   961  00084E                     l221:
   962                           
   963                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
   964  00084E  C01F  F01C         	movff	sprintf@c,sprintf@prec
   965                           
   966                           ;doprnt.c: 1500: while(prec--) {
   967  000852  EF54  F004         	goto	l1710
   968  000856                     l1704:
   969                           
   970                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
   971  000856  501C               	movf	sprintf@prec^0,w,c
   972  000858  0D02               	mullw	2
   973  00085A  0E01               	movlw	low _dpowers
   974  00085C  24F3               	addwf	243,w,c
   975  00085E  6EF6               	movwf	tblptrl,c
   976  000860  0E06               	movlw	high _dpowers
   977  000862  20F4               	addwfc	244,w,c
   978  000864  6EF7               	movwf	tblptrh,c
   979  000866                     	if	0	;There are less than 3 active tblptr bytes
   980  000866                     	endif
   981  000866  0009               	tblrd		*+
   982  000868  CFF5 F003          	movff	tablat,___lwdiv@divisor
   983  00086C  000A               	tblrd		*-
   984  00086E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   985  000872  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
   986  000876  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   987  00087A  EC71  F008         	call	___lwdiv	;wreg free
   988  00087E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   989  000882  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   990  000886  0E00               	movlw	0
   991  000888  6E0B               	movwf	(___lwmod@divisor+1)^0,c
   992  00088A  0E0A               	movlw	10
   993  00088C  6E0A               	movwf	___lwmod@divisor^0,c
   994  00088E  ECE0  F008         	call	___lwmod	;wreg free
   995  000892  5008               	movf	?___lwmod^0,w,c
   996  000894  0F30               	addlw	48
   997  000896  6E1F               	movwf	sprintf@c^0,c
   998  000898                     
   999                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  1000  000898  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1001  00089C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1002  0008A0  C01F  FFDF         	movff	sprintf@c,indf2
  1003  0008A4  4A0D               	infsnz	sprintf@sp^0,f,c
  1004  0008A6  2A0E               	incf	(sprintf@sp+1)^0,f,c
  1005  0008A8                     l1710:
  1006  0008A8  061C               	decf	sprintf@prec^0,f,c
  1007  0008AA  281C               	incf	sprintf@prec^0,w,c
  1008  0008AC  A4D8               	btfss	status,2,c
  1009  0008AE  EF5B  F004         	goto	u841
  1010  0008B2  EF5D  F004         	goto	u840
  1011  0008B6                     u841:
  1012  0008B6  EF2B  F004         	goto	l1704
  1013  0008BA                     u840:
  1014  0008BA                     l1712:
  1015  0008BA  C00F  FFF6         	movff	sprintf@f,tblptrl
  1016  0008BE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1017  0008C2  4A0F               	infsnz	sprintf@f^0,f,c
  1018  0008C4  2A10               	incf	(sprintf@f+1)^0,f,c
  1019  0008C6                     	if	0	;tblptru may be non-zero
  1020  0008C6                     	endif
  1021  0008C6                     	if	0	;tblptru may be non-zero
  1022  0008C6                     	endif
  1023  0008C6  0008               	tblrd		*
  1024  0008C8  CFF5 F01F          	movff	tablat,sprintf@c
  1025  0008CC  501F               	movf	sprintf@c^0,w,c
  1026  0008CE  A4D8               	btfss	status,2,c
  1027  0008D0  EF6C  F004         	goto	u851
  1028  0008D4  EF6E  F004         	goto	u850
  1029  0008D8                     u851:
  1030  0008D8  EF0F  F003         	goto	l1630
  1031  0008DC                     u850:
  1032  0008DC                     l1714:
  1033                           
  1034                           ;doprnt.c: 1564: *sp = 0;
  1035  0008DC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1036  0008E0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1037  0008E4  0E00               	movlw	0
  1038  0008E6  6EDF               	movwf	indf2,c
  1039  0008E8  0012               	return		;funcret
  1040  0008EA                     __end_of_sprintf:
  1041                           	callstack 0
  1042                           
  1043 ;; *************** function _isdigit *****************
  1044 ;; Defined at:
  1045 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  c               1    wreg     unsigned char 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  c               1    2[COMRAM] unsigned char 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;		None               void
  1052 ;; Registers used:
  1053 ;;		wreg, status,2, status,0
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1059 ;;      Params:         0       0       0       0       0       0       0
  1060 ;;      Locals:         2       0       0       0       0       0       0
  1061 ;;      Temps:          1       0       0       0       0       0       0
  1062 ;;      Totals:         3       0       0       0       0       0       0
  1063 ;;Total ram usage:        3 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_sprintf
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text2
  1073  001224                     __ptext2:
  1074                           	callstack 0
  1075  001224                     _isdigit:
  1076                           	callstack 29
  1077                           
  1078                           ;incstack = 0
  1079                           ;isdigit@c stored from wreg
  1080  001224  6E03               	movwf	isdigit@c^0,c
  1081  001226  0E00               	movlw	0
  1082  001228  6E02               	movwf	_isdigit$1229^0,c
  1083  00122A  0E3A               	movlw	58
  1084  00122C  6003               	cpfslt	isdigit@c^0,c
  1085  00122E  EF1B  F009         	goto	u491
  1086  001232  EF1D  F009         	goto	u490
  1087  001236                     u491:
  1088  001236  EF27  F009         	goto	l1444
  1089  00123A                     u490:
  1090  00123A  0E2F               	movlw	47
  1091  00123C  6403               	cpfsgt	isdigit@c^0,c
  1092  00123E  EF23  F009         	goto	u501
  1093  001242  EF25  F009         	goto	u500
  1094  001246                     u501:
  1095  001246  EF27  F009         	goto	l1444
  1096  00124A                     u500:
  1097  00124A  0E01               	movlw	1
  1098  00124C  6E02               	movwf	_isdigit$1229^0,c
  1099  00124E                     l1444:
  1100  00124E  C002  F001         	movff	_isdigit$1229,??_isdigit
  1101  001252  3001               	rrcf	??_isdigit^0,w,c
  1102  001254  0012               	return		;funcret
  1103  001256                     __end_of_isdigit:
  1104                           	callstack 0
  1105                           
  1106 ;; *************** function ___wmul *****************
  1107 ;; Defined at:
  1108 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  multiplier      2    0[COMRAM] unsigned int 
  1111 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  product         2    4[COMRAM] unsigned int 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  2    0[COMRAM] unsigned int 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0, prodl, prodh
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1123 ;;      Params:         4       0       0       0       0       0       0
  1124 ;;      Locals:         2       0       0       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0       0       0
  1126 ;;      Totals:         6       0       0       0       0       0       0
  1127 ;;Total ram usage:        6 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_sprintf
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text3
  1137  0012B0                     __ptext3:
  1138                           	callstack 0
  1139  0012B0                     ___wmul:
  1140                           	callstack 29
  1141  0012B0  5001               	movf	___wmul@multiplier^0,w,c
  1142  0012B2  0203               	mulwf	___wmul@multiplicand^0,c
  1143  0012B4  CFF3 F005          	movff	prodl,___wmul@product
  1144  0012B8  CFF4 F006          	movff	prodh,___wmul@product+1
  1145  0012BC  5001               	movf	___wmul@multiplier^0,w,c
  1146  0012BE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1147  0012C0  50F3               	movf	243,w,c
  1148  0012C2  2606               	addwf	(___wmul@product+1)^0,f,c
  1149  0012C4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1150  0012C6  0203               	mulwf	___wmul@multiplicand^0,c
  1151  0012C8  50F3               	movf	243,w,c
  1152  0012CA  2606               	addwf	(___wmul@product+1)^0,f,c
  1153  0012CC  C005  F001         	movff	___wmul@product,?___wmul
  1154  0012D0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1155  0012D4  0012               	return		;funcret
  1156  0012D6                     __end_of___wmul:
  1157                           	callstack 0
  1158                           
  1159 ;; *************** function ___lwmod *****************
  1160 ;; Defined at:
  1161 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  dividend        2    7[COMRAM] unsigned int 
  1164 ;;  divisor         2    9[COMRAM] unsigned int 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  counter         1   11[COMRAM] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2    7[COMRAM] unsigned int 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1176 ;;      Params:         4       0       0       0       0       0       0
  1177 ;;      Locals:         1       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0
  1179 ;;      Totals:         5       0       0       0       0       0       0
  1180 ;;Total ram usage:        5 bytes
  1181 ;; Hardware stack levels used: 1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_sprintf
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text4
  1190  0011C0                     __ptext4:
  1191                           	callstack 0
  1192  0011C0                     ___lwmod:
  1193                           	callstack 29
  1194  0011C0  500A               	movf	___lwmod@divisor^0,w,c
  1195  0011C2  100B               	iorwf	(___lwmod@divisor+1)^0,w,c
  1196  0011C4  B4D8               	btfsc	status,2,c
  1197  0011C6  EFE7  F008         	goto	u651
  1198  0011CA  EFE9  F008         	goto	u650
  1199  0011CE                     u651:
  1200  0011CE  EF0D  F009         	goto	l721
  1201  0011D2                     u650:
  1202  0011D2  0E01               	movlw	1
  1203  0011D4  6E0C               	movwf	___lwmod@counter^0,c
  1204  0011D6  EFF1  F008         	goto	l1558
  1205  0011DA                     l1556:
  1206  0011DA  90D8               	bcf	status,0,c
  1207  0011DC  360A               	rlcf	___lwmod@divisor^0,f,c
  1208  0011DE  360B               	rlcf	(___lwmod@divisor+1)^0,f,c
  1209  0011E0  2A0C               	incf	___lwmod@counter^0,f,c
  1210  0011E2                     l1558:
  1211  0011E2  AE0B               	btfss	(___lwmod@divisor+1)^0,7,c
  1212  0011E4  EFF6  F008         	goto	u661
  1213  0011E8  EFF8  F008         	goto	u660
  1214  0011EC                     u661:
  1215  0011EC  EFED  F008         	goto	l1556
  1216  0011F0                     u660:
  1217  0011F0                     l1560:
  1218  0011F0  500A               	movf	___lwmod@divisor^0,w,c
  1219  0011F2  5C08               	subwf	___lwmod@dividend^0,w,c
  1220  0011F4  500B               	movf	(___lwmod@divisor+1)^0,w,c
  1221  0011F6  5809               	subwfb	(___lwmod@dividend+1)^0,w,c
  1222  0011F8  A0D8               	btfss	status,0,c
  1223  0011FA  EF01  F009         	goto	u671
  1224  0011FE  EF03  F009         	goto	u670
  1225  001202                     u671:
  1226  001202  EF07  F009         	goto	l1564
  1227  001206                     u670:
  1228  001206  500A               	movf	___lwmod@divisor^0,w,c
  1229  001208  5E08               	subwf	___lwmod@dividend^0,f,c
  1230  00120A  500B               	movf	(___lwmod@divisor+1)^0,w,c
  1231  00120C  5A09               	subwfb	(___lwmod@dividend+1)^0,f,c
  1232  00120E                     l1564:
  1233  00120E  90D8               	bcf	status,0,c
  1234  001210  320B               	rrcf	(___lwmod@divisor+1)^0,f,c
  1235  001212  320A               	rrcf	___lwmod@divisor^0,f,c
  1236  001214  2E0C               	decfsz	___lwmod@counter^0,f,c
  1237  001216  EFF8  F008         	goto	l1560
  1238  00121A                     l721:
  1239  00121A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1240  00121E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1241  001222  0012               	return		;funcret
  1242  001224                     __end_of___lwmod:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function ___lwdiv *****************
  1246 ;; Defined at:
  1247 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  dividend        2    0[COMRAM] unsigned int 
  1250 ;;  divisor         2    2[COMRAM] unsigned int 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  quotient        2    4[COMRAM] unsigned int 
  1253 ;;  counter         1    6[COMRAM] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  2    0[COMRAM] unsigned int 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1263 ;;      Params:         4       0       0       0       0       0       0
  1264 ;;      Locals:         3       0       0       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0       0       0
  1266 ;;      Totals:         7       0       0       0       0       0       0
  1267 ;;Total ram usage:        7 bytes
  1268 ;; Hardware stack levels used: 1
  1269 ;; This function calls:
  1270 ;;		Nothing
  1271 ;; This function is called by:
  1272 ;;		_sprintf
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text5
  1277  0010E2                     __ptext5:
  1278                           	callstack 0
  1279  0010E2                     ___lwdiv:
  1280                           	callstack 29
  1281  0010E2  0E00               	movlw	0
  1282  0010E4  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  1283  0010E6  0E00               	movlw	0
  1284  0010E8  6E05               	movwf	___lwdiv@quotient^0,c
  1285  0010EA  5003               	movf	___lwdiv@divisor^0,w,c
  1286  0010EC  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1287  0010EE  B4D8               	btfsc	status,2,c
  1288  0010F0  EF7C  F008         	goto	u621
  1289  0010F4  EF7E  F008         	goto	u620
  1290  0010F8                     u621:
  1291  0010F8  EFA6  F008         	goto	l711
  1292  0010FC                     u620:
  1293  0010FC  0E01               	movlw	1
  1294  0010FE  6E07               	movwf	___lwdiv@counter^0,c
  1295  001100  EF86  F008         	goto	l1538
  1296  001104                     l1536:
  1297  001104  90D8               	bcf	status,0,c
  1298  001106  3603               	rlcf	___lwdiv@divisor^0,f,c
  1299  001108  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1300  00110A  2A07               	incf	___lwdiv@counter^0,f,c
  1301  00110C                     l1538:
  1302  00110C  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  1303  00110E  EF8B  F008         	goto	u631
  1304  001112  EF8D  F008         	goto	u630
  1305  001116                     u631:
  1306  001116  EF82  F008         	goto	l1536
  1307  00111A                     u630:
  1308  00111A                     l1540:
  1309  00111A  90D8               	bcf	status,0,c
  1310  00111C  3605               	rlcf	___lwdiv@quotient^0,f,c
  1311  00111E  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1312  001120  5003               	movf	___lwdiv@divisor^0,w,c
  1313  001122  5C01               	subwf	___lwdiv@dividend^0,w,c
  1314  001124  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1315  001126  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1316  001128  A0D8               	btfss	status,0,c
  1317  00112A  EF99  F008         	goto	u641
  1318  00112E  EF9B  F008         	goto	u640
  1319  001132                     u641:
  1320  001132  EFA0  F008         	goto	l1548
  1321  001136                     u640:
  1322  001136  5003               	movf	___lwdiv@divisor^0,w,c
  1323  001138  5E01               	subwf	___lwdiv@dividend^0,f,c
  1324  00113A  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1325  00113C  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1326  00113E  8005               	bsf	___lwdiv@quotient^0,0,c
  1327  001140                     l1548:
  1328  001140  90D8               	bcf	status,0,c
  1329  001142  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1330  001144  3203               	rrcf	___lwdiv@divisor^0,f,c
  1331  001146  2E07               	decfsz	___lwdiv@counter^0,f,c
  1332  001148  EF8D  F008         	goto	l1540
  1333  00114C                     l711:
  1334  00114C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1335  001150  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1336  001154  0012               	return		;funcret
  1337  001156                     __end_of___lwdiv:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _PWM1_Start *****************
  1341 ;; Defined at:
  1342 ;;		line 76 in file "pwm.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used: 1
  1362 ;; This function calls:
  1363 ;;		Nothing
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text6
  1370  001284                     __ptext6:
  1371                           	callstack 0
  1372  001284                     _PWM1_Start:
  1373                           	callstack 30
  1374  001284                     
  1375                           ;pwm.c: 79: TRISCbits.TRISC2=0;
  1376  001284  9494               	bcf	148,2,c	;volatile
  1377                           
  1378                           ;pwm.c: 80: TRISDbits.TRISD5=0;
  1379  001286  9A95               	bcf	149,5,c	;volatile
  1380  001288                     
  1381                           ;pwm.c: 83: CCP1CON=0x0F;
  1382  001288  0E0F               	movlw	15
  1383  00128A  6EBD               	movwf	189,c	;volatile
  1384  00128C                     
  1385                           ;pwm.c: 86: T2CONbits.TMR2ON=1;
  1386  00128C  84CA               	bsf	202,2,c	;volatile
  1387  00128E                     
  1388                           ;pwm.c: 90: PIR1bits.TMR2IF=0;
  1389  00128E  929E               	bcf	158,1,c	;volatile
  1390  001290                     l57:
  1391  001290  A29E               	btfss	158,1,c	;volatile
  1392  001292  EF4D  F009         	goto	u301
  1393  001296  EF4F  F009         	goto	u300
  1394  00129A                     u301:
  1395  00129A  EF48  F009         	goto	l57
  1396  00129E                     u300:
  1397  00129E                     
  1398                           ;pwm.c: 92: PIR1bits.TMR2IF=0;
  1399  00129E  929E               	bcf	158,1,c	;volatile
  1400  0012A0                     l60:
  1401  0012A0  A29E               	btfss	158,1,c	;volatile
  1402  0012A2  EF55  F009         	goto	u311
  1403  0012A6  EF57  F009         	goto	u310
  1404  0012AA                     u311:
  1405  0012AA  EF50  F009         	goto	l60
  1406  0012AE                     u310:
  1407  0012AE  0012               	return		;funcret
  1408  0012B0                     __end_of_PWM1_Start:
  1409                           	callstack 0
  1410                           
  1411 ;; *************** function _PWM1_Set_Duty *****************
  1412 ;; Defined at:
  1413 ;;		line 101 in file "pwm.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  d               1    wreg     unsigned char 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  d               1   27[COMRAM] unsigned char 
  1418 ;;  temp            2   28[COMRAM] unsigned int 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1428 ;;      Params:         0       0       0       0       0       0       0
  1429 ;;      Locals:         3       0       0       0       0       0       0
  1430 ;;      Temps:          2       0       0       0       0       0       0
  1431 ;;      Totals:         5       0       0       0       0       0       0
  1432 ;;Total ram usage:        5 bytes
  1433 ;; Hardware stack levels used: 1
  1434 ;; Hardware stack levels required when called: 1
  1435 ;; This function calls:
  1436 ;;		___lldiv
  1437 ;;		___lmul
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text7
  1444  000FC6                     __ptext7:
  1445                           	callstack 0
  1446  000FC6                     _PWM1_Set_Duty:
  1447                           	callstack 29
  1448                           
  1449                           ;incstack = 0
  1450                           ;PWM1_Set_Duty@d stored from wreg
  1451  000FC6  6E1C               	movwf	PWM1_Set_Duty@d^0,c
  1452  000FC8                     
  1453                           ;pwm.c: 103: unsigned int temp;;pwm.c: 105: temp=(((unsigned long)(d))*((PR2<<2)|0x03))/
      +                          255;
  1454  000FC8  501C               	movf	PWM1_Set_Duty@d^0,w,c
  1455  000FCA  6E01               	movwf	___lmul@multiplier^0,c
  1456  000FCC  6A02               	clrf	(___lmul@multiplier+1)^0,c
  1457  000FCE  6A03               	clrf	(___lmul@multiplier+2)^0,c
  1458  000FD0  6A04               	clrf	(___lmul@multiplier+3)^0,c
  1459  000FD2  50CB               	movf	203,w,c	;volatile
  1460  000FD4  6E1A               	movwf	??_PWM1_Set_Duty^0,c
  1461  000FD6  6A1B               	clrf	(??_PWM1_Set_Duty+1)^0,c
  1462  000FD8  90D8               	bcf	status,0,c
  1463  000FDA  361A               	rlcf	??_PWM1_Set_Duty^0,f,c
  1464  000FDC  361B               	rlcf	(??_PWM1_Set_Duty+1)^0,f,c
  1465  000FDE  90D8               	bcf	status,0,c
  1466  000FE0  361A               	rlcf	??_PWM1_Set_Duty^0,f,c
  1467  000FE2  361B               	rlcf	(??_PWM1_Set_Duty+1)^0,f,c
  1468  000FE4  0E03               	movlw	3
  1469  000FE6  121A               	iorwf	??_PWM1_Set_Duty^0,f,c
  1470  000FE8  0E00               	movlw	0
  1471  000FEA  121B               	iorwf	(??_PWM1_Set_Duty+1)^0,f,c
  1472  000FEC  C01A  F005         	movff	??_PWM1_Set_Duty,___lmul@multiplicand
  1473  000FF0  C01B  F006         	movff	??_PWM1_Set_Duty+1,___lmul@multiplicand+1
  1474  000FF4  0E00               	movlw	0
  1475  000FF6  BE06               	btfsc	(___lmul@multiplicand+1)^0,7,c
  1476  000FF8  0EFF               	movlw	-1
  1477  000FFA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1478  000FFC  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1479  000FFE  ECAB  F008         	call	___lmul	;wreg free
  1480  001002  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1481  001006  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1482  00100A  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1483  00100E  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1484  001012  0EFF               	movlw	255
  1485  001014  6E11               	movwf	___lldiv@divisor^0,c
  1486  001016  0E00               	movlw	0
  1487  001018  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1488  00101A  0E00               	movlw	0
  1489  00101C  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1490  00101E  0E00               	movlw	0
  1491  001020  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1492  001022  EC91  F007         	call	___lldiv	;wreg free
  1493  001026  C00D  F01D         	movff	?___lldiv,PWM1_Set_Duty@temp
  1494  00102A  C00E  F01E         	movff	?___lldiv+1,PWM1_Set_Duty@temp+1
  1495  00102E                     
  1496                           ;pwm.c: 107: CCPR1L= (0x03FC&temp)>>2;
  1497  00102E  C01D  F01A         	movff	PWM1_Set_Duty@temp,??_PWM1_Set_Duty
  1498  001032  C01E  F01B         	movff	PWM1_Set_Duty@temp+1,??_PWM1_Set_Duty+1
  1499  001036  90D8               	bcf	status,0,c
  1500  001038  321B               	rrcf	(??_PWM1_Set_Duty+1)^0,f,c
  1501  00103A  321A               	rrcf	??_PWM1_Set_Duty^0,f,c
  1502  00103C  90D8               	bcf	status,0,c
  1503  00103E  321B               	rrcf	(??_PWM1_Set_Duty+1)^0,f,c
  1504  001040  321A               	rrcf	??_PWM1_Set_Duty^0,f,c
  1505  001042  501A               	movf	??_PWM1_Set_Duty^0,w,c
  1506  001044  6EBE               	movwf	190,c	;volatile
  1507  001046                     
  1508                           ;pwm.c: 108: CCP1CON=((0x0003&temp)<<4)|0x0F;
  1509  001046  C01D  F01A         	movff	PWM1_Set_Duty@temp,??_PWM1_Set_Duty
  1510  00104A  0E03               	movlw	3
  1511  00104C  161A               	andwf	??_PWM1_Set_Duty^0,f,c
  1512  00104E  381A               	swapf	??_PWM1_Set_Duty^0,w,c
  1513  001050  0BF0               	andlw	240
  1514  001052  090F               	iorlw	15
  1515  001054  6EBD               	movwf	189,c	;volatile
  1516  001056  0012               	return		;funcret
  1517  001058                     __end_of_PWM1_Set_Duty:
  1518                           	callstack 0
  1519                           
  1520 ;; *************** function ___lmul *****************
  1521 ;; Defined at:
  1522 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  multiplier      4    0[COMRAM] unsigned long 
  1525 ;;  multiplicand    4    4[COMRAM] unsigned long 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  product         4    8[COMRAM] unsigned long 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  4    0[COMRAM] unsigned long 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1537 ;;      Params:         8       0       0       0       0       0       0
  1538 ;;      Locals:         4       0       0       0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0
  1540 ;;      Totals:        12       0       0       0       0       0       0
  1541 ;;Total ram usage:       12 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_PWM1_Set_Duty
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text8
  1551  001156                     __ptext8:
  1552                           	callstack 0
  1553  001156                     ___lmul:
  1554                           	callstack 29
  1555  001156  0E00               	movlw	0
  1556  001158  6E09               	movwf	___lmul@product^0,c
  1557  00115A  0E00               	movlw	0
  1558  00115C  6E0A               	movwf	(___lmul@product+1)^0,c
  1559  00115E  0E00               	movlw	0
  1560  001160  6E0B               	movwf	(___lmul@product+2)^0,c
  1561  001162  0E00               	movlw	0
  1562  001164  6E0C               	movwf	(___lmul@product+3)^0,c
  1563  001166                     l1456:
  1564  001166  A001               	btfss	___lmul@multiplier^0,0,c
  1565  001168  EFB8  F008         	goto	u511
  1566  00116C  EFBA  F008         	goto	u510
  1567  001170                     u511:
  1568  001170  EFC2  F008         	goto	l1460
  1569  001174                     u510:
  1570  001174  5005               	movf	___lmul@multiplicand^0,w,c
  1571  001176  2609               	addwf	___lmul@product^0,f,c
  1572  001178  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  1573  00117A  220A               	addwfc	(___lmul@product+1)^0,f,c
  1574  00117C  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  1575  00117E  220B               	addwfc	(___lmul@product+2)^0,f,c
  1576  001180  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  1577  001182  220C               	addwfc	(___lmul@product+3)^0,f,c
  1578  001184                     l1460:
  1579  001184  90D8               	bcf	status,0,c
  1580  001186  3605               	rlcf	___lmul@multiplicand^0,f,c
  1581  001188  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  1582  00118A  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  1583  00118C  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  1584  00118E  90D8               	bcf	status,0,c
  1585  001190  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  1586  001192  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  1587  001194  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  1588  001196  3201               	rrcf	___lmul@multiplier^0,f,c
  1589  001198  5001               	movf	___lmul@multiplier^0,w,c
  1590  00119A  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  1591  00119C  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  1592  00119E  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  1593  0011A0  A4D8               	btfss	status,2,c
  1594  0011A2  EFD5  F008         	goto	u521
  1595  0011A6  EFD7  F008         	goto	u520
  1596  0011AA                     u521:
  1597  0011AA  EFB3  F008         	goto	l1456
  1598  0011AE                     u520:
  1599  0011AE  C009  F001         	movff	___lmul@product,?___lmul
  1600  0011B2  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  1601  0011B6  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  1602  0011BA  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  1603  0011BE  0012               	return		;funcret
  1604  0011C0                     __end_of___lmul:
  1605                           	callstack 0
  1606                           
  1607 ;; *************** function ___lldiv *****************
  1608 ;; Defined at:
  1609 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\__lldiv.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  dividend        4   12[COMRAM] unsigned long 
  1612 ;;  divisor         4   16[COMRAM] unsigned long 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  quotient        4   20[COMRAM] unsigned long 
  1615 ;;  counter         1   24[COMRAM] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  4   12[COMRAM] unsigned long 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1625 ;;      Params:         8       0       0       0       0       0       0
  1626 ;;      Locals:         5       0       0       0       0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0
  1628 ;;      Totals:        13       0       0       0       0       0       0
  1629 ;;Total ram usage:       13 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_PWM1_Set_Duty
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text9
  1639  000F22                     __ptext9:
  1640                           	callstack 0
  1641  000F22                     ___lldiv:
  1642                           	callstack 29
  1643  000F22  0E00               	movlw	0
  1644  000F24  6E15               	movwf	___lldiv@quotient^0,c
  1645  000F26  0E00               	movlw	0
  1646  000F28  6E16               	movwf	(___lldiv@quotient+1)^0,c
  1647  000F2A  0E00               	movlw	0
  1648  000F2C  6E17               	movwf	(___lldiv@quotient+2)^0,c
  1649  000F2E  0E00               	movlw	0
  1650  000F30  6E18               	movwf	(___lldiv@quotient+3)^0,c
  1651  000F32  5011               	movf	___lldiv@divisor^0,w,c
  1652  000F34  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  1653  000F36  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  1654  000F38  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  1655  000F3A  B4D8               	btfsc	status,2,c
  1656  000F3C  EFA2  F007         	goto	u531
  1657  000F40  EFA4  F007         	goto	u530
  1658  000F44                     u531:
  1659  000F44  EFDA  F007         	goto	l259
  1660  000F48                     u530:
  1661  000F48  0E01               	movlw	1
  1662  000F4A  6E19               	movwf	___lldiv@counter^0,c
  1663  000F4C  EFAE  F007         	goto	l1472
  1664  000F50                     l1470:
  1665  000F50  90D8               	bcf	status,0,c
  1666  000F52  3611               	rlcf	___lldiv@divisor^0,f,c
  1667  000F54  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  1668  000F56  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  1669  000F58  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  1670  000F5A  2A19               	incf	___lldiv@counter^0,f,c
  1671  000F5C                     l1472:
  1672  000F5C  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  1673  000F5E  EFB3  F007         	goto	u541
  1674  000F62  EFB5  F007         	goto	u540
  1675  000F66                     u541:
  1676  000F66  EFA8  F007         	goto	l1470
  1677  000F6A                     u540:
  1678  000F6A                     l1474:
  1679  000F6A  90D8               	bcf	status,0,c
  1680  000F6C  3615               	rlcf	___lldiv@quotient^0,f,c
  1681  000F6E  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  1682  000F70  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  1683  000F72  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  1684  000F74  5011               	movf	___lldiv@divisor^0,w,c
  1685  000F76  5C0D               	subwf	___lldiv@dividend^0,w,c
  1686  000F78  5012               	movf	(___lldiv@divisor+1)^0,w,c
  1687  000F7A  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  1688  000F7C  5013               	movf	(___lldiv@divisor+2)^0,w,c
  1689  000F7E  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  1690  000F80  5014               	movf	(___lldiv@divisor+3)^0,w,c
  1691  000F82  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  1692  000F84  A0D8               	btfss	status,0,c
  1693  000F86  EFC7  F007         	goto	u551
  1694  000F8A  EFC9  F007         	goto	u550
  1695  000F8E                     u551:
  1696  000F8E  EFD2  F007         	goto	l1482
  1697  000F92                     u550:
  1698  000F92  5011               	movf	___lldiv@divisor^0,w,c
  1699  000F94  5E0D               	subwf	___lldiv@dividend^0,f,c
  1700  000F96  5012               	movf	(___lldiv@divisor+1)^0,w,c
  1701  000F98  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  1702  000F9A  5013               	movf	(___lldiv@divisor+2)^0,w,c
  1703  000F9C  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  1704  000F9E  5014               	movf	(___lldiv@divisor+3)^0,w,c
  1705  000FA0  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  1706  000FA2  8015               	bsf	___lldiv@quotient^0,0,c
  1707  000FA4                     l1482:
  1708  000FA4  90D8               	bcf	status,0,c
  1709  000FA6  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  1710  000FA8  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  1711  000FAA  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  1712  000FAC  3211               	rrcf	___lldiv@divisor^0,f,c
  1713  000FAE  2E19               	decfsz	___lldiv@counter^0,f,c
  1714  000FB0  EFB5  F007         	goto	l1474
  1715  000FB4                     l259:
  1716  000FB4  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  1717  000FB8  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  1718  000FBC  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  1719  000FC0  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  1720  000FC4  0012               	return		;funcret
  1721  000FC6                     __end_of___lldiv:
  1722                           	callstack 0
  1723                           
  1724 ;; *************** function _PWM1_Init *****************
  1725 ;; Defined at:
  1726 ;;		line 31 in file "pwm.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  f               2   14[COMRAM] unsigned int 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  temp            2   20[COMRAM] unsigned int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1740 ;;      Params:         2       0       0       0       0       0       0
  1741 ;;      Locals:         2       0       0       0       0       0       0
  1742 ;;      Temps:          4       0       0       0       0       0       0
  1743 ;;      Totals:         8       0       0       0       0       0       0
  1744 ;;Total ram usage:        8 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 1
  1747 ;; This function calls:
  1748 ;;		___aldiv
  1749 ;; This function is called by:
  1750 ;;		_main
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text10
  1755  000D66                     __ptext10:
  1756                           	callstack 0
  1757  000D66                     _PWM1_Init:
  1758                           	callstack 29
  1759  000D66                     
  1760                           ;pwm.c: 33: unsigned int temp;;pwm.c: 39: CCP1CON=0x00;
  1761  000D66  0E00               	movlw	0
  1762  000D68  6EBD               	movwf	189,c	;volatile
  1763  000D6A                     
  1764                           ;pwm.c: 40: TRISCbits.TRISC2=1;
  1765  000D6A  8494               	bsf	148,2,c	;volatile
  1766  000D6C                     
  1767                           ;pwm.c: 41: TRISDbits.TRISD5=1;
  1768  000D6C  8A95               	bsf	149,5,c	;volatile
  1769  000D6E                     
  1770                           ;pwm.c: 43: PORTCbits.RC2=0;
  1771  000D6E  9482               	bcf	130,2,c	;volatile
  1772  000D70                     
  1773                           ;pwm.c: 44: PORTDbits.RD5=0;
  1774  000D70  9A83               	bcf	131,5,c	;volatile
  1775                           
  1776                           ;pwm.c: 46: CCPR1L=0;
  1777  000D72  0E00               	movlw	0
  1778  000D74  6EBE               	movwf	190,c	;volatile
  1779  000D76                     
  1780                           ;pwm.c: 51: T2CONbits.TMR2ON=0;
  1781  000D76  94CA               	bcf	202,2,c	;volatile
  1782  000D78                     
  1783                           ;pwm.c: 53: temp=8000000/(f*4l);
  1784  000D78  0E00               	movlw	0
  1785  000D7A  6E01               	movwf	___aldiv@dividend^0,c
  1786  000D7C  0E12               	movlw	18
  1787  000D7E  6E02               	movwf	(___aldiv@dividend+1)^0,c
  1788  000D80  0E7A               	movlw	122
  1789  000D82  6E03               	movwf	(___aldiv@dividend+2)^0,c
  1790  000D84  0E00               	movlw	0
  1791  000D86  6E04               	movwf	(___aldiv@dividend+3)^0,c
  1792  000D88  500F               	movf	PWM1_Init@f^0,w,c
  1793  000D8A  6E11               	movwf	??_PWM1_Init^0,c
  1794  000D8C  5010               	movf	(PWM1_Init@f+1)^0,w,c
  1795  000D8E  6E12               	movwf	(??_PWM1_Init+1)^0,c
  1796  000D90  6A13               	clrf	(??_PWM1_Init+2)^0,c
  1797  000D92  6A14               	clrf	(??_PWM1_Init+3)^0,c
  1798  000D94  0E02               	movlw	2
  1799  000D96                     u685:
  1800  000D96  90D8               	bcf	status,0,c
  1801  000D98  3611               	rlcf	??_PWM1_Init^0,f,c
  1802  000D9A  3612               	rlcf	(??_PWM1_Init+1)^0,f,c
  1803  000D9C  3613               	rlcf	(??_PWM1_Init+2)^0,f,c
  1804  000D9E  3614               	rlcf	(??_PWM1_Init+3)^0,f,c
  1805  000DA0  2EE8               	decfsz	wreg,f,c
  1806  000DA2  EFCB  F006         	goto	u685
  1807  000DA6  C011  F005         	movff	??_PWM1_Init,___aldiv@divisor
  1808  000DAA  C012  F006         	movff	??_PWM1_Init+1,___aldiv@divisor+1
  1809  000DAE  C013  F007         	movff	??_PWM1_Init+2,___aldiv@divisor+2
  1810  000DB2  C014  F008         	movff	??_PWM1_Init+3,___aldiv@divisor+3
  1811  000DB6  EC2D  F006         	call	___aldiv	;wreg free
  1812  000DBA  C001  F015         	movff	?___aldiv,PWM1_Init@temp
  1813  000DBE  C002  F016         	movff	?___aldiv+1,PWM1_Init@temp+1
  1814  000DC2                     
  1815                           ;pwm.c: 55: if (temp < 256)
  1816  000DC2  0416               	decf	(PWM1_Init@temp+1)^0,w,c
  1817  000DC4  B0D8               	btfsc	status,0,c
  1818  000DC6  EFE7  F006         	goto	u691
  1819  000DCA  EFE9  F006         	goto	u690
  1820  000DCE                     u691:
  1821  000DCE  EFEF  F006         	goto	l1588
  1822  000DD2                     u690:
  1823  000DD2                     
  1824                           ;pwm.c: 56: {;pwm.c: 57: T2CONbits.T2CKPS=0;
  1825  000DD2  0EFC               	movlw	-4
  1826  000DD4  16CA               	andwf	202,f,c	;volatile
  1827  000DD6                     
  1828                           ;pwm.c: 58: PR2=temp;
  1829  000DD6  C015  FFCB         	movff	PWM1_Init@temp,4043	;volatile
  1830                           
  1831                           ;pwm.c: 59: }
  1832  000DDA  EF29  F007         	goto	l1598
  1833  000DDE                     l1588:
  1834                           
  1835                           ;pwm.c: 60: else if(temp/4 < 256 )
  1836  000DDE  C015  F011         	movff	PWM1_Init@temp,??_PWM1_Init
  1837  000DE2  C016  F012         	movff	PWM1_Init@temp+1,??_PWM1_Init+1
  1838  000DE6  90D8               	bcf	status,0,c
  1839  000DE8  3212               	rrcf	(??_PWM1_Init+1)^0,f,c
  1840  000DEA  3211               	rrcf	??_PWM1_Init^0,f,c
  1841  000DEC  90D8               	bcf	status,0,c
  1842  000DEE  3212               	rrcf	(??_PWM1_Init+1)^0,f,c
  1843  000DF0  3211               	rrcf	??_PWM1_Init^0,f,c
  1844  000DF2  0412               	decf	(??_PWM1_Init+1)^0,w,c
  1845  000DF4  B0D8               	btfsc	status,0,c
  1846  000DF6  EFFF  F006         	goto	u701
  1847  000DFA  EF01  F007         	goto	u700
  1848  000DFE                     u701:
  1849  000DFE  EF15  F007         	goto	l1594
  1850  000E02                     u700:
  1851  000E02                     
  1852                           ;pwm.c: 61: {;pwm.c: 62: T2CONbits.T2CKPS=1;
  1853  000E02  50CA               	movf	202,w,c	;volatile
  1854  000E04  0BFC               	andlw	-4
  1855  000E06  0901               	iorlw	1
  1856  000E08  6ECA               	movwf	202,c	;volatile
  1857  000E0A                     
  1858                           ;pwm.c: 63: PR2=(temp+2)/4;
  1859  000E0A  0E02               	movlw	2
  1860  000E0C  2415               	addwf	PWM1_Init@temp^0,w,c
  1861  000E0E  6E11               	movwf	??_PWM1_Init^0,c
  1862  000E10  0E00               	movlw	0
  1863  000E12  2016               	addwfc	(PWM1_Init@temp+1)^0,w,c
  1864  000E14  6E12               	movwf	(??_PWM1_Init+1)^0,c
  1865  000E16  90D8               	bcf	status,0,c
  1866  000E18  3212               	rrcf	(??_PWM1_Init+1)^0,f,c
  1867  000E1A  3211               	rrcf	??_PWM1_Init^0,f,c
  1868  000E1C  90D8               	bcf	status,0,c
  1869  000E1E  3212               	rrcf	(??_PWM1_Init+1)^0,f,c
  1870  000E20  3211               	rrcf	??_PWM1_Init^0,f,c
  1871  000E22  5011               	movf	??_PWM1_Init^0,w,c
  1872  000E24  6ECB               	movwf	203,c	;volatile
  1873                           
  1874                           ;pwm.c: 64: }
  1875  000E26  EF29  F007         	goto	l1598
  1876  000E2A                     l1594:
  1877                           
  1878                           ;pwm.c: 65: else;pwm.c: 66: {;pwm.c: 67: PR2=(temp+8)/16;
  1879  000E2A  0E08               	movlw	8
  1880  000E2C  2415               	addwf	PWM1_Init@temp^0,w,c
  1881  000E2E  6E11               	movwf	??_PWM1_Init^0,c
  1882  000E30  0E00               	movlw	0
  1883  000E32  2016               	addwfc	(PWM1_Init@temp+1)^0,w,c
  1884  000E34  6E12               	movwf	(??_PWM1_Init+1)^0,c
  1885  000E36  0E04               	movlw	4
  1886  000E38  6E13               	movwf	(??_PWM1_Init+2)^0,c
  1887  000E3A                     u715:
  1888  000E3A  90D8               	bcf	status,0,c
  1889  000E3C  3212               	rrcf	(??_PWM1_Init+1)^0,f,c
  1890  000E3E  3211               	rrcf	??_PWM1_Init^0,f,c
  1891  000E40  2E13               	decfsz	(??_PWM1_Init+2)^0,f,c
  1892  000E42  EF1D  F007         	goto	u715
  1893  000E46  5011               	movf	??_PWM1_Init^0,w,c
  1894  000E48  6ECB               	movwf	203,c	;volatile
  1895  000E4A                     
  1896                           ;pwm.c: 68: T2CONbits.T2CKPS=2;
  1897  000E4A  50CA               	movf	202,w,c	;volatile
  1898  000E4C  0BFC               	andlw	-4
  1899  000E4E  0902               	iorlw	2
  1900  000E50  6ECA               	movwf	202,c	;volatile
  1901  000E52                     l1598:
  1902                           
  1903                           ;pwm.c: 69: };pwm.c: 71: T2CONbits.T2OUTPS=0;
  1904  000E52  0E87               	movlw	-121
  1905  000E54  16CA               	andwf	202,f,c	;volatile
  1906  000E56  0012               	return		;funcret
  1907  000E58                     __end_of_PWM1_Init:
  1908                           	callstack 0
  1909                           
  1910 ;; *************** function ___aldiv *****************
  1911 ;; Defined at:
  1912 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  dividend        4    0[COMRAM] long 
  1915 ;;  divisor         4    4[COMRAM] long 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  quotient        4   10[COMRAM] long 
  1918 ;;  sign            1    9[COMRAM] unsigned char 
  1919 ;;  counter         1    8[COMRAM] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  4    0[COMRAM] long 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1929 ;;      Params:         8       0       0       0       0       0       0
  1930 ;;      Locals:         6       0       0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0
  1932 ;;      Totals:        14       0       0       0       0       0       0
  1933 ;;Total ram usage:       14 bytes
  1934 ;; Hardware stack levels used: 1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_PWM1_Init
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text11
  1943  000C5A                     __ptext11:
  1944                           	callstack 0
  1945  000C5A                     ___aldiv:
  1946                           	callstack 29
  1947  000C5A  0E00               	movlw	0
  1948  000C5C  6E0A               	movwf	___aldiv@sign^0,c
  1949  000C5E  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
  1950  000C60  EF36  F006         	goto	u560
  1951  000C64  EF34  F006         	goto	u561
  1952  000C68                     u561:
  1953  000C68  EF40  F006         	goto	l1494
  1954  000C6C                     u560:
  1955  000C6C  1E08               	comf	(___aldiv@divisor+3)^0,f,c
  1956  000C6E  1E07               	comf	(___aldiv@divisor+2)^0,f,c
  1957  000C70  1E06               	comf	(___aldiv@divisor+1)^0,f,c
  1958  000C72  6C05               	negf	___aldiv@divisor^0,c
  1959  000C74  0E00               	movlw	0
  1960  000C76  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
  1961  000C78  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
  1962  000C7A  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
  1963  000C7C  0E01               	movlw	1
  1964  000C7E  6E0A               	movwf	___aldiv@sign^0,c
  1965  000C80                     l1494:
  1966  000C80  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
  1967  000C82  EF47  F006         	goto	u570
  1968  000C86  EF45  F006         	goto	u571
  1969  000C8A                     u571:
  1970  000C8A  EF51  F006         	goto	l1500
  1971  000C8E                     u570:
  1972  000C8E  1E04               	comf	(___aldiv@dividend+3)^0,f,c
  1973  000C90  1E03               	comf	(___aldiv@dividend+2)^0,f,c
  1974  000C92  1E02               	comf	(___aldiv@dividend+1)^0,f,c
  1975  000C94  6C01               	negf	___aldiv@dividend^0,c
  1976  000C96  0E00               	movlw	0
  1977  000C98  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
  1978  000C9A  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
  1979  000C9C  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
  1980  000C9E  0E01               	movlw	1
  1981  000CA0  1A0A               	xorwf	___aldiv@sign^0,f,c
  1982  000CA2                     l1500:
  1983  000CA2  0E00               	movlw	0
  1984  000CA4  6E0B               	movwf	___aldiv@quotient^0,c
  1985  000CA6  0E00               	movlw	0
  1986  000CA8  6E0C               	movwf	(___aldiv@quotient+1)^0,c
  1987  000CAA  0E00               	movlw	0
  1988  000CAC  6E0D               	movwf	(___aldiv@quotient+2)^0,c
  1989  000CAE  0E00               	movlw	0
  1990  000CB0  6E0E               	movwf	(___aldiv@quotient+3)^0,c
  1991  000CB2  5005               	movf	___aldiv@divisor^0,w,c
  1992  000CB4  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
  1993  000CB6  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
  1994  000CB8  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
  1995  000CBA  B4D8               	btfsc	status,2,c
  1996  000CBC  EF62  F006         	goto	u581
  1997  000CC0  EF64  F006         	goto	u580
  1998  000CC4                     u581:
  1999  000CC4  EF9A  F006         	goto	l1522
  2000  000CC8                     u580:
  2001  000CC8  0E01               	movlw	1
  2002  000CCA  6E09               	movwf	___aldiv@counter^0,c
  2003  000CCC  EF6E  F006         	goto	l1508
  2004  000CD0                     l1506:
  2005  000CD0  90D8               	bcf	status,0,c
  2006  000CD2  3605               	rlcf	___aldiv@divisor^0,f,c
  2007  000CD4  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
  2008  000CD6  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
  2009  000CD8  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
  2010  000CDA  2A09               	incf	___aldiv@counter^0,f,c
  2011  000CDC                     l1508:
  2012  000CDC  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
  2013  000CDE  EF73  F006         	goto	u591
  2014  000CE2  EF75  F006         	goto	u590
  2015  000CE6                     u591:
  2016  000CE6  EF68  F006         	goto	l1506
  2017  000CEA                     u590:
  2018  000CEA                     l1510:
  2019  000CEA  90D8               	bcf	status,0,c
  2020  000CEC  360B               	rlcf	___aldiv@quotient^0,f,c
  2021  000CEE  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
  2022  000CF0  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
  2023  000CF2  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
  2024  000CF4  5005               	movf	___aldiv@divisor^0,w,c
  2025  000CF6  5C01               	subwf	___aldiv@dividend^0,w,c
  2026  000CF8  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2027  000CFA  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
  2028  000CFC  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2029  000CFE  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
  2030  000D00  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2031  000D02  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
  2032  000D04  A0D8               	btfss	status,0,c
  2033  000D06  EF87  F006         	goto	u601
  2034  000D0A  EF89  F006         	goto	u600
  2035  000D0E                     u601:
  2036  000D0E  EF92  F006         	goto	l1518
  2037  000D12                     u600:
  2038  000D12  5005               	movf	___aldiv@divisor^0,w,c
  2039  000D14  5E01               	subwf	___aldiv@dividend^0,f,c
  2040  000D16  5006               	movf	(___aldiv@divisor+1)^0,w,c
  2041  000D18  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
  2042  000D1A  5007               	movf	(___aldiv@divisor+2)^0,w,c
  2043  000D1C  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
  2044  000D1E  5008               	movf	(___aldiv@divisor+3)^0,w,c
  2045  000D20  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
  2046  000D22  800B               	bsf	___aldiv@quotient^0,0,c
  2047  000D24                     l1518:
  2048  000D24  90D8               	bcf	status,0,c
  2049  000D26  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
  2050  000D28  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
  2051  000D2A  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
  2052  000D2C  3205               	rrcf	___aldiv@divisor^0,f,c
  2053  000D2E  2E09               	decfsz	___aldiv@counter^0,f,c
  2054  000D30  EF75  F006         	goto	l1510
  2055  000D34                     l1522:
  2056  000D34  500A               	movf	___aldiv@sign^0,w,c
  2057  000D36  B4D8               	btfsc	status,2,c
  2058  000D38  EFA0  F006         	goto	u611
  2059  000D3C  EFA2  F006         	goto	u610
  2060  000D40                     u611:
  2061  000D40  EFAA  F006         	goto	l1526
  2062  000D44                     u610:
  2063  000D44  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
  2064  000D46  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
  2065  000D48  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
  2066  000D4A  6C0B               	negf	___aldiv@quotient^0,c
  2067  000D4C  0E00               	movlw	0
  2068  000D4E  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
  2069  000D50  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
  2070  000D52  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
  2071  000D54                     l1526:
  2072  000D54  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  2073  000D58  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  2074  000D5C  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  2075  000D60  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  2076  000D64  0012               	return		;funcret
  2077  000D66                     __end_of___aldiv:
  2078                           	callstack 0
  2079                           
  2080 ;; *************** function _Lcd_Out *****************
  2081 ;; Defined at:
  2082 ;;		line 96 in file "flexlcd.h"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  y               1    wreg     unsigned char 
  2085 ;;  x               1    3[COMRAM] unsigned char 
  2086 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  2087 ;;		 -> str(5), 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  y               1    6[COMRAM] unsigned char 
  2090 ;;  data            1    7[COMRAM] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2100 ;;      Params:         3       0       0       0       0       0       0
  2101 ;;      Locals:         2       0       0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0
  2103 ;;      Totals:         5       0       0       0       0       0       0
  2104 ;;Total ram usage:        5 bytes
  2105 ;; Hardware stack levels used: 1
  2106 ;; Hardware stack levels required when called: 1
  2107 ;; This function calls:
  2108 ;;		_Lcd_Chr_CP
  2109 ;;		_Lcd_Cmd
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text12
  2116  001058                     __ptext12:
  2117                           	callstack 0
  2118  001058                     _Lcd_Out:
  2119                           	callstack 29
  2120                           
  2121                           ;incstack = 0
  2122                           ;Lcd_Out@y stored from wreg
  2123  001058  6E07               	movwf	Lcd_Out@y^0,c
  2124  00105A                     
  2125                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  2126  00105A  EF43  F008         	goto	l1618
  2127  00105E                     l1608:
  2128  00105E  5004               	movf	Lcd_Out@x^0,w,c
  2129  001060  0F80               	addlw	128
  2130  001062  6E08               	movwf	Lcd_Out@data^0,c
  2131  001064  EF56  F008         	goto	l1620
  2132  001068                     l1610:
  2133  001068  5004               	movf	Lcd_Out@x^0,w,c
  2134  00106A  0FC0               	addlw	192
  2135  00106C  6E08               	movwf	Lcd_Out@data^0,c
  2136  00106E  EF56  F008         	goto	l1620
  2137  001072                     l1612:
  2138  001072  5004               	movf	Lcd_Out@x^0,w,c
  2139  001074  0F94               	addlw	148
  2140  001076  6E08               	movwf	Lcd_Out@data^0,c
  2141  001078  EF56  F008         	goto	l1620
  2142  00107C                     l1614:
  2143  00107C  5004               	movf	Lcd_Out@x^0,w,c
  2144  00107E  0FD4               	addlw	212
  2145  001080  6E08               	movwf	Lcd_Out@data^0,c
  2146  001082  EF56  F008         	goto	l1620
  2147  001086                     l1618:
  2148  001086  5007               	movf	Lcd_Out@y^0,w,c
  2149                           
  2150                           ; Switch size 1, requested type "simple"
  2151                           ; Number of cases is 4, Range of values is 1 to 4
  2152                           ; switch strategies available:
  2153                           ; Name         Instructions Cycles
  2154                           ; simple_byte           13     7 (average)
  2155                           ;	Chosen strategy is simple_byte
  2156  001088  0A01               	xorlw	1	; case 1
  2157  00108A  B4D8               	btfsc	status,2,c
  2158  00108C  EF2F  F008         	goto	l1608
  2159  001090  0A03               	xorlw	3	; case 2
  2160  001092  B4D8               	btfsc	status,2,c
  2161  001094  EF34  F008         	goto	l1610
  2162  001098  0A01               	xorlw	1	; case 3
  2163  00109A  B4D8               	btfsc	status,2,c
  2164  00109C  EF39  F008         	goto	l1612
  2165  0010A0  0A07               	xorlw	7	; case 4
  2166  0010A2  B4D8               	btfsc	status,2,c
  2167  0010A4  EF3E  F008         	goto	l1614
  2168  0010A8  EF56  F008         	goto	l1620
  2169  0010AC                     l1620:
  2170                           
  2171                           ;flexlcd.h: 107: Lcd_Cmd(data);
  2172  0010AC  5008               	movf	Lcd_Out@data^0,w,c
  2173  0010AE  EC0F  F005         	call	_Lcd_Cmd
  2174                           
  2175                           ;flexlcd.h: 108: while(*buffer)
  2176  0010B2  EF64  F008         	goto	l1626
  2177  0010B6                     l1622:
  2178                           
  2179                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  2180  0010B6  C005  FFD9         	movff	Lcd_Out@buffer,fsr2l
  2181  0010BA  C006  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  2182  0010BE  50DF               	movf	indf2,w,c
  2183  0010C0  EC75  F004         	call	_Lcd_Chr_CP
  2184  0010C4                     
  2185                           ;flexlcd.h: 111: buffer++;
  2186  0010C4  4A05               	infsnz	Lcd_Out@buffer^0,f,c
  2187  0010C6  2A06               	incf	(Lcd_Out@buffer+1)^0,f,c
  2188  0010C8                     l1626:
  2189  0010C8  C005  FFD9         	movff	Lcd_Out@buffer,fsr2l
  2190  0010CC  C006  FFDA         	movff	Lcd_Out@buffer+1,fsr2h
  2191  0010D0  50DF               	movf	indf2,w,c
  2192  0010D2  A4D8               	btfss	status,2,c
  2193  0010D4  EF6E  F008         	goto	u721
  2194  0010D8  EF70  F008         	goto	u720
  2195  0010DC                     u721:
  2196  0010DC  EF5B  F008         	goto	l1622
  2197  0010E0                     u720:
  2198  0010E0  0012               	return		;funcret
  2199  0010E2                     __end_of_Lcd_Out:
  2200                           	callstack 0
  2201                           
  2202 ;; *************** function _Lcd_Chr_CP *****************
  2203 ;; Defined at:
  2204 ;;		line 138 in file "flexlcd.h"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  data            1    wreg     unsigned char 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  data            1    2[COMRAM] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2218 ;;      Params:         0       0       0       0       0       0       0
  2219 ;;      Locals:         1       0       0       0       0       0       0
  2220 ;;      Temps:          2       0       0       0       0       0       0
  2221 ;;      Totals:         3       0       0       0       0       0       0
  2222 ;;Total ram usage:        3 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_Lcd_Out
  2228 ;;		_Lcd_Out2
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text13
  2233  0008EA                     __ptext13:
  2234                           	callstack 0
  2235  0008EA                     _Lcd_Chr_CP:
  2236                           	callstack 29
  2237                           
  2238                           ;incstack = 0
  2239                           ;Lcd_Chr_CP@data stored from wreg
  2240  0008EA  6E03               	movwf	Lcd_Chr_CP@data^0,c
  2241  0008EC                     
  2242                           ;flexlcd.h: 139: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  2243  0008EC  9284               	bcf	132,1,c	;volatile
  2244  0008EE  8484               	bsf	132,2,c	;volatile
  2245  0008F0                     
  2246                           ;flexlcd.h: 140: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  2247  0008F0  6A01               	clrf	??_Lcd_Chr_CP^0,c
  2248  0008F2  AE03               	btfss	Lcd_Chr_CP@data^0,7,c
  2249  0008F4  D001               	bra	u45
  2250  0008F6  2A01               	incf	??_Lcd_Chr_CP^0,f,c
  2251  0008F8                     u45:
  2252  0008F8  0E01               	movlw	1
  2253  0008FA  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2254  0008FC  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2255  0008FE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2256  000900  5083               	movf	131,w,c	;volatile
  2257  000902  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2258  000904  0B7F               	andlw	-129
  2259  000906  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2260  000908  6E83               	movwf	131,c	;volatile
  2261  00090A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2262  00090E  0E06               	movlw	6
  2263  000910  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  2264  000912                     u55:
  2265  000912  90D8               	bcf	status,0,c
  2266  000914  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2267  000916  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  2268  000918  EF89  F004         	goto	u55
  2269  00091C  0E01               	movlw	1
  2270  00091E  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2271  000920  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2272  000922  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2273  000924  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2274  000926  5083               	movf	131,w,c	;volatile
  2275  000928  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2276  00092A  0BBF               	andlw	-65
  2277  00092C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2278  00092E  6E83               	movwf	131,c	;volatile
  2279                           
  2280                           ;flexlcd.h: 141: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  2281  000930  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2282  000934  0E05               	movlw	5
  2283  000936  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  2284  000938                     u65:
  2285  000938  90D8               	bcf	status,0,c
  2286  00093A  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2287  00093C  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  2288  00093E  EF9C  F004         	goto	u65
  2289  000942  0E01               	movlw	1
  2290  000944  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2291  000946  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2292  000948  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2293  00094A  5083               	movf	131,w,c	;volatile
  2294  00094C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2295  00094E  0BDF               	andlw	-33
  2296  000950  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2297  000952  6E83               	movwf	131,c	;volatile
  2298  000954  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2299  000958  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2300  00095A  0E0F               	movlw	15
  2301  00095C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2302  00095E  0E01               	movlw	1
  2303  000960  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2304  000962  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2305  000964  5083               	movf	131,w,c	;volatile
  2306  000966  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2307  000968  0BEF               	andlw	-17
  2308  00096A  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2309  00096C  6E83               	movwf	131,c	;volatile
  2310  00096E                     
  2311                           ;flexlcd.h: 142: _delay(10);
  2312  00096E  0E03               	movlw	3
  2313  000970                     u877:
  2314  000970  2EE8               	decfsz	wreg,f,c
  2315  000972  D7FE               	bra	u877
  2316  000974  F000               	nop	
  2317  000976                     
  2318                           ;flexlcd.h: 143: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2319  000976  8284               	bsf	132,1,c	;volatile
  2320  000978  0E03               	movlw	3
  2321  00097A                     u887:
  2322  00097A  2EE8               	decfsz	wreg,f,c
  2323  00097C  D7FE               	bra	u887
  2324  00097E  F000               	nop	
  2325  000980  9284               	bcf	132,1,c	;volatile
  2326                           
  2327                           ;flexlcd.h: 144: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  2328  000982  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2329  000986  90D8               	bcf	status,0,c
  2330  000988  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2331  00098A  90D8               	bcf	status,0,c
  2332  00098C  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2333  00098E  90D8               	bcf	status,0,c
  2334  000990  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2335  000992  0E01               	movlw	1
  2336  000994  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2337  000996  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2338  000998  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2339  00099A  5083               	movf	131,w,c	;volatile
  2340  00099C  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2341  00099E  0B7F               	andlw	-129
  2342  0009A0  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2343  0009A2  6E83               	movwf	131,c	;volatile
  2344  0009A4  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2345  0009A8  90D8               	bcf	status,0,c
  2346  0009AA  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2347  0009AC  90D8               	bcf	status,0,c
  2348  0009AE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2349  0009B0  0E01               	movlw	1
  2350  0009B2  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2351  0009B4  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2352  0009B6  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2353  0009B8  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2354  0009BA  5083               	movf	131,w,c	;volatile
  2355  0009BC  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2356  0009BE  0BBF               	andlw	-65
  2357  0009C0  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2358  0009C2  6E83               	movwf	131,c	;volatile
  2359                           
  2360                           ;flexlcd.h: 145: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  2361  0009C4  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2362  0009C8  90D8               	bcf	status,0,c
  2363  0009CA  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  2364  0009CC  0E01               	movlw	1
  2365  0009CE  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2366  0009D0  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2367  0009D2  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  2368  0009D4  5083               	movf	131,w,c	;volatile
  2369  0009D6  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2370  0009D8  0BDF               	andlw	-33
  2371  0009DA  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2372  0009DC  6E83               	movwf	131,c	;volatile
  2373  0009DE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  2374  0009E2  0E01               	movlw	1
  2375  0009E4  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  2376  0009E6  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  2377  0009E8  5083               	movf	131,w,c	;volatile
  2378  0009EA  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2379  0009EC  0BEF               	andlw	-17
  2380  0009EE  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  2381  0009F0  6E83               	movwf	131,c	;volatile
  2382  0009F2                     
  2383                           ;flexlcd.h: 146: _delay(10);
  2384  0009F2  0E03               	movlw	3
  2385  0009F4                     u897:
  2386  0009F4  2EE8               	decfsz	wreg,f,c
  2387  0009F6  D7FE               	bra	u897
  2388  0009F8  F000               	nop	
  2389  0009FA                     
  2390                           ;flexlcd.h: 147: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2391  0009FA  8284               	bsf	132,1,c	;volatile
  2392  0009FC  0E03               	movlw	3
  2393  0009FE                     u907:
  2394  0009FE  2EE8               	decfsz	wreg,f,c
  2395  000A00  D7FE               	bra	u907
  2396  000A02  F000               	nop	
  2397  000A04  9284               	bcf	132,1,c	;volatile
  2398  000A06                     
  2399                           ;flexlcd.h: 148: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long
      +                          )((5500)*(8000000/4000000.0)));
  2400  000A06  0E03               	movlw	3
  2401  000A08                     u917:
  2402  000A08  2EE8               	decfsz	wreg,f,c
  2403  000A0A  D7FE               	bra	u917
  2404  000A0C  F000               	nop	
  2405  000A0E  0E0F               	movlw	15
  2406  000A10  6E01               	movwf	??_Lcd_Chr_CP^0,c
  2407  000A12  0E48               	movlw	72
  2408  000A14                     u927:
  2409  000A14  2EE8               	decfsz	wreg,f,c
  2410  000A16  D7FE               	bra	u927
  2411  000A18  2E01               	decfsz	??_Lcd_Chr_CP^0,f,c
  2412  000A1A  D7FC               	bra	u927
  2413  000A1C  0012               	return		;funcret
  2414  000A1E                     __end_of_Lcd_Chr_CP:
  2415                           	callstack 0
  2416                           
  2417 ;; *************** function _Lcd_Init *****************
  2418 ;; Defined at:
  2419 ;;		line 54 in file "flexlcd.h"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  data            1    4[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2433 ;;      Params:         0       0       0       0       0       0       0
  2434 ;;      Locals:         1       0       0       0       0       0       0
  2435 ;;      Temps:          1       0       0       0       0       0       0
  2436 ;;      Totals:         2       0       0       0       0       0       0
  2437 ;;Total ram usage:        2 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 1
  2440 ;; This function calls:
  2441 ;;		_Lcd_Cmd
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text14
  2448  000B4A                     __ptext14:
  2449                           	callstack 0
  2450  000B4A                     _Lcd_Init:
  2451                           	callstack 29
  2452  000B4A                     
  2453                           ;flexlcd.h: 55: unsigned char data;;flexlcd.h: 56: TRISDbits.TRISD7 = 0;
  2454  000B4A  9E95               	bcf	149,7,c	;volatile
  2455                           
  2456                           ;flexlcd.h: 57: TRISDbits.TRISD6 = 0;
  2457  000B4C  9C95               	bcf	149,6,c	;volatile
  2458                           
  2459                           ;flexlcd.h: 58: TRISDbits.TRISD5 = 0;
  2460  000B4E  9A95               	bcf	149,5,c	;volatile
  2461                           
  2462                           ;flexlcd.h: 59: TRISDbits.TRISD4 = 0;
  2463  000B50  9895               	bcf	149,4,c	;volatile
  2464                           
  2465                           ;flexlcd.h: 60: TRISEbits.TRISE2 = 0;
  2466  000B52  9496               	bcf	150,2,c	;volatile
  2467                           
  2468                           ;flexlcd.h: 61: TRISEbits.TRISE1 = 0;
  2469  000B54  9296               	bcf	150,1,c	;volatile
  2470                           
  2471                           ;flexlcd.h: 62: PORTDbits.RD7 = 0;
  2472  000B56  9E83               	bcf	131,7,c	;volatile
  2473                           
  2474                           ;flexlcd.h: 63: PORTDbits.RD6 = 0;
  2475  000B58  9C83               	bcf	131,6,c	;volatile
  2476                           
  2477                           ;flexlcd.h: 64: PORTDbits.RD5 = 0;
  2478  000B5A  9A83               	bcf	131,5,c	;volatile
  2479                           
  2480                           ;flexlcd.h: 65: PORTDbits.RD4 = 0;
  2481  000B5C  9883               	bcf	131,4,c	;volatile
  2482                           
  2483                           ;flexlcd.h: 66: PORTEbits.RE1 = 0;
  2484  000B5E  9284               	bcf	132,1,c	;volatile
  2485                           
  2486                           ;flexlcd.h: 67: PORTEbits.RE2 = 0;
  2487  000B60  9484               	bcf	132,2,c	;volatile
  2488  000B62                     
  2489                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2490  000B62  0E0F               	movlw	15
  2491  000B64  6E04               	movwf	??_Lcd_Init^0,c
  2492  000B66  0E48               	movlw	72
  2493  000B68                     u937:
  2494  000B68  2EE8               	decfsz	wreg,f,c
  2495  000B6A  D7FE               	bra	u937
  2496  000B6C  2E04               	decfsz	??_Lcd_Init^0,f,c
  2497  000B6E  D7FC               	bra	u937
  2498                           
  2499                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2500  000B70  0E0F               	movlw	15
  2501  000B72  6E04               	movwf	??_Lcd_Init^0,c
  2502  000B74  0E48               	movlw	72
  2503  000B76                     u947:
  2504  000B76  2EE8               	decfsz	wreg,f,c
  2505  000B78  D7FE               	bra	u947
  2506  000B7A  2E04               	decfsz	??_Lcd_Init^0,f,c
  2507  000B7C  D7FC               	bra	u947
  2508                           
  2509                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2510  000B7E  0E0F               	movlw	15
  2511  000B80  6E04               	movwf	??_Lcd_Init^0,c
  2512  000B82  0E48               	movlw	72
  2513  000B84                     u957:
  2514  000B84  2EE8               	decfsz	wreg,f,c
  2515  000B86  D7FE               	bra	u957
  2516  000B88  2E04               	decfsz	??_Lcd_Init^0,f,c
  2517  000B8A  D7FC               	bra	u957
  2518                           
  2519                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2520  000B8C  0E0F               	movlw	15
  2521  000B8E  6E04               	movwf	??_Lcd_Init^0,c
  2522  000B90  0E48               	movlw	72
  2523  000B92                     u967:
  2524  000B92  2EE8               	decfsz	wreg,f,c
  2525  000B94  D7FE               	bra	u967
  2526  000B96  2E04               	decfsz	??_Lcd_Init^0,f,c
  2527  000B98  D7FC               	bra	u967
  2528                           
  2529                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2530  000B9A  0E0F               	movlw	15
  2531  000B9C  6E04               	movwf	??_Lcd_Init^0,c
  2532  000B9E  0E48               	movlw	72
  2533  000BA0                     u977:
  2534  000BA0  2EE8               	decfsz	wreg,f,c
  2535  000BA2  D7FE               	bra	u977
  2536  000BA4  2E04               	decfsz	??_Lcd_Init^0,f,c
  2537  000BA6  D7FC               	bra	u977
  2538                           
  2539                           ;flexlcd.h: 73: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2540  000BA8  0E0F               	movlw	15
  2541  000BAA  6E04               	movwf	??_Lcd_Init^0,c
  2542  000BAC  0E48               	movlw	72
  2543  000BAE                     u987:
  2544  000BAE  2EE8               	decfsz	wreg,f,c
  2545  000BB0  D7FE               	bra	u987
  2546  000BB2  2E04               	decfsz	??_Lcd_Init^0,f,c
  2547  000BB4  D7FC               	bra	u987
  2548  000BB6                     
  2549                           ;flexlcd.h: 74: for(data = 1; data < 4; data ++)
  2550  000BB6  0E01               	movlw	1
  2551  000BB8  6E05               	movwf	Lcd_Init@data^0,c
  2552  000BBA                     l135:
  2553                           
  2554                           ;flexlcd.h: 75: {;flexlcd.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  2555  000BBA  9E83               	bcf	131,7,c	;volatile
  2556  000BBC  9C83               	bcf	131,6,c	;volatile
  2557  000BBE  8A83               	bsf	131,5,c	;volatile
  2558  000BC0  8883               	bsf	131,4,c	;volatile
  2559  000BC2  9284               	bcf	132,1,c	;volatile
  2560                           
  2561                           ;flexlcd.h: 77: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  2562  000BC4  9484               	bcf	132,2,c	;volatile
  2563  000BC6  9E83               	bcf	131,7,c	;volatile
  2564  000BC8  9C83               	bcf	131,6,c	;volatile
  2565  000BCA  8A83               	bsf	131,5,c	;volatile
  2566  000BCC  8883               	bsf	131,4,c	;volatile
  2567                           
  2568                           ;flexlcd.h: 78: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  2569  000BCE  8284               	bsf	132,1,c	;volatile
  2570  000BD0  9484               	bcf	132,2,c	;volatile
  2571  000BD2                     
  2572                           ;flexlcd.h: 79: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2573  000BD2  0E03               	movlw	3
  2574  000BD4                     u997:
  2575  000BD4  2EE8               	decfsz	wreg,f,c
  2576  000BD6  D7FE               	bra	u997
  2577  000BD8  F000               	nop	
  2578  000BDA                     
  2579                           ;flexlcd.h: 80: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  2580  000BDA  9E83               	bcf	131,7,c	;volatile
  2581  000BDC  9C83               	bcf	131,6,c	;volatile
  2582  000BDE  8A83               	bsf	131,5,c	;volatile
  2583  000BE0  8883               	bsf	131,4,c	;volatile
  2584  000BE2  9284               	bcf	132,1,c	;volatile
  2585  000BE4                     
  2586                           ;flexlcd.h: 81: PORTEbits.RE2 = 0;
  2587  000BE4  9484               	bcf	132,2,c	;volatile
  2588                           
  2589                           ;flexlcd.h: 82: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2590  000BE6  0E0F               	movlw	15
  2591  000BE8  6E04               	movwf	??_Lcd_Init^0,c
  2592  000BEA  0E48               	movlw	72
  2593  000BEC                     u1007:
  2594  000BEC  2EE8               	decfsz	wreg,f,c
  2595  000BEE  D7FE               	bra	u1007
  2596  000BF0  2E04               	decfsz	??_Lcd_Init^0,f,c
  2597  000BF2  D7FC               	bra	u1007
  2598  000BF4  2A05               	incf	Lcd_Init@data^0,f,c
  2599  000BF6  0E03               	movlw	3
  2600  000BF8  6405               	cpfsgt	Lcd_Init@data^0,c
  2601  000BFA  EF01  F006         	goto	u321
  2602  000BFE  EF03  F006         	goto	u320
  2603  000C02                     u321:
  2604  000C02  EFDD  F005         	goto	l135
  2605  000C06                     u320:
  2606  000C06                     
  2607                           ;flexlcd.h: 83: };flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2608  000C06  9E83               	bcf	131,7,c	;volatile
  2609  000C08  9C83               	bcf	131,6,c	;volatile
  2610  000C0A  8A83               	bsf	131,5,c	;volatile
  2611  000C0C  9883               	bcf	131,4,c	;volatile
  2612  000C0E  9284               	bcf	132,1,c	;volatile
  2613  000C10  9484               	bcf	132,2,c	;volatile
  2614                           
  2615                           ;flexlcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  2616  000C12  9E83               	bcf	131,7,c	;volatile
  2617  000C14  9C83               	bcf	131,6,c	;volatile
  2618  000C16  8A83               	bsf	131,5,c	;volatile
  2619  000C18  9883               	bcf	131,4,c	;volatile
  2620  000C1A  8284               	bsf	132,1,c	;volatile
  2621  000C1C  9484               	bcf	132,2,c	;volatile
  2622  000C1E                     
  2623                           ;flexlcd.h: 86: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2624  000C1E  0E03               	movlw	3
  2625  000C20                     u1017:
  2626  000C20  2EE8               	decfsz	wreg,f,c
  2627  000C22  D7FE               	bra	u1017
  2628  000C24  F000               	nop	
  2629  000C26                     
  2630                           ;flexlcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2631  000C26  9E83               	bcf	131,7,c	;volatile
  2632  000C28  9C83               	bcf	131,6,c	;volatile
  2633  000C2A  8A83               	bsf	131,5,c	;volatile
  2634  000C2C  9883               	bcf	131,4,c	;volatile
  2635  000C2E  9284               	bcf	132,1,c	;volatile
  2636  000C30  9484               	bcf	132,2,c	;volatile
  2637                           
  2638                           ;flexlcd.h: 88: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2639  000C32  0E0F               	movlw	15
  2640  000C34  6E04               	movwf	??_Lcd_Init^0,c
  2641  000C36  0E48               	movlw	72
  2642  000C38                     u1027:
  2643  000C38  2EE8               	decfsz	wreg,f,c
  2644  000C3A  D7FE               	bra	u1027
  2645  000C3C  2E04               	decfsz	??_Lcd_Init^0,f,c
  2646  000C3E  D7FC               	bra	u1027
  2647  000C40  0E28               	movlw	40
  2648  000C42  EC0F  F005         	call	_Lcd_Cmd
  2649  000C46  0E10               	movlw	16
  2650  000C48  EC0F  F005         	call	_Lcd_Cmd
  2651  000C4C  0E01               	movlw	1
  2652  000C4E  EC0F  F005         	call	_Lcd_Cmd
  2653  000C52  0E0F               	movlw	15
  2654  000C54  EC0F  F005         	call	_Lcd_Cmd
  2655  000C58  0012               	return		;funcret
  2656  000C5A                     __end_of_Lcd_Init:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _Lcd_Cmd *****************
  2660 ;; Defined at:
  2661 ;;		line 152 in file "flexlcd.h"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  data            1    wreg     unsigned char 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  data            1    2[COMRAM] unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         0       0       0       0       0       0       0
  2676 ;;      Locals:         1       0       0       0       0       0       0
  2677 ;;      Temps:          2       0       0       0       0       0       0
  2678 ;;      Totals:         3       0       0       0       0       0       0
  2679 ;;Total ram usage:        3 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_Lcd_Init
  2685 ;;		_Lcd_Out
  2686 ;;		_main
  2687 ;;		_Lcd_Out2
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text15
  2692  000A1E                     __ptext15:
  2693                           	callstack 0
  2694  000A1E                     _Lcd_Cmd:
  2695                           	callstack 29
  2696                           
  2697                           ;incstack = 0
  2698                           ;Lcd_Cmd@data stored from wreg
  2699  000A1E  6E03               	movwf	Lcd_Cmd@data^0,c
  2700  000A20                     
  2701                           ;flexlcd.h: 153: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  2702  000A20  9284               	bcf	132,1,c	;volatile
  2703  000A22  9484               	bcf	132,2,c	;volatile
  2704  000A24                     
  2705                           ;flexlcd.h: 154: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  2706  000A24  6A01               	clrf	??_Lcd_Cmd^0,c
  2707  000A26  AE03               	btfss	Lcd_Cmd@data^0,7,c
  2708  000A28  D001               	bra	u15
  2709  000A2A  2A01               	incf	??_Lcd_Cmd^0,f,c
  2710  000A2C                     u15:
  2711  000A2C  0E01               	movlw	1
  2712  000A2E  1601               	andwf	??_Lcd_Cmd^0,f,c
  2713  000A30  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2714  000A32  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2715  000A34  5083               	movf	131,w,c	;volatile
  2716  000A36  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2717  000A38  0B7F               	andlw	-129
  2718  000A3A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2719  000A3C  6E83               	movwf	131,c	;volatile
  2720  000A3E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2721  000A42  0E06               	movlw	6
  2722  000A44  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  2723  000A46                     u25:
  2724  000A46  90D8               	bcf	status,0,c
  2725  000A48  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2726  000A4A  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  2727  000A4C  EF23  F005         	goto	u25
  2728  000A50  0E01               	movlw	1
  2729  000A52  1601               	andwf	??_Lcd_Cmd^0,f,c
  2730  000A54  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2731  000A56  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2732  000A58  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2733  000A5A  5083               	movf	131,w,c	;volatile
  2734  000A5C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2735  000A5E  0BBF               	andlw	-65
  2736  000A60  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2737  000A62  6E83               	movwf	131,c	;volatile
  2738                           
  2739                           ;flexlcd.h: 155: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  2740  000A64  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2741  000A68  0E05               	movlw	5
  2742  000A6A  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  2743  000A6C                     u35:
  2744  000A6C  90D8               	bcf	status,0,c
  2745  000A6E  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2746  000A70  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  2747  000A72  EF36  F005         	goto	u35
  2748  000A76  0E01               	movlw	1
  2749  000A78  1601               	andwf	??_Lcd_Cmd^0,f,c
  2750  000A7A  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2751  000A7C  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2752  000A7E  5083               	movf	131,w,c	;volatile
  2753  000A80  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2754  000A82  0BDF               	andlw	-33
  2755  000A84  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2756  000A86  6E83               	movwf	131,c	;volatile
  2757  000A88  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2758  000A8C  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2759  000A8E  0E0F               	movlw	15
  2760  000A90  1601               	andwf	??_Lcd_Cmd^0,f,c
  2761  000A92  0E01               	movlw	1
  2762  000A94  1601               	andwf	??_Lcd_Cmd^0,f,c
  2763  000A96  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2764  000A98  5083               	movf	131,w,c	;volatile
  2765  000A9A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2766  000A9C  0BEF               	andlw	-17
  2767  000A9E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2768  000AA0  6E83               	movwf	131,c	;volatile
  2769  000AA2                     
  2770                           ;flexlcd.h: 156: _delay(10);
  2771  000AA2  0E03               	movlw	3
  2772  000AA4                     u1037:
  2773  000AA4  2EE8               	decfsz	wreg,f,c
  2774  000AA6  D7FE               	bra	u1037
  2775  000AA8  F000               	nop	
  2776  000AAA                     
  2777                           ;flexlcd.h: 157: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2778  000AAA  8284               	bsf	132,1,c	;volatile
  2779  000AAC  0E03               	movlw	3
  2780  000AAE                     u1047:
  2781  000AAE  2EE8               	decfsz	wreg,f,c
  2782  000AB0  D7FE               	bra	u1047
  2783  000AB2  F000               	nop	
  2784  000AB4  9284               	bcf	132,1,c	;volatile
  2785                           
  2786                           ;flexlcd.h: 158: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  2787  000AB6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2788  000ABA  90D8               	bcf	status,0,c
  2789  000ABC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2790  000ABE  90D8               	bcf	status,0,c
  2791  000AC0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2792  000AC2  90D8               	bcf	status,0,c
  2793  000AC4  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2794  000AC6  0E01               	movlw	1
  2795  000AC8  1601               	andwf	??_Lcd_Cmd^0,f,c
  2796  000ACA  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2797  000ACC  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2798  000ACE  5083               	movf	131,w,c	;volatile
  2799  000AD0  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2800  000AD2  0B7F               	andlw	-129
  2801  000AD4  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2802  000AD6  6E83               	movwf	131,c	;volatile
  2803  000AD8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2804  000ADC  90D8               	bcf	status,0,c
  2805  000ADE  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2806  000AE0  90D8               	bcf	status,0,c
  2807  000AE2  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2808  000AE4  0E01               	movlw	1
  2809  000AE6  1601               	andwf	??_Lcd_Cmd^0,f,c
  2810  000AE8  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2811  000AEA  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2812  000AEC  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2813  000AEE  5083               	movf	131,w,c	;volatile
  2814  000AF0  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2815  000AF2  0BBF               	andlw	-65
  2816  000AF4  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2817  000AF6  6E83               	movwf	131,c	;volatile
  2818                           
  2819                           ;flexlcd.h: 159: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  2820  000AF8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2821  000AFC  90D8               	bcf	status,0,c
  2822  000AFE  3201               	rrcf	??_Lcd_Cmd^0,f,c
  2823  000B00  0E01               	movlw	1
  2824  000B02  1601               	andwf	??_Lcd_Cmd^0,f,c
  2825  000B04  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2826  000B06  4601               	rlncf	??_Lcd_Cmd^0,f,c
  2827  000B08  5083               	movf	131,w,c	;volatile
  2828  000B0A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2829  000B0C  0BDF               	andlw	-33
  2830  000B0E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2831  000B10  6E83               	movwf	131,c	;volatile
  2832  000B12  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  2833  000B16  0E01               	movlw	1
  2834  000B18  1601               	andwf	??_Lcd_Cmd^0,f,c
  2835  000B1A  3A01               	swapf	??_Lcd_Cmd^0,f,c
  2836  000B1C  5083               	movf	131,w,c	;volatile
  2837  000B1E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2838  000B20  0BEF               	andlw	-17
  2839  000B22  1801               	xorwf	??_Lcd_Cmd^0,w,c
  2840  000B24  6E83               	movwf	131,c	;volatile
  2841  000B26                     
  2842                           ;flexlcd.h: 160: _delay(10);
  2843  000B26  0E03               	movlw	3
  2844  000B28                     u1057:
  2845  000B28  2EE8               	decfsz	wreg,f,c
  2846  000B2A  D7FE               	bra	u1057
  2847  000B2C  F000               	nop	
  2848  000B2E                     
  2849                           ;flexlcd.h: 161: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  2850  000B2E  8284               	bsf	132,1,c	;volatile
  2851  000B30  0E03               	movlw	3
  2852  000B32                     u1067:
  2853  000B32  2EE8               	decfsz	wreg,f,c
  2854  000B34  D7FE               	bra	u1067
  2855  000B36  F000               	nop	
  2856  000B38  9284               	bcf	132,1,c	;volatile
  2857  000B3A                     
  2858                           ;flexlcd.h: 162: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  2859  000B3A  0E0F               	movlw	15
  2860  000B3C  6E01               	movwf	??_Lcd_Cmd^0,c
  2861  000B3E  0E48               	movlw	72
  2862  000B40                     u1077:
  2863  000B40  2EE8               	decfsz	wreg,f,c
  2864  000B42  D7FE               	bra	u1077
  2865  000B44  2E01               	decfsz	??_Lcd_Cmd^0,f,c
  2866  000B46  D7FC               	bra	u1077
  2867  000B48  0012               	return		;funcret
  2868  000B4A                     __end_of_Lcd_Cmd:
  2869                           	callstack 0
  2870                           
  2871                           	psect	rparam
  2872  0000                     
  2873                           	psect	idloc
  2874                           
  2875                           ;Config register IDLOC0 @ 0x200000
  2876                           ;	unspecified, using default values
  2877  200000                     	org	2097152
  2878  200000  FF                 	db	255
  2879                           
  2880                           ;Config register IDLOC1 @ 0x200001
  2881                           ;	unspecified, using default values
  2882  200001                     	org	2097153
  2883  200001  FF                 	db	255
  2884                           
  2885                           ;Config register IDLOC2 @ 0x200002
  2886                           ;	unspecified, using default values
  2887  200002                     	org	2097154
  2888  200002  FF                 	db	255
  2889                           
  2890                           ;Config register IDLOC3 @ 0x200003
  2891                           ;	unspecified, using default values
  2892  200003                     	org	2097155
  2893  200003  FF                 	db	255
  2894                           
  2895                           ;Config register IDLOC4 @ 0x200004
  2896                           ;	unspecified, using default values
  2897  200004                     	org	2097156
  2898  200004  FF                 	db	255
  2899                           
  2900                           ;Config register IDLOC5 @ 0x200005
  2901                           ;	unspecified, using default values
  2902  200005                     	org	2097157
  2903  200005  FF                 	db	255
  2904                           
  2905                           ;Config register IDLOC6 @ 0x200006
  2906                           ;	unspecified, using default values
  2907  200006                     	org	2097158
  2908  200006  FF                 	db	255
  2909                           
  2910                           ;Config register IDLOC7 @ 0x200007
  2911                           ;	unspecified, using default values
  2912  200007                     	org	2097159
  2913  200007  FF                 	db	255
  2914                           
  2915                           	psect	config
  2916                           
  2917                           ; Padding undefined space
  2918  300000                     	org	3145728
  2919  300000  FF                 	db	255
  2920                           
  2921                           ;Config register CONFIG1H @ 0x300001
  2922                           ;	Oscillator Selection bits
  2923                           ;	OSC = HS, HS oscillator
  2924                           ;	Fail-Safe Clock Monitor Enable bit
  2925                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2926                           ;	Internal/External Oscillator Switchover bit
  2927                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2928  300001                     	org	3145729
  2929  300001  02                 	db	2
  2930                           
  2931                           ;Config register CONFIG2L @ 0x300002
  2932                           ;	Power-up Timer Enable bit
  2933                           ;	PWRT = OFF, PWRT disabled
  2934                           ;	Brown-out Reset Enable bits
  2935                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2936                           ;	Brown Out Reset Voltage bits
  2937                           ;	BORV = 3, Minimum setting
  2938  300002                     	org	3145730
  2939  300002  1F                 	db	31
  2940                           
  2941                           ;Config register CONFIG2H @ 0x300003
  2942                           ;	Watchdog Timer Enable bit
  2943                           ;	WDT = ON, WDT enabled
  2944                           ;	Watchdog Timer Postscale Select bits
  2945                           ;	WDTPS = 32768, 1:32768
  2946  300003                     	org	3145731
  2947  300003  1F                 	db	31
  2948                           
  2949                           ; Padding undefined space
  2950  300004                     	org	3145732
  2951  300004  FF                 	db	255
  2952                           
  2953                           ;Config register CONFIG3H @ 0x300005
  2954                           ;	CCP2 MUX bit
  2955                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2956                           ;	PORTB A/D Enable bit
  2957                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2958                           ;	Low-Power Timer1 Oscillator Enable bit
  2959                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2960                           ;	MCLR Pin Enable bit
  2961                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2962  300005                     	org	3145733
  2963  300005  81                 	db	129
  2964                           
  2965                           ;Config register CONFIG4L @ 0x300006
  2966                           ;	Stack Full/Underflow Reset Enable bit
  2967                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2968                           ;	Single-Supply ICSP Enable bit
  2969                           ;	LVP = ON, Single-Supply ICSP enabled
  2970                           ;	Extended Instruction Set Enable bit
  2971                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2972                           ;	Background Debugger Enable bit
  2973                           ;	DEBUG = 0x1, unprogrammed default
  2974  300006                     	org	3145734
  2975  300006  85                 	db	133
  2976                           
  2977                           ; Padding undefined space
  2978  300007                     	org	3145735
  2979  300007  FF                 	db	255
  2980                           
  2981                           ;Config register CONFIG5L @ 0x300008
  2982                           ;	Code Protection bit
  2983                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2984                           ;	Code Protection bit
  2985                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2986                           ;	Code Protection bit
  2987                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2988                           ;	Code Protection bit
  2989                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2990  300008                     	org	3145736
  2991  300008  0F                 	db	15
  2992                           
  2993                           ;Config register CONFIG5H @ 0x300009
  2994                           ;	Boot Block Code Protection bit
  2995                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2996                           ;	Data EEPROM Code Protection bit
  2997                           ;	CPD = OFF, Data EEPROM not code-protected
  2998  300009                     	org	3145737
  2999  300009  C0                 	db	192
  3000                           
  3001                           ;Config register CONFIG6L @ 0x30000A
  3002                           ;	Write Protection bit
  3003                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3004                           ;	Write Protection bit
  3005                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3006                           ;	Write Protection bit
  3007                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3008                           ;	Write Protection bit
  3009                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3010  30000A                     	org	3145738
  3011  30000A  0F                 	db	15
  3012                           
  3013                           ;Config register CONFIG6H @ 0x30000B
  3014                           ;	Configuration Register Write Protection bit
  3015                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3016                           ;	Boot Block Write Protection bit
  3017                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3018                           ;	Data EEPROM Write Protection bit
  3019                           ;	WRTD = OFF, Data EEPROM not write-protected
  3020  30000B                     	org	3145739
  3021  30000B  E0                 	db	224
  3022                           
  3023                           ;Config register CONFIG7L @ 0x30000C
  3024                           ;	Table Read Protection bit
  3025                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3026                           ;	Table Read Protection bit
  3027                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3028                           ;	Table Read Protection bit
  3029                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3030                           ;	Table Read Protection bit
  3031                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3032  30000C                     	org	3145740
  3033  30000C  0F                 	db	15
  3034                           
  3035                           ;Config register CONFIG7H @ 0x30000D
  3036                           ;	Boot Block Table Read Protection bit
  3037                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3038  30000D                     	org	3145741
  3039  30000D  40                 	db	64
  3040                           tosu	equ	0xFFF
  3041                           tosh	equ	0xFFE
  3042                           tosl	equ	0xFFD
  3043                           stkptr	equ	0xFFC
  3044                           pclatu	equ	0xFFB
  3045                           pclath	equ	0xFFA
  3046                           pcl	equ	0xFF9
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           indf0	equ	0xFEF
  3054                           postinc0	equ	0xFEE
  3055                           postdec0	equ	0xFED
  3056                           preinc0	equ	0xFEC
  3057                           plusw0	equ	0xFEB
  3058                           fsr0h	equ	0xFEA
  3059                           fsr0l	equ	0xFE9
  3060                           wreg	equ	0xFE8
  3061                           indf1	equ	0xFE7
  3062                           postinc1	equ	0xFE6
  3063                           postdec1	equ	0xFE5
  3064                           preinc1	equ	0xFE4
  3065                           plusw1	equ	0xFE3
  3066                           fsr1h	equ	0xFE2
  3067                           fsr1l	equ	0xFE1
  3068                           bsr	equ	0xFE0
  3069                           indf2	equ	0xFDF
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           preinc2	equ	0xFDC
  3073                           plusw2	equ	0xFDB
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    10
    Data        2
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     33      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> str(COMRAM[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 5
		 -> str(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _PWM1_Set_Duty->___lldiv
    ___lldiv->___lmul
    _PWM1_Init->___aldiv
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5383
                                             31 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                          _PWM1_Init
                      _PWM1_Set_Duty
                         _PWM1_Start
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    3068
                                             12 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     903
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     906
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _PWM1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Set_Duty                                        5     5      0     751
                                             25 COMRAM     5     5      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM1_Init                                            8     6      2     661
                                             14 COMRAM     8     6      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     573
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _PWM1_Init
     ___aldiv
   _PWM1_Set_Duty
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _PWM1_Start
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     21      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      15        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Nov 24 18:08:31 2021

                     l60 12A0                       l54 0E56                       l63 12AE  
                     l57 1290                       l66 1056                       l59 129E  
                     u15 0A2C                       u25 0A46                       u35 0A6C  
                     u45 08F8        PWM1_Set_Duty@temp 001D                       u55 0912  
                     u65 0938      ___wmul@multiplicand 0003                      l221 084E  
                    l150 10E0                      l135 0BBA                      l311 0D64  
                    l136 0C06                      l232 12D4                      l137 0C58  
                    l243 11AE                      l244 11BE                      l180 0EC2  
                    l229 08E8                      l166 0A1C                      l169 0B48  
                    l266 0FC4                      l259 0FB4                      l711 114C  
                    l721 121A                      l718 1154                      l728 1222  
                    l990 0AAC                      l982 0A20                      l992 0AB4  
                    l984 0A24                      l896 1254                      l994 0B26  
                    l986 0AA2                      l996 0B2E                      l988 0AAA  
                    l998 0B30                      u300 129E                      u301 129A  
                    u310 12AE                      u311 12AA                      u320 0C06  
                    u321 0C02                      u500 124A                      u501 1246  
                    u510 1174                      _PR2 000FCB                      u511 1170  
                    u600 0D12                      u520 11AE                      u601 0D0E  
                    u521 11AA                      u610 0D44                      u530 0F48  
                    u611 0D40                      u531 0F44                      u700 0E02  
                    u540 0F6A                      u620 10FC                      u701 0DFE  
                    u541 0F66                      u621 10F8                      u550 0F92  
                    u630 111A                      u551 0F8E                      u631 1116  
                    u720 10E0                      u560 0C6C                      u640 1136  
                    u800 07E8                      u721 10DC                      u561 0C68  
                    u641 1132                      u801 07E4                      u570 0C8E  
                    u650 11D2                      u490 123A                      u810 0810  
                    u730 0630                      u571 0C8A                      u715 0E3A  
                    u651 11CE                      u491 1236                      u811 080C  
                    u731 062C                      u580 0CC8                      u660 11F0  
                    u820 0826                      u740 0690                      u581 0CC4  
                    u661 11EC                      u821 0822                      u741 068C  
                    u590 0CEA                      u670 1206                      u830 084E  
                    u750 06FE                      u591 0CE6                      u671 1202  
                    u831 084A                      u751 06FA                      u840 08BA  
                    u760 0778                      u841 08B6                      u761 0774  
                    u690 0DD2                      u850 08DC                      u770 0790  
                    u907 09FE                      u691 0DCE                      u851 08D8  
                    u771 078C                      u780 07B4                      u917 0A08  
                    u685 0D96                      u781 07B0                      u790 07D6  
                    u927 0A14                      u791 07D2                      u937 0B68  
                    u947 0B76                      u867 0F0C                      u957 0B84  
                    u877 0970                      u967 0B92                      u887 097A  
                    u977 0BA0                      u897 09F4                      u987 0BAE  
                    u997 0BD4                      _str 0024                      wreg 000FE8  
                   l1000 0B38                     l1002 0B3A                     l1010 0976  
                   l1020 09FC                     l1012 0978                     l1004 08EC  
                   l1022 0A04                     l1014 0980                     l1006 08F0  
                   l1024 0A06                     l1016 09F2                     l1008 096E  
                   l1210 0BB6                     l1026 0A0E                     l1018 09FA  
                   l1220 0BDC                     l1230 0BF4                     l1222 0BDE  
                   l1206 0B4A                     l1240 0C2C                     l1232 0C1E  
                   l1224 0BE0                     l1216 0BD2                     l1208 0B62  
                   l1250 0C46                     l1242 0C2E                     l1234 0C26  
                   l1226 0BE2                     l1218 0BDA                     l1260 0C52  
                   l1252 0C46                     l1244 0C30                     l1236 0C28  
                   l1228 0BE4                     l1500 0CA2                     l1254 0C4C  
                   l1246 0C40                     l1238 0C2A                     l1510 0CEA  
                   l1502 0CB2                     l1256 0C4C                     l1248 0C40  
                   l1520 0D2E                     l1512 0CF4                     l1504 0CC8  
                   l1600 0FC8                     l1192 1284                     l1440 123A  
                   l1258 0C52                     l1610 1068                     l1514 0D12  
                   l1506 0CD0                     l1522 0D34                     l1602 102E  
                   l1194 1288                     l1530 10E2                     l1450 12CC  
                   l1442 124A                     l1612 1072                     l1620 10AC  
                   l1524 0D44                     l1516 0D22                     l1508 0CDC  
                   l1460 1184                     l1604 1046                     l1196 128C  
                   l1540 111A                     l1532 10EA                     l1444 124E  
                   l1436 1226                     l1700 0832                     l1622 10B6  
                   l1614 107C                     l1606 105A                     l1526 0D54  
                   l1518 0D24                     l1470 0F50                     l1462 118E  
                   l1454 1156                     l1198 128E                     l1550 1146  
                   l1542 1120                     l1534 10FC                     l1438 122A  
                   l1710 08A8                     l1702 0836                     l1630 061E  
                   l1624 10C4                     l1608 105E                     l1480 0FA2  
                   l1472 0F5C                     l1464 0F22                     l1456 1166  
                   l1544 1136                     l1536 1104                     l1560 11F0  
                   l1552 11C0                     l1448 12B0                     l1704 0856  
                   l1632 0630                     l1712 08BA                     l1720 0E60  
                   l1626 10C8                     l1618 1086                     l1490 0C6C  
                   l1570 0D6A                     l1482 0FA4                     l1474 0F6A  
                   l1466 0F32                     l1458 1174                     l1546 113E  
                   l1538 110C                     l1562 1206                     l1554 11D2  
                   l1706 0898                     l1714 08DC                     l1650 06B4  
                   l1642 065A                     l1634 063C                     l1730 0EBE  
                   l1722 0E6E                     l1492 0C7C                     l1580 0D78  
                   l1572 0D6C                     l1484 0FAE                     l1476 0F74  
                   l1468 0F48                     l1548 1140                     l1564 120E  
                   l1556 11DA                     l1708 08A4                     l1652 06DC  
                   l1660 070A                     l1644 0672                     l1636 0644  
                   l1628 0612                     l1740 0EF0                     l1732 0EC4  
                   l1724 0EA8                     l1494 0C80                     l1486 0C5A  
                   l1590 0E02                     l1582 0DC2                     l1574 0D6E  
                   l1478 0F92                     l1566 1214                     l1558 11E2  
                   l1662 0732                     l1654 06E0                     l1646 0690  
                   l1638 0654                     l1742 0F02                     l1734 0ECA  
                   l1726 0EAC                     l1718 0E58                     l1496 0C8E  
                   l1488 0C5E                     l1592 0E0A                     l1584 0DD2  
                   l1576 0D70                     l1568 0D66                     l1680 0790  
                   l1672 074E                     l1664 0742                     l1656 0702  
                   l1648 0698                     l1736 0ED0                     l1728 0EB2  
                   l1498 0C9E                     l1594 0E2A                     l1586 0DD6  
                   l1578 0D76                     l1690 07E8                     l1682 07B4  
                   l1666 074A                     l1738 0ED4                     l1596 0E4A  
                   l1588 0DDE                     l1692 07F4                     l1684 07C0  
                   l1676 077C                     l1598 0E52                     l1694 07F8  
                   l1686 07C8                     l1678 077E                     l1688 07D6  
                   l1696 0814                     l1698 0826                     STR_1 060B  
                   u1007 0BEC                     u1017 0C20                     u1027 0C38  
                   u1037 0AA4                     u1047 0AAE                     u1057 0B28  
                   u1067 0B32                     u1077 0B40                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   _LATE 000F8D                     _main 0E58                     _duty 0029  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
        __end_of_Lcd_Cmd 0B4A          __end_of_Lcd_Out 10E2             ___param_bank 000000  
             _Lcd_Chr_CP 08EA          __end_of___aldiv 0D66                    ?_main 0001  
        __end_of___lldiv 0FC6                    _T1CON 000FCD          __end_of___lwdiv 1156  
        __end_of___lwmod 1224                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96      ___lmul@multiplicand 0005       __size_of_PWM1_Init 00F2  
            ?_PWM1_Start 0001          __end_of_dpowers 060B                    _count 0022  
        __end_of_isdigit 1256                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 08EA         __end_of_Lcd_Init 0C5A          __initialization 1256  
           __end_of_main 0F22                   ??_main 0020            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR1L 000FBE  
              ??_Lcd_Cmd 0001                ??_Lcd_Out 0007        __end_of_PWM1_Init 0E58  
                 ___lmul 1156              ?_Lcd_Chr_CP 0001                ??___aldiv 0009  
                 ___wmul 12B0      __size_of_PWM1_Start 002C                ??___lldiv 0015  
              ??___lwdiv 0005                ??___lwmod 000C                   clear_0 1274  
                 isa$std 000001             __pdataCOMRAM 0029                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0013               __accesstop 0080  
__end_of__initialization 127A            ___rparam_used 000001           __pcstackCOMRAM 0001  
  __end_of_PWM1_Set_Duty 1058                ?_Lcd_Init 0001             sprintf@width 001D  
    __size_of_Lcd_Chr_CP 0134                  ?___lmul 0001                  ?___wmul 0001  
                _CCP1CON 000FBD           ___lmul@product 0009             ??_PWM1_Start 0001  
             ??_Lcd_Init 0004                  _Lcd_Cmd 0A1E                  _Lcd_Out 1058  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 0C5A  
        __size_of___lmul 006A                  ___lldiv 0F22          __size_of___wmul 0026  
                ___lwdiv 10E2                  ___lwmod 11C0       __end_of_PWM1_Start 12B0  
           __psmallconst 0600                  __pcinit 1256                  __ramtop 0600  
                __ptext0 0E58                  __ptext1 0612                  __ptext2 1224  
                __ptext3 12B0                  __ptext4 11C0                  __ptext5 10E2  
                __ptext6 1284                  __ptext7 0FC6                  __ptext8 1156  
                __ptext9 0F22                  _dpowers 0601                _T2CONbits 000FCA  
                _isdigit 1224         ___aldiv@dividend 0001                  _sprintf 0612  
   end_of_initialization 127A            __Lmediumconst 0000          ___lldiv@divisor 0011  
        ___lldiv@counter 0019         ___aldiv@quotient 000B             ??_Lcd_Chr_CP 0001  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _PWM1_Init 0D66                _PORTCbits 000F82                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISCbits 000F94                _TRISDbits 000F95  
              _TRISEbits 000F96           PWM1_Set_Duty@d 001C       __end_of_Lcd_Chr_CP 0A1E  
         __end_of___lmul 11C0           __end_of___wmul 12D6            __pidataCOMRAM 12D6  
             ?_PWM1_Init 000F      start_initialization 1256            Lcd_Out@buffer 0005  
      __size_of_Lcd_Init 0110                 ??___lmul 0009                 ??___wmul 0005  
            __pbssCOMRAM 0022             _isdigit$1229 0002   __size_of_PWM1_Set_Duty 0092  
               ?_Lcd_Cmd 0001              sprintf@flag 0019                 ?_Lcd_Out 0004  
            sprintf@prec 001C         ___lwdiv@dividend 0001                 ?___aldiv 0001  
               ?___lldiv 000D                 ?___lwdiv 0001                 ?___lwmod 0008  
            ??_PWM1_Init 0011              __smallconst 0600                 ?_isdigit 0001  
       ___lwdiv@quotient 0005                 ?_sprintf 000D               PWM1_Init@f 000F  
        ___aldiv@divisor 0005          ___aldiv@counter 0009           ___wmul@product 0005  
          PWM1_Init@temp 0015                 _PIR1bits 000F9E                 Lcd_Out@x 0004  
               Lcd_Out@y 0007            _PWM1_Set_Duty 0FC6             Lcd_Init@data 0005  
             _ADCON0bits 000FC2        ___wmul@multiplier 0001                 _Lcd_Init 0B4A  
      ___lmul@multiplier 0001              _INTCON2bits 000FF1         __size_of_Lcd_Cmd 012C  
       __size_of_Lcd_Out 008A                 __Hrparam 0000                 __Lrparam 0000  
         ?_PWM1_Set_Duty 0001         __size_of___aldiv 010C         __size_of___lldiv 00A4  
       __size_of___lwdiv 0074         __size_of___lwmod 0064               sprintf@val 001A  
       __size_of_isdigit 0032           Lcd_Chr_CP@data 0003          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 __ptext10 0D66                 __ptext11 0C5A  
               __ptext12 1058                 __ptext13 08EA                 __ptext14 0B4A  
               __ptext15 0A1E         __size_of_sprintf 02D8              Lcd_Cmd@data 0003  
          __size_of_main 00CA                 isa$xinst 000000              Lcd_Out@data 0008  
               isdigit@c 0003                sprintf@ap 0017                sprintf@sp 000D  
       ___lwmod@dividend 0008         ___lldiv@dividend 000D          ??_PWM1_Set_Duty 001A  
               sprintf@c 001F                 sprintf@f 000F         ___lldiv@quotient 0015  
        ___lwmod@divisor 000A          ___lwmod@counter 000C             ___aldiv@sign 000A  
             _PWM1_Start 1284  
