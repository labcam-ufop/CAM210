

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Nov 24 20:11:09 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    44  0000                     
    45                           ; Version 2.20
    46                           ; Generated 12/02/2020 GMT
    47                           ; 
    48                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4520 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001E08                     __pidataCOMRAM:
    82                           	callstack 0
    83                           
    84                           ;initializer for _newMessage
    85  001E08  01                 	db	1
    86                           
    87                           	psect	smallconst
    88  000600                     __psmallconst:
    89                           	callstack 0
    90  000600  00                 	db	0
    91  000601                     _hexpowers:
    92                           	callstack 0
    93  000601  0001               	dw	1
    94  000603  0010               	dw	16
    95  000605  0100               	dw	256
    96  000607  1000               	dw	4096
    97  000609                     __end_of_hexpowers:
    98                           	callstack 0
    99  0000                     _TXREG	set	4013
   100  0000                     _RCONbits	set	4048
   101  0000                     _TMR0L	set	4054
   102  0000                     _TMR0H	set	4055
   103  0000                     _PIE1	set	3997
   104  0000                     _SPBRG	set	4015
   105  0000                     _BAUDCONbits	set	4024
   106  0000                     _PIE1bits	set	3997
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _TRISCbits	set	3988
   110  0000                     _RCSTA	set	4011
   111  0000                     _TXSTA	set	4012
   112  0000                     _LATBbits	set	3978
   113  0000                     _TRISBbits	set	3987
   114  0000                     _T0CONbits	set	4053
   115  0000                     _INTCONbits	set	4082
   116  0000                     _RCREG	set	4014
   117  0000                     _PIR1bits	set	3998
   118  0000                     _LATEbits	set	3981
   119  0000                     _LATE	set	3981
   120  0000                     _PORTE	set	3972
   121  0000                     _LATD	set	3980
   122  0000                     _PORTD	set	3971
   123  0000                     _LATC	set	3979
   124  0000                     _PORTC	set	3970
   125  0000                     _LATB	set	3978
   126  0000                     _PORTB	set	3969
   127  0000                     _LATA	set	3977
   128  0000                     _PORTA	set	3968
   129  0000                     _TRISE	set	3990
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISB	set	3987
   133  0000                     _TRISA	set	3986
   134  0000                     _PORTEbits	set	3972
   135  0000                     _PORTDbits	set	3971
   136  0000                     _TRISEbits	set	3990
   137  0000                     _TRISDbits	set	3989
   138  000609                     STR_2:
   139  000609  25                 	db	37
   140  00060A  30                 	db	48	;'0'
   141  00060B  32                 	db	50	;'2'
   142  00060C  58                 	db	88	;'X'
   143  00060D  20                 	db	32
   144  00060E  25                 	db	37
   145  00060F  30                 	db	48	;'0'
   146  000610  32                 	db	50	;'2'
   147  000611  58                 	db	88	;'X'
   148  000612  20                 	db	32
   149  000613  25                 	db	37
   150  000614  30                 	db	48	;'0'
   151  000615  32                 	db	50	;'2'
   152  000616  58                 	db	88	;'X'
   153  000617  20                 	db	32
   154  000618  25                 	db	37
   155  000619  30                 	db	48	;'0'
   156  00061A  32                 	db	50	;'2'
   157  00061B  58                 	db	88	;'X'
   158  00061C  00                 	db	0
   159  00061D                     STR_3:
   160  00061D  30                 	db	48	;'0'
   161  00061E  31                 	db	49	;'1'
   162  00061F  32                 	db	50	;'2'
   163  000620  33                 	db	51	;'3'
   164  000621  34                 	db	52	;'4'
   165  000622  35                 	db	53	;'5'
   166  000623  36                 	db	54	;'6'
   167  000624  37                 	db	55	;'7'
   168  000625  38                 	db	56	;'8'
   169  000626  39                 	db	57	;'9'
   170  000627  41                 	db	65	;'A'
   171  000628  42                 	db	66	;'B'
   172  000629  43                 	db	67	;'C'
   173  00062A  44                 	db	68	;'D'
   174  00062B  45                 	db	69	;'E'
   175  00062C  46                 	db	70	;'F'
   176  00062D  00                 	db	0
   177  00062E                     STR_1:
   178  00062E  4D                 	db	77	;'M'
   179  00062F  4F                 	db	79	;'O'
   180  000630  44                 	db	68	;'D'
   181  000631  42                 	db	66	;'B'
   182  000632  55                 	db	85	;'U'
   183  000633  53                 	db	83	;'S'
   184  000634  00                 	db	0
   185  000635  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190  001D02                     __pcinit:
   191                           	callstack 0
   192  001D02                     start_initialization:
   193                           	callstack 0
   194  001D02                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to COMRAM (1 bytes)
   198                           ; load TBLPTR registers with __pidataCOMRAM
   199  001D02  0E08               	movlw	low __pidataCOMRAM
   200  001D04  6EF6               	movwf	tblptrl,c
   201  001D06  0E1E               	movlw	high __pidataCOMRAM
   202  001D08  6EF7               	movwf	tblptrh,c
   203  001D0A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   204  001D0C  6EF8               	movwf	tblptru,c
   205  001D0E  0009               	tblrd		*+	;fetch initializer
   206  001D10  CFF5 F06D          	movff	tablat,__pdataCOMRAM
   207                           
   208                           ; Clear objects allocated to BANK1 (225 bytes)
   209  001D14  EE01  F000         	lfsr	0,__pbssBANK1
   210  001D18  0EE1               	movlw	225
   211  001D1A                     clear_0:
   212  001D1A  6AEE               	clrf	postinc0,c
   213  001D1C  06E8               	decf	wreg,f,c
   214  001D1E  E1FD               	bnz	clear_0
   215                           
   216                           ; Clear objects allocated to BANK0 (125 bytes)
   217  001D20  EE00  F080         	lfsr	0,__pbssBANK0
   218  001D24  0E7D               	movlw	125
   219  001D26                     clear_1:
   220  001D26  6AEE               	clrf	postinc0,c
   221  001D28  06E8               	decf	wreg,f,c
   222  001D2A  E1FD               	bnz	clear_1
   223                           
   224                           ; Clear objects allocated to COMRAM (71 bytes)
   225  001D2C  EE00  F001         	lfsr	0,__pbssCOMRAM
   226  001D30  0E47               	movlw	71
   227  001D32                     clear_2:
   228  001D32  6AEE               	clrf	postinc0,c
   229  001D34  06E8               	decf	wreg,f,c
   230  001D36  E1FD               	bnz	clear_2
   231  001D38                     end_of_initialization:
   232                           	callstack 0
   233  001D38                     __end_of__initialization:
   234                           	callstack 0
   235  001D38  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   236  001D3A  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   237  001D3C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   238  001D3E  6EF8               	movwf	tblptru,c
   239  001D40  0100               	movlb	0
   240  001D42  EFE1  F00C         	goto	_main	;jump to C main() function
   241                           
   242                           	psect	bssCOMRAM
   243  000001                     __pbssCOMRAM:
   244                           	callstack 0
   245  000001                     _coils:
   246                           	callstack 0
   247  000001                     	ds	50
   248  000033                     _z:
   249                           	callstack 0
   250  000033                     	ds	1
   251  000034                     _modbusMessage:
   252                           	callstack 0
   253  000034                     	ds	1
   254  000035                     _messageLength:
   255                           	callstack 0
   256  000035                     	ds	1
   257  000036                     _timerCount:
   258                           	callstack 0
   259  000036                     	ds	1
   260  000037                     _endOfMessage:
   261                           	callstack 0
   262  000037                     	ds	1
   263  000038                     _str:
   264                           	callstack 0
   265  000038                     	ds	16
   266                           
   267                           	psect	dataCOMRAM
   268  00006D                     __pdataCOMRAM:
   269                           	callstack 0
   270  00006D                     _newMessage:
   271                           	callstack 0
   272  00006D                     	ds	1
   273                           
   274                           	psect	bssBANK0
   275  000080                     __pbssBANK0:
   276                           	callstack 0
   277  000080                     _response:
   278                           	callstack 0
   279  000080                     	ds	125
   280                           
   281                           	psect	bssBANK1
   282  000100                     __pbssBANK1:
   283                           	callstack 0
   284  000100                     _received:
   285                           	callstack 0
   286  000100                     	ds	125
   287  00017D                     _holdingReg:
   288                           	callstack 0
   289  00017D                     	ds	100
   290                           
   291                           	psect	cstackCOMRAM
   292  000048                     __pcstackCOMRAM:
   293                           	callstack 0
   294  000048                     ??_isr:
   295  000048                     
   296                           ; 1 bytes @ 0x0
   297  000048                     	ds	2
   298  00004A                     ??_Lcd_Cmd:
   299  00004A                     ??_Lcd_Chr_CP:
   300  00004A                     ??_OpnUSART:
   301  00004A                     ??_checkCRC:
   302  00004A                     ??_isdigit:
   303  00004A                     ?_generateCRC:
   304                           	callstack 0
   305  00004A                     ?___wmul:
   306                           	callstack 0
   307  00004A                     ?___lwdiv:
   308                           	callstack 0
   309  00004A                     ___wmul@multiplier:
   310                           	callstack 0
   311  00004A                     ___lwdiv@dividend:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x2
   315  00004A                     	ds	1
   316  00004B                     _isdigit$1692:
   317                           	callstack 0
   318  00004B                     OpnUSART@spbrg:
   319                           	callstack 0
   320                           
   321                           ; 4 bytes @ 0x3
   322  00004B                     	ds	1
   323  00004C                     ??_generateCRC:
   324  00004C                     Lcd_Chr_CP@data:
   325                           	callstack 0
   326  00004C                     Lcd_Cmd@data:
   327                           	callstack 0
   328  00004C                     isdigit@c:
   329                           	callstack 0
   330  00004C                     ___wmul@multiplicand:
   331                           	callstack 0
   332  00004C                     ___lwdiv@divisor:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x4
   336  00004C                     	ds	1
   337  00004D                     ??_Lcd_Init:
   338  00004D                     Lcd_Out@x:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x5
   342  00004D                     	ds	1
   343  00004E                     Lcd_Init@data:
   344                           	callstack 0
   345  00004E                     Lcd_Out@buffer:
   346                           	callstack 0
   347  00004E                     ___wmul@product:
   348                           	callstack 0
   349  00004E                     ___lwdiv@quotient:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x6
   353  00004E                     	ds	1
   354  00004F                     clearResponse@i:
   355                           	callstack 0
   356  00004F                     checkCRC@crcHigh:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x7
   360  00004F                     	ds	1
   361  000050                     Lcd_Out@y:
   362                           	callstack 0
   363  000050                     ___lwdiv@counter:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0x8
   367  000050                     	ds	1
   368  000051                     ?_sprintf:
   369                           	callstack 0
   370  000051                     Lcd_Out@data:
   371                           	callstack 0
   372  000051                     generateCRC@messageLength:
   373                           	callstack 0
   374  000051                     checkCRC@crcLow:
   375                           	callstack 0
   376  000051                     sprintf@sp:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x9
   380  000051                     	ds	1
   381  000052                     generateCRC@crcLow:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0xA
   385  000052                     	ds	1
   386  000053                     checkCRC@j:
   387                           	callstack 0
   388  000053                     sprintf@f:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0xB
   392  000053                     	ds	1
   393  000054                     generateCRC@crcHigh:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0xC
   397  000054                     	ds	1
   398  000055                     checkCRC@crc:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0xD
   402  000055                     	ds	1
   403  000056                     generateCRC@i:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0xE
   407  000056                     	ds	1
   408  000057                     checkCRC@i:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0xF
   412  000057                     	ds	1
   413  000058                     generateCRC@j:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0x10
   417  000058                     	ds	2
   418  00005A                     generateCRC@crc:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x12
   422  00005A                     	ds	2
   423  00005C                     ??_readCoil:
   424  00005C                     ??_readInputCoil:
   425  00005C                     ??_readReg:
   426  00005C                     ??_readInputReg:
   427  00005C                     writeReg@wr_AddressLow:
   428                           	callstack 0
   429  00005C                     writeCoil@wc_AddressLow:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x14
   433  00005C                     	ds	1
   434  00005D                     ??_sprintf:
   435                           
   436                           ; 1 bytes @ 0x15
   437  00005D                     	ds	1
   438  00005E                     readReg@crc:
   439                           	callstack 0
   440  00005E                     readInputReg@crc:
   441                           	callstack 0
   442  00005E                     writeReg@wr_AddressHigh:
   443                           	callstack 0
   444  00005E                     writeCoil@wc_AddressHigh:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x16
   448  00005E                     	ds	2
   449  000060                     readReg@rr_Address:
   450                           	callstack 0
   451  000060                     readInputReg@rr_Address:
   452                           	callstack 0
   453  000060                     writeReg@wr_valToWriteLow:
   454                           	callstack 0
   455  000060                     readCoil@rc_Address:
   456                           	callstack 0
   457  000060                     readInputCoil@rc_Address:
   458                           	callstack 0
   459  000060                     writeCoil@wc_valToWriteLow:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x18
   463  000060                     	ds	1
   464  000061                     sprintf@ap:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x19
   468  000061                     	ds	1
   469  000062                     readReg@rr_numRegs:
   470                           	callstack 0
   471  000062                     readInputReg@rr_numRegs:
   472                           	callstack 0
   473  000062                     writeReg@wr_valToWriteHigh:
   474                           	callstack 0
   475  000062                     readCoil@crc:
   476                           	callstack 0
   477  000062                     readInputCoil@crc:
   478                           	callstack 0
   479  000062                     writeCoil@wc_valToWriteHigh:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x1A
   483  000062                     	ds	1
   484  000063                     sprintf@idx:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x1B
   488  000063                     	ds	1
   489  000064                     readCoil@remainder:
   490                           	callstack 0
   491  000064                     readInputCoil@remainder:
   492                           	callstack 0
   493  000064                     sprintf@flag:
   494                           	callstack 0
   495  000064                     readReg@i:
   496                           	callstack 0
   497  000064                     readInputReg@i:
   498                           	callstack 0
   499  000064                     writeReg@wr_Address:
   500                           	callstack 0
   501  000064                     writeCoil@wc_valToWrite:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x1C
   505  000064                     	ds	1
   506  000065                     readCoil@rc_numCoils:
   507                           	callstack 0
   508  000065                     readInputCoil@rc_numCoils:
   509                           	callstack 0
   510  000065                     sprintf@val:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x1D
   514  000065                     	ds	1
   515  000066                     readReg@j:
   516                           	callstack 0
   517  000066                     readInputReg@j:
   518                           	callstack 0
   519  000066                     writeReg@wr_valToWrite:
   520                           	callstack 0
   521  000066                     writeCoil@crc:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x1E
   525  000066                     	ds	1
   526  000067                     readCoil@howManyBytes:
   527                           	callstack 0
   528  000067                     readInputCoil@howManyBytes:
   529                           	callstack 0
   530  000067                     sprintf@prec:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x1F
   534  000067                     	ds	1
   535  000068                     readCoil@l:
   536                           	callstack 0
   537  000068                     readInputCoil@l:
   538                           	callstack 0
   539  000068                     writeReg@crc:
   540                           	callstack 0
   541  000068                     writeCoil@wc_Address:
   542                           	callstack 0
   543  000068                     sprintf@width:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x20
   547  000068                     	ds	1
   548  000069                     readCoil@lsb:
   549                           	callstack 0
   550  000069                     readInputCoil@lsb:
   551                           	callstack 0
   552                           
   553                           ; 1 bytes @ 0x21
   554  000069                     	ds	1
   555  00006A                     readCoil@i:
   556                           	callstack 0
   557  00006A                     readInputCoil@i:
   558                           	callstack 0
   559  00006A                     sprintf@c:
   560                           	callstack 0
   561  00006A                     writeReg@i:
   562                           	callstack 0
   563  00006A                     writeCoil@i:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x22
   567  00006A                     	ds	1
   568  00006B                     readCoil@j:
   569                           	callstack 0
   570  00006B                     readInputCoil@j:
   571                           	callstack 0
   572                           
   573                           ; 1 bytes @ 0x23
   574  00006B                     	ds	1
   575  00006C                     readCoil@k:
   576                           	callstack 0
   577  00006C                     readInputCoil@k:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x24
   581  00006C                     	ds	1
   582  00006D                     
   583                           ; 1 bytes @ 0x25
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 36 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   603 ;;      Params:         0       0       0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels required when called:    7
   609 ;; This function calls:
   610 ;;		_ConfigInterrupts
   611 ;;		_Lcd_Cmd
   612 ;;		_Lcd_Init
   613 ;;		_Lcd_Out
   614 ;;		_OpnUSART
   615 ;;		_decodeIt
   616 ;;		_sprintf
   617 ;; This function is called by:
   618 ;;		Startup code after reset
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           	psect	text0
   623  0019C2                     __ptext0:
   624                           	callstack 0
   625  0019C2                     _main:
   626                           	callstack 24
   627  0019C2                     
   628                           ;main.c: 39: holdingReg[0] = 10;
   629  0019C2  0E00               	movlw	0
   630  0019C4  0101               	movlb	1	; () banked
   631  0019C6  6F7E               	movwf	(_holdingReg+1)& (0+255),b	;volatile
   632  0019C8  0E0A               	movlw	10
   633  0019CA  6F7D               	movwf	_holdingReg& (0+255),b	;volatile
   634  0019CC                     
   635                           ; BSR set to: 1
   636                           ;main.c: 41: TRISA = 0xFF;
   637  0019CC  6892               	setf	146,c	;volatile
   638                           
   639                           ;main.c: 42: TRISB = 0b00000000;
   640  0019CE  0E00               	movlw	0
   641  0019D0  6E93               	movwf	147,c	;volatile
   642                           
   643                           ;main.c: 43: TRISC = 0b10000001;
   644  0019D2  0E81               	movlw	129
   645  0019D4  6E94               	movwf	148,c	;volatile
   646                           
   647                           ;main.c: 44: TRISD = 0b00000000;
   648  0019D6  0E00               	movlw	0
   649  0019D8  6E95               	movwf	149,c	;volatile
   650                           
   651                           ;main.c: 45: TRISE = 0b00000000;
   652  0019DA  0E00               	movlw	0
   653  0019DC  6E96               	movwf	150,c	;volatile
   654                           
   655                           ;main.c: 47: PORTA = 0;
   656  0019DE  0E00               	movlw	0
   657  0019E0  6E80               	movwf	128,c	;volatile
   658                           
   659                           ;main.c: 48: LATA = 0;
   660  0019E2  0E00               	movlw	0
   661  0019E4  6E89               	movwf	137,c	;volatile
   662                           
   663                           ;main.c: 49: PORTB = 0;
   664  0019E6  0E00               	movlw	0
   665  0019E8  6E81               	movwf	129,c	;volatile
   666                           
   667                           ;main.c: 50: LATB = 0;
   668  0019EA  0E00               	movlw	0
   669  0019EC  6E8A               	movwf	138,c	;volatile
   670                           
   671                           ;main.c: 51: PORTC = 0;
   672  0019EE  0E00               	movlw	0
   673  0019F0  6E82               	movwf	130,c	;volatile
   674                           
   675                           ;main.c: 52: LATC = 0;
   676  0019F2  0E00               	movlw	0
   677  0019F4  6E8B               	movwf	139,c	;volatile
   678                           
   679                           ;main.c: 53: PORTD = 0;
   680  0019F6  0E00               	movlw	0
   681  0019F8  6E83               	movwf	131,c	;volatile
   682                           
   683                           ;main.c: 54: LATD = 0;
   684  0019FA  0E00               	movlw	0
   685  0019FC  6E8C               	movwf	140,c	;volatile
   686                           
   687                           ;main.c: 55: PORTE = 0;
   688  0019FE  0E00               	movlw	0
   689  001A00  6E84               	movwf	132,c	;volatile
   690                           
   691                           ;main.c: 56: LATE = 0;
   692  001A02  0E00               	movlw	0
   693  001A04  6E8D               	movwf	141,c	;volatile
   694  001A06                     
   695                           ; BSR set to: 1
   696                           ;main.c: 58: OpnUSART();
   697  001A06  EC4A  F00E         	call	_OpnUSART	;wreg free
   698  001A0A                     
   699                           ;main.c: 59: ConfigInterrupts();
   700  001A0A  ECF9  F00E         	call	_ConfigInterrupts	;wreg free
   701  001A0E                     
   702                           ;main.c: 61: Lcd_Init();
   703  001A0E  EC58  F00B         	call	_Lcd_Init	;wreg free
   704  001A12                     
   705                           ;main.c: 62: Lcd_Cmd(12);
   706  001A12  0E0C               	movlw	12
   707  001A14  ECA1  F009         	call	_Lcd_Cmd
   708  001A18                     
   709                           ;main.c: 63: Lcd_Out(1, 0, "MODBUS");
   710  001A18  0E00               	movlw	0
   711  001A1A  6E4D               	movwf	Lcd_Out@x^0,c
   712  001A1C  0E2E               	movlw	low STR_1
   713  001A1E  6E4E               	movwf	Lcd_Out@buffer^0,c
   714  001A20  0E06               	movlw	high STR_1
   715  001A22  6E4F               	movwf	(Lcd_Out@buffer+1)^0,c
   716  001A24  0E01               	movlw	1
   717  001A26  ECB4  F00D         	call	_Lcd_Out
   718  001A2A                     l3026:
   719                           
   720                           ;main.c: 65: {;main.c: 66: if(modbusMessage){
   721  001A2A  5034               	movf	_modbusMessage^0,w,c	;volatile
   722  001A2C  B4D8               	btfsc	status,2,c
   723  001A2E  EF1B  F00D         	goto	u1761
   724  001A32  EF1D  F00D         	goto	u1760
   725  001A36                     u1761:
   726  001A36  EF1F  F00D         	goto	l3030
   727  001A3A                     u1760:
   728  001A3A                     
   729                           ;main.c: 67: decodeIt();}
   730  001A3A  EC4D  F00D         	call	_decodeIt	;wreg free
   731  001A3E                     l3030:
   732                           
   733                           ;main.c: 69: sprintf(str, "%02X %02X %02X %02X", holdingReg[0],;main.c: 70: holdingReg[1
      +                          ],holdingReg[2],holdingReg[3]);
   734  001A3E  0E38               	movlw	low _str
   735  001A40  6E51               	movwf	sprintf@sp^0,c
   736  001A42  0E00               	movlw	high _str
   737  001A44  6E52               	movwf	(sprintf@sp+1)^0,c
   738  001A46  0E09               	movlw	low STR_2
   739  001A48  6E53               	movwf	sprintf@f^0,c
   740  001A4A  0E06               	movlw	high STR_2
   741  001A4C  6E54               	movwf	(sprintf@f+1)^0,c
   742  001A4E  C17D  F055         	movff	_holdingReg,?_sprintf+4	;volatile
   743  001A52  C17E  F056         	movff	_holdingReg+1,?_sprintf+5	;volatile
   744  001A56  C17F  F057         	movff	_holdingReg+2,?_sprintf+6	;volatile
   745  001A5A  C180  F058         	movff	_holdingReg+3,?_sprintf+7	;volatile
   746  001A5E  C181  F059         	movff	_holdingReg+4,?_sprintf+8	;volatile
   747  001A62  C182  F05A         	movff	_holdingReg+5,?_sprintf+9	;volatile
   748  001A66  C183  F05B         	movff	_holdingReg+6,?_sprintf+10	;volatile
   749  001A6A  C184  F05C         	movff	_holdingReg+7,?_sprintf+11	;volatile
   750  001A6E  EC1B  F003         	call	_sprintf	;wreg free
   751  001A72                     
   752                           ;main.c: 71: Lcd_Out(2, 0, str);
   753  001A72  0E00               	movlw	0
   754  001A74  6E4D               	movwf	Lcd_Out@x^0,c
   755  001A76  0E38               	movlw	low _str
   756  001A78  6E4E               	movwf	Lcd_Out@buffer^0,c
   757  001A7A  0E00               	movlw	high _str
   758  001A7C  6E4F               	movwf	(Lcd_Out@buffer+1)^0,c
   759  001A7E  0E02               	movlw	2
   760  001A80  ECB4  F00D         	call	_Lcd_Out
   761  001A84                     
   762                           ;main.c: 74: LATD = holdingReg[0];
   763  001A84  C17D  FF8C         	movff	_holdingReg,3980	;volatile
   764  001A88                     
   765                           ;main.c: 75: LATEbits.LATE0 = coils[0];
   766  001A88  B001               	btfsc	_coils^0,0,c	;volatile
   767  001A8A  D002               	bra	u1775
   768  001A8C  908D               	bcf	141,0,c	;volatile
   769  001A8E  D001               	bra	u1776
   770  001A90                     u1775:
   771  001A90  808D               	bsf	141,0,c	;volatile
   772  001A92                     u1776:
   773  001A92  EF15  F00D         	goto	l3026
   774  001A96  EF07  F000         	goto	start
   775  001A9A                     __end_of_main:
   776                           	callstack 0
   777                           
   778 ;; *************** function _sprintf *****************
   779 ;; Defined at:
   780 ;;		line 505 in file "D:\MPLABX\XC8\pic\sources\c90\common\doprnt.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  sp              2    9[COMRAM] PTR unsigned char 
   783 ;;		 -> str(16), 
   784 ;;  f               2   11[COMRAM] PTR const unsigned char 
   785 ;;		 -> STR_2(20), 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  idx             1   27[COMRAM] unsigned char 
   788 ;;  tmpval          4    0        struct .
   789 ;;  cp              3    0        PTR const unsigned char 
   790 ;;  width           2   32[COMRAM] int 
   791 ;;  val             2   29[COMRAM] unsigned int 
   792 ;;  ap              2   25[COMRAM] PTR void [1]
   793 ;;		 -> ?_sprintf(2), 
   794 ;;  len             2    0        unsigned int 
   795 ;;  c               1   34[COMRAM] unsigned char 
   796 ;;  prec            1   31[COMRAM] char 
   797 ;;  flag            1   28[COMRAM] unsigned char 
   798 ;; Return value:  Size  Location     Type
   799 ;;                  2    9[COMRAM] int 
   800 ;; Registers used:
   801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   807 ;;      Params:        12       0       0       0       0       0       0
   808 ;;      Locals:        10       0       0       0       0       0       0
   809 ;;      Temps:          4       0       0       0       0       0       0
   810 ;;      Totals:        26       0       0       0       0       0       0
   811 ;;Total ram usage:       26 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    3
   814 ;; This function calls:
   815 ;;		___lwdiv
   816 ;;		___wmul
   817 ;;		_isdigit
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000636                     __ptext1:
   825                           	callstack 0
   826  000636                     _sprintf:
   827                           	callstack 27
   828  000636                     
   829                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
   830  000636  0E55               	movlw	low (?_sprintf+4)
   831  000638  6E61               	movwf	sprintf@ap^0,c
   832  00063A  0E00               	movlw	high (?_sprintf+4)
   833  00063C  6E62               	movwf	(sprintf@ap+1)^0,c
   834                           
   835                           ;doprnt.c: 553: while((c = *f++)) {
   836  00063E  EF6C  F004         	goto	l2972
   837  000642                     l2890:
   838                           
   839                           ;doprnt.c: 555: if(c != '%')
   840  000642  0E25               	movlw	37
   841  000644  186A               	xorwf	sprintf@c^0,w,c
   842  000646  B4D8               	btfsc	status,2,c
   843  000648  EF28  F003         	goto	u1621
   844  00064C  EF2A  F003         	goto	u1620
   845  000650                     u1621:
   846  000650  EF34  F003         	goto	l2896
   847  000654                     u1620:
   848  000654                     
   849                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
   850  000654  C051  FFD9         	movff	sprintf@sp,fsr2l
   851  000658  C052  FFDA         	movff	sprintf@sp+1,fsr2h
   852  00065C  C06A  FFDF         	movff	sprintf@c,indf2
   853  000660  4A51               	infsnz	sprintf@sp^0,f,c
   854  000662  2A52               	incf	(sprintf@sp+1)^0,f,c
   855                           
   856                           ;doprnt.c: 559: continue;
   857  000664  EF6C  F004         	goto	l2972
   858  000668                     l2896:
   859                           
   860                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
   861  000668  0E00               	movlw	0
   862  00066A  6E69               	movwf	(sprintf@width+1)^0,c
   863  00066C  0E00               	movlw	0
   864  00066E  6E68               	movwf	sprintf@width^0,c
   865                           
   866                           ;doprnt.c: 565: flag = 0;
   867  000670  0E00               	movlw	0
   868  000672  6E64               	movwf	sprintf@flag^0,c
   869  000674  EF3F  F003         	goto	l2902
   870  000678                     l2898:
   871                           
   872                           ;doprnt.c: 597: flag |= 0x04;
   873  000678  8464               	bsf	sprintf@flag^0,2,c
   874                           
   875                           ;doprnt.c: 598: f++;
   876  00067A  4A53               	infsnz	sprintf@f^0,f,c
   877  00067C  2A54               	incf	(sprintf@f+1)^0,f,c
   878  00067E                     l2902:
   879  00067E  C053  FFF6         	movff	sprintf@f,tblptrl
   880  000682  C054  FFF7         	movff	sprintf@f+1,tblptrh
   881  000686                     	if	0	;tblptru may be non-zero
   882  000686                     	endif
   883  000686                     	if	0	;tblptru may be non-zero
   884  000686                     	endif
   885  000686  0008               	tblrd		*
   886  000688  50F5               	movf	tablat,w,c
   887                           
   888                           ; Switch size 1, requested type "simple"
   889                           ; Number of cases is 1, Range of values is 48 to 48
   890                           ; switch strategies available:
   891                           ; Name         Instructions Cycles
   892                           ; simple_byte            4     3 (average)
   893                           ;	Chosen strategy is simple_byte
   894  00068A  0A30               	xorlw	48	; case 48
   895  00068C  B4D8               	btfsc	status,2,c
   896  00068E  EF3C  F003         	goto	l2898
   897  000692  EF4B  F003         	goto	l2904
   898  000696                     l2904:
   899                           
   900                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
   901  000696  C053  FFF6         	movff	sprintf@f,tblptrl
   902  00069A  C054  FFF7         	movff	sprintf@f+1,tblptrh
   903  00069E                     	if	0	;tblptru may be non-zero
   904  00069E                     	endif
   905  00069E                     	if	0	;tblptru may be non-zero
   906  00069E                     	endif
   907  00069E  0008               	tblrd		*
   908  0006A0  50F5               	movf	tablat,w,c
   909  0006A2  ECA3  F00E         	call	_isdigit
   910  0006A6  A0D8               	btfss	status,0,c
   911  0006A8  EF58  F003         	goto	u1631
   912  0006AC  EF5A  F003         	goto	u1630
   913  0006B0                     u1631:
   914  0006B0  EF91  F003         	goto	l2918
   915  0006B4                     u1630:
   916  0006B4                     
   917                           ;doprnt.c: 615: width = 0;
   918  0006B4  0E00               	movlw	0
   919  0006B6  6E69               	movwf	(sprintf@width+1)^0,c
   920  0006B8  0E00               	movlw	0
   921  0006BA  6E68               	movwf	sprintf@width^0,c
   922  0006BC                     l2908:
   923                           
   924                           ;doprnt.c: 617: width *= 10;
   925  0006BC  C068  F04A         	movff	sprintf@width,___wmul@multiplier
   926  0006C0  C069  F04B         	movff	sprintf@width+1,___wmul@multiplier+1
   927  0006C4  0E00               	movlw	0
   928  0006C6  6E4D               	movwf	(___wmul@multiplicand+1)^0,c
   929  0006C8  0E0A               	movlw	10
   930  0006CA  6E4C               	movwf	___wmul@multiplicand^0,c
   931  0006CC  ECD4  F00E         	call	___wmul	;wreg free
   932  0006D0  C04A  F068         	movff	?___wmul,sprintf@width
   933  0006D4  C04B  F069         	movff	?___wmul+1,sprintf@width+1
   934  0006D8                     
   935                           ;doprnt.c: 618: width += *f++ - '0';
   936  0006D8  0ED0               	movlw	208
   937  0006DA  6E5D               	movwf	??_sprintf^0,c
   938  0006DC  0EFF               	movlw	255
   939  0006DE  6E5E               	movwf	(??_sprintf+1)^0,c
   940  0006E0  C053  FFF6         	movff	sprintf@f,tblptrl
   941  0006E4  C054  FFF7         	movff	sprintf@f+1,tblptrh
   942  0006E8                     	if	0	;tblptru may be non-zero
   943  0006E8                     	endif
   944  0006E8                     	if	0	;tblptru may be non-zero
   945  0006E8                     	endif
   946  0006E8  0008               	tblrd		*
   947  0006EA  50F5               	movf	tablat,w,c
   948  0006EC  6E5F               	movwf	(??_sprintf+2)^0,c
   949  0006EE  6A60               	clrf	(??_sprintf+3)^0,c
   950  0006F0  505D               	movf	??_sprintf^0,w,c
   951  0006F2  265F               	addwf	(??_sprintf+2)^0,f,c
   952  0006F4  505E               	movf	(??_sprintf+1)^0,w,c
   953  0006F6  2260               	addwfc	(??_sprintf+3)^0,f,c
   954  0006F8  505F               	movf	(??_sprintf+2)^0,w,c
   955  0006FA  2668               	addwf	sprintf@width^0,f,c
   956  0006FC  5060               	movf	(??_sprintf+3)^0,w,c
   957  0006FE  2269               	addwfc	(sprintf@width+1)^0,f,c
   958  000700  4A53               	infsnz	sprintf@f^0,f,c
   959  000702  2A54               	incf	(sprintf@f+1)^0,f,c
   960  000704                     
   961                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
   962  000704  C053  FFF6         	movff	sprintf@f,tblptrl
   963  000708  C054  FFF7         	movff	sprintf@f+1,tblptrh
   964  00070C                     	if	0	;tblptru may be non-zero
   965  00070C                     	endif
   966  00070C                     	if	0	;tblptru may be non-zero
   967  00070C                     	endif
   968  00070C  0008               	tblrd		*
   969  00070E  50F5               	movf	tablat,w,c
   970  000710  ECA3  F00E         	call	_isdigit
   971  000714  B0D8               	btfsc	status,0,c
   972  000716  EF8F  F003         	goto	u1641
   973  00071A  EF91  F003         	goto	u1640
   974  00071E                     u1641:
   975  00071E  EF5E  F003         	goto	l2908
   976  000722                     u1640:
   977  000722                     l2918:
   978  000722  C053  FFF6         	movff	sprintf@f,tblptrl
   979  000726  C054  FFF7         	movff	sprintf@f+1,tblptrh
   980  00072A  4A53               	infsnz	sprintf@f^0,f,c
   981  00072C  2A54               	incf	(sprintf@f+1)^0,f,c
   982  00072E                     	if	0	;tblptru may be non-zero
   983  00072E                     	endif
   984  00072E                     	if	0	;tblptru may be non-zero
   985  00072E                     	endif
   986  00072E  0008               	tblrd		*
   987  000730  CFF5 F06A          	movff	tablat,sprintf@c
   988  000734  506A               	movf	sprintf@c^0,w,c
   989                           
   990                           ; Switch size 1, requested type "simple"
   991                           ; Number of cases is 3, Range of values is 0 to 120
   992                           ; switch strategies available:
   993                           ; Name         Instructions Cycles
   994                           ; simple_byte           10     6 (average)
   995                           ;	Chosen strategy is simple_byte
   996  000736  0A00               	xorlw	0	; case 0
   997  000738  B4D8               	btfsc	status,2,c
   998  00073A  EF7D  F004         	goto	l2974
   999  00073E  0A58               	xorlw	88	; case 88
  1000  000740  B4D8               	btfsc	status,2,c
  1001  000742  EFA9  F003         	goto	l2920
  1002  000746  0A20               	xorlw	32	; case 120
  1003  000748  B4D8               	btfsc	status,2,c
  1004  00074A  EFA9  F003         	goto	l2920
  1005  00074E  EF6C  F004         	goto	l2972
  1006  000752                     l2920:
  1007                           
  1008                           ;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  1009  000752  C061  FFD9         	movff	sprintf@ap,fsr2l
  1010  000756  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1011  00075A  CFDE F065          	movff	postinc2,sprintf@val
  1012  00075E  CFDD F066          	movff	postdec2,sprintf@val+1
  1013  000762  0E02               	movlw	2
  1014  000764  2661               	addwf	sprintf@ap^0,f,c
  1015  000766  0E00               	movlw	0
  1016  000768  2262               	addwfc	(sprintf@ap+1)^0,f,c
  1017  00076A                     
  1018                           ;doprnt.c: 1313: };doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0]
      +                           ; c++)
  1019  00076A  0E01               	movlw	1
  1020  00076C  6E6A               	movwf	sprintf@c^0,c
  1021  00076E                     l2930:
  1022                           
  1023                           ;doprnt.c: 1343: if(val < hexpowers[c])
  1024  00076E  506A               	movf	sprintf@c^0,w,c
  1025  000770  0D02               	mullw	2
  1026  000772  0E01               	movlw	low _hexpowers
  1027  000774  24F3               	addwf	243,w,c
  1028  000776  6EF6               	movwf	tblptrl,c
  1029  000778  0E06               	movlw	high _hexpowers
  1030  00077A  20F4               	addwfc	244,w,c
  1031  00077C  6EF7               	movwf	tblptrh,c
  1032  00077E                     	if	0	;There are less than 3 active tblptr bytes
  1033  00077E                     	endif
  1034  00077E  0009               	tblrd		*+
  1035  000780  50F5               	movf	tablat,w,c
  1036  000782  5C65               	subwf	sprintf@val^0,w,c
  1037  000784  0009               	tblrd		*+
  1038  000786  50F5               	movf	tablat,w,c
  1039  000788  5866               	subwfb	(sprintf@val+1)^0,w,c
  1040  00078A  B0D8               	btfsc	status,0,c
  1041  00078C  EFCA  F003         	goto	u1651
  1042  000790  EFCC  F003         	goto	u1650
  1043  000794                     u1651:
  1044  000794  EFCE  F003         	goto	l2934
  1045  000798                     u1650:
  1046  000798  EFD8  F003         	goto	l2938
  1047  00079C                     l2934:
  1048  00079C  2A6A               	incf	sprintf@c^0,f,c
  1049  00079E  0E04               	movlw	4
  1050  0007A0  186A               	xorwf	sprintf@c^0,w,c
  1051  0007A2  A4D8               	btfss	status,2,c
  1052  0007A4  EFD6  F003         	goto	u1661
  1053  0007A8  EFD8  F003         	goto	u1660
  1054  0007AC                     u1661:
  1055  0007AC  EFB7  F003         	goto	l2930
  1056  0007B0                     u1660:
  1057  0007B0                     l2938:
  1058                           
  1059                           ;doprnt.c: 1407: if(width > c)
  1060  0007B0  506A               	movf	sprintf@c^0,w,c
  1061  0007B2  6E5D               	movwf	??_sprintf^0,c
  1062  0007B4  6A5E               	clrf	(??_sprintf+1)^0,c
  1063  0007B6  5068               	movf	sprintf@width^0,w,c
  1064  0007B8  5C5D               	subwf	??_sprintf^0,w,c
  1065  0007BA  505E               	movf	(??_sprintf+1)^0,w,c
  1066  0007BC  0A80               	xorlw	128
  1067  0007BE  6E5F               	movwf	(??_sprintf+2)^0,c
  1068  0007C0  5069               	movf	(sprintf@width+1)^0,w,c
  1069  0007C2  0A80               	xorlw	128
  1070  0007C4  585F               	subwfb	(??_sprintf+2)^0,w,c
  1071  0007C6  B0D8               	btfsc	status,0,c
  1072  0007C8  EFE8  F003         	goto	u1671
  1073  0007CC  EFEA  F003         	goto	u1670
  1074  0007D0                     u1671:
  1075  0007D0  EFF0  F003         	goto	l2942
  1076  0007D4                     u1670:
  1077  0007D4                     
  1078                           ;doprnt.c: 1408: width -= c;
  1079  0007D4  506A               	movf	sprintf@c^0,w,c
  1080  0007D6  5E68               	subwf	sprintf@width^0,f,c
  1081  0007D8  0E00               	movlw	0
  1082  0007DA  5A69               	subwfb	(sprintf@width+1)^0,f,c
  1083  0007DC  EFF4  F003         	goto	l2944
  1084  0007E0                     l2942:
  1085                           
  1086                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  1087  0007E0  0E00               	movlw	0
  1088  0007E2  6E69               	movwf	(sprintf@width+1)^0,c
  1089  0007E4  0E00               	movlw	0
  1090  0007E6  6E68               	movwf	sprintf@width^0,c
  1091  0007E8                     l2944:
  1092                           
  1093                           ;doprnt.c: 1413: if(flag & 0x04) {
  1094  0007E8  A464               	btfss	sprintf@flag^0,2,c
  1095  0007EA  EFF9  F003         	goto	u1681
  1096  0007EE  EFFB  F003         	goto	u1680
  1097  0007F2                     u1681:
  1098  0007F2  EF1A  F004         	goto	l2954
  1099  0007F6                     u1680:
  1100  0007F6                     
  1101                           ;doprnt.c: 1441: if(width)
  1102  0007F6  5068               	movf	sprintf@width^0,w,c
  1103  0007F8  1069               	iorwf	(sprintf@width+1)^0,w,c
  1104  0007FA  B4D8               	btfsc	status,2,c
  1105  0007FC  EF02  F004         	goto	u1691
  1106  000800  EF04  F004         	goto	u1690
  1107  000804                     u1691:
  1108  000804  EF37  F004         	goto	l425
  1109  000808                     u1690:
  1110  000808                     l2948:
  1111                           
  1112                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  1113  000808  C051  FFD9         	movff	sprintf@sp,fsr2l
  1114  00080C  C052  FFDA         	movff	sprintf@sp+1,fsr2h
  1115  000810  0E30               	movlw	48
  1116  000812  6EDF               	movwf	indf2,c
  1117  000814  4A51               	infsnz	sprintf@sp^0,f,c
  1118  000816  2A52               	incf	(sprintf@sp+1)^0,f,c
  1119  000818                     
  1120                           ;doprnt.c: 1444: while(--width);
  1121  000818  0668               	decf	sprintf@width^0,f,c
  1122  00081A  A0D8               	btfss	status,0,c
  1123  00081C  0669               	decf	(sprintf@width+1)^0,f,c
  1124  00081E  5068               	movf	sprintf@width^0,w,c
  1125  000820  1069               	iorwf	(sprintf@width+1)^0,w,c
  1126  000822  A4D8               	btfss	status,2,c
  1127  000824  EF16  F004         	goto	u1701
  1128  000828  EF18  F004         	goto	u1700
  1129  00082C                     u1701:
  1130  00082C  EF04  F004         	goto	l2948
  1131  000830                     u1700:
  1132  000830  EF37  F004         	goto	l425
  1133  000834                     l2954:
  1134                           
  1135                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  1136  000834  5068               	movf	sprintf@width^0,w,c
  1137  000836  1069               	iorwf	(sprintf@width+1)^0,w,c
  1138  000838  B4D8               	btfsc	status,2,c
  1139  00083A  EF21  F004         	goto	u1711
  1140  00083E  EF23  F004         	goto	u1710
  1141  000842                     u1711:
  1142  000842  EF37  F004         	goto	l425
  1143  000846                     u1710:
  1144  000846                     l2956:
  1145                           
  1146                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  1147  000846  C051  FFD9         	movff	sprintf@sp,fsr2l
  1148  00084A  C052  FFDA         	movff	sprintf@sp+1,fsr2h
  1149  00084E  0E20               	movlw	32
  1150  000850  6EDF               	movwf	indf2,c
  1151  000852  4A51               	infsnz	sprintf@sp^0,f,c
  1152  000854  2A52               	incf	(sprintf@sp+1)^0,f,c
  1153  000856                     
  1154                           ;doprnt.c: 1457: while(--width);
  1155  000856  0668               	decf	sprintf@width^0,f,c
  1156  000858  A0D8               	btfss	status,0,c
  1157  00085A  0669               	decf	(sprintf@width+1)^0,f,c
  1158  00085C  5068               	movf	sprintf@width^0,w,c
  1159  00085E  1069               	iorwf	(sprintf@width+1)^0,w,c
  1160  000860  A4D8               	btfss	status,2,c
  1161  000862  EF35  F004         	goto	u1721
  1162  000866  EF37  F004         	goto	u1720
  1163  00086A                     u1721:
  1164  00086A  EF23  F004         	goto	l2956
  1165  00086E                     u1720:
  1166  00086E                     l425:
  1167                           
  1168                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1169  00086E  C06A  F067         	movff	sprintf@c,sprintf@prec
  1170                           
  1171                           ;doprnt.c: 1500: while(prec--) {
  1172  000872  EF63  F004         	goto	l2970
  1173  000876                     l2962:
  1174                           
  1175                           ;doprnt.c: 1504: {;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpower
      +                          s[(unsigned char)prec]) & 0xF;
  1176  000876  C065  F04A         	movff	sprintf@val,___lwdiv@dividend
  1177  00087A  C066  F04B         	movff	sprintf@val+1,___lwdiv@dividend+1
  1178  00087E  5067               	movf	sprintf@prec^0,w,c
  1179  000880  0D02               	mullw	2
  1180  000882  0E01               	movlw	low _hexpowers
  1181  000884  24F3               	addwf	243,w,c
  1182  000886  6EF6               	movwf	tblptrl,c
  1183  000888  0E06               	movlw	high _hexpowers
  1184  00088A  20F4               	addwfc	244,w,c
  1185  00088C  6EF7               	movwf	tblptrh,c
  1186  00088E                     	if	0	;There are less than 3 active tblptr bytes
  1187  00088E                     	endif
  1188  00088E  0009               	tblrd		*+
  1189  000890  CFF5 F04C          	movff	tablat,___lwdiv@divisor
  1190  000894  000A               	tblrd		*-
  1191  000896  CFF5 F04D          	movff	tablat,___lwdiv@divisor+1
  1192  00089A  EC10  F00E         	call	___lwdiv	;wreg free
  1193  00089E  504A               	movf	?___lwdiv^0,w,c
  1194  0008A0  0B0F               	andlw	15
  1195  0008A2  6E63               	movwf	sprintf@idx^0,c
  1196  0008A4                     
  1197                           ;doprnt.c: 1530: c = "0123456789ABCDEF"[idx];
  1198  0008A4  0E1D               	movlw	low STR_3
  1199  0008A6  2463               	addwf	sprintf@idx^0,w,c
  1200  0008A8  6EF6               	movwf	tblptrl,c
  1201  0008AA  6AF7               	clrf	tblptrh,c
  1202  0008AC  0E06               	movlw	high STR_3
  1203  0008AE  22F7               	addwfc	tblptrh,f,c
  1204  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  1205  0008B0                     	endif
  1206  0008B0  0008               	tblrd		*
  1207  0008B2  CFF5 F06A          	movff	tablat,sprintf@c
  1208  0008B6                     
  1209                           ;doprnt.c: 1534: };doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  1210  0008B6  C051  FFD9         	movff	sprintf@sp,fsr2l
  1211  0008BA  C052  FFDA         	movff	sprintf@sp+1,fsr2h
  1212  0008BE  C06A  FFDF         	movff	sprintf@c,indf2
  1213  0008C2  4A51               	infsnz	sprintf@sp^0,f,c
  1214  0008C4  2A52               	incf	(sprintf@sp+1)^0,f,c
  1215  0008C6                     l2970:
  1216  0008C6  0667               	decf	sprintf@prec^0,f,c
  1217  0008C8  2867               	incf	sprintf@prec^0,w,c
  1218  0008CA  A4D8               	btfss	status,2,c
  1219  0008CC  EF6A  F004         	goto	u1731
  1220  0008D0  EF6C  F004         	goto	u1730
  1221  0008D4                     u1731:
  1222  0008D4  EF3B  F004         	goto	l2962
  1223  0008D8                     u1730:
  1224  0008D8                     l2972:
  1225  0008D8  C053  FFF6         	movff	sprintf@f,tblptrl
  1226  0008DC  C054  FFF7         	movff	sprintf@f+1,tblptrh
  1227  0008E0  4A53               	infsnz	sprintf@f^0,f,c
  1228  0008E2  2A54               	incf	(sprintf@f+1)^0,f,c
  1229  0008E4                     	if	0	;tblptru may be non-zero
  1230  0008E4                     	endif
  1231  0008E4                     	if	0	;tblptru may be non-zero
  1232  0008E4                     	endif
  1233  0008E4  0008               	tblrd		*
  1234  0008E6  CFF5 F06A          	movff	tablat,sprintf@c
  1235  0008EA  506A               	movf	sprintf@c^0,w,c
  1236  0008EC  A4D8               	btfss	status,2,c
  1237  0008EE  EF7B  F004         	goto	u1741
  1238  0008F2  EF7D  F004         	goto	u1740
  1239  0008F6                     u1741:
  1240  0008F6  EF21  F003         	goto	l2890
  1241  0008FA                     u1740:
  1242  0008FA                     l2974:
  1243                           
  1244                           ;doprnt.c: 1564: *sp = 0;
  1245  0008FA  C051  FFD9         	movff	sprintf@sp,fsr2l
  1246  0008FE  C052  FFDA         	movff	sprintf@sp+1,fsr2h
  1247  000902  0E00               	movlw	0
  1248  000904  6EDF               	movwf	indf2,c
  1249  000906  0012               	return		;funcret
  1250  000908                     __end_of_sprintf:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _isdigit *****************
  1254 ;; Defined at:
  1255 ;;		line 8 in file "D:\MPLABX\XC8\pic\sources\c90\common\isdigit.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  c               1    wreg     unsigned char 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  c               1    4[COMRAM] unsigned char 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;		None               void
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1269 ;;      Params:         0       0       0       0       0       0       0
  1270 ;;      Locals:         2       0       0       0       0       0       0
  1271 ;;      Temps:          1       0       0       0       0       0       0
  1272 ;;      Totals:         3       0       0       0       0       0       0
  1273 ;;Total ram usage:        3 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    2
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_sprintf
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text2
  1284  001D46                     __ptext2:
  1285                           	callstack 0
  1286  001D46                     _isdigit:
  1287                           	callstack 27
  1288                           
  1289                           ;incstack = 0
  1290                           ;isdigit@c stored from wreg
  1291  001D46  6E4C               	movwf	isdigit@c^0,c
  1292  001D48  0E00               	movlw	0
  1293  001D4A  6E4B               	movwf	_isdigit$1692^0,c
  1294  001D4C  0E3A               	movlw	58
  1295  001D4E  604C               	cpfslt	isdigit@c^0,c
  1296  001D50  EFAC  F00E         	goto	u1451
  1297  001D54  EFAE  F00E         	goto	u1450
  1298  001D58                     u1451:
  1299  001D58  EFB8  F00E         	goto	l2746
  1300  001D5C                     u1450:
  1301  001D5C  0E2F               	movlw	47
  1302  001D5E  644C               	cpfsgt	isdigit@c^0,c
  1303  001D60  EFB4  F00E         	goto	u1461
  1304  001D64  EFB6  F00E         	goto	u1460
  1305  001D68                     u1461:
  1306  001D68  EFB8  F00E         	goto	l2746
  1307  001D6C                     u1460:
  1308  001D6C  0E01               	movlw	1
  1309  001D6E  6E4B               	movwf	_isdigit$1692^0,c
  1310  001D70                     l2746:
  1311  001D70  C04B  F04A         	movff	_isdigit$1692,??_isdigit
  1312  001D74  304A               	rrcf	??_isdigit^0,w,c
  1313  001D76  0012               	return		;funcret
  1314  001D78                     __end_of_isdigit:
  1315                           	callstack 0
  1316                           
  1317 ;; *************** function ___wmul *****************
  1318 ;; Defined at:
  1319 ;;		line 15 in file "D:\MPLABX\XC8\pic\sources\c90\common\Umul16.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  multiplier      2    2[COMRAM] unsigned int 
  1322 ;;  multiplicand    2    4[COMRAM] unsigned int 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  product         2    6[COMRAM] unsigned int 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  2    2[COMRAM] unsigned int 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, prodl, prodh
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1334 ;;      Params:         4       0       0       0       0       0       0
  1335 ;;      Locals:         2       0       0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0
  1337 ;;      Totals:         6       0       0       0       0       0       0
  1338 ;;Total ram usage:        6 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    2
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_sprintf
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text3
  1349  001DA8                     __ptext3:
  1350                           	callstack 0
  1351  001DA8                     ___wmul:
  1352                           	callstack 27
  1353  001DA8  504A               	movf	___wmul@multiplier^0,w,c
  1354  001DAA  024C               	mulwf	___wmul@multiplicand^0,c
  1355  001DAC  CFF3 F04E          	movff	prodl,___wmul@product
  1356  001DB0  CFF4 F04F          	movff	prodh,___wmul@product+1
  1357  001DB4  504A               	movf	___wmul@multiplier^0,w,c
  1358  001DB6  024D               	mulwf	(___wmul@multiplicand+1)^0,c
  1359  001DB8  50F3               	movf	243,w,c
  1360  001DBA  264F               	addwf	(___wmul@product+1)^0,f,c
  1361  001DBC  504B               	movf	(___wmul@multiplier+1)^0,w,c
  1362  001DBE  024C               	mulwf	___wmul@multiplicand^0,c
  1363  001DC0  50F3               	movf	243,w,c
  1364  001DC2  264F               	addwf	(___wmul@product+1)^0,f,c
  1365  001DC4  C04E  F04A         	movff	___wmul@product,?___wmul
  1366  001DC8  C04F  F04B         	movff	___wmul@product+1,?___wmul+1
  1367  001DCC  0012               	return		;funcret
  1368  001DCE                     __end_of___wmul:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function ___lwdiv *****************
  1372 ;; Defined at:
  1373 ;;		line 7 in file "D:\MPLABX\XC8\pic\sources\c90\common\lwdiv.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  dividend        2    2[COMRAM] unsigned int 
  1376 ;;  divisor         2    4[COMRAM] unsigned int 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  quotient        2    6[COMRAM] unsigned int 
  1379 ;;  counter         1    8[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2    2[COMRAM] unsigned int 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         4       0       0       0       0       0       0
  1390 ;;      Locals:         3       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0
  1392 ;;      Totals:         7       0       0       0       0       0       0
  1393 ;;Total ram usage:        7 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    2
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_sprintf
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text4
  1404  001C20                     __ptext4:
  1405                           	callstack 0
  1406  001C20                     ___lwdiv:
  1407                           	callstack 27
  1408  001C20  0E00               	movlw	0
  1409  001C22  6E4F               	movwf	(___lwdiv@quotient+1)^0,c
  1410  001C24  0E00               	movlw	0
  1411  001C26  6E4E               	movwf	___lwdiv@quotient^0,c
  1412  001C28  504C               	movf	___lwdiv@divisor^0,w,c
  1413  001C2A  104D               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1414  001C2C  B4D8               	btfsc	status,2,c
  1415  001C2E  EF1B  F00E         	goto	u1471
  1416  001C32  EF1D  F00E         	goto	u1470
  1417  001C36                     u1471:
  1418  001C36  EF45  F00E         	goto	l915
  1419  001C3A                     u1470:
  1420  001C3A  0E01               	movlw	1
  1421  001C3C  6E50               	movwf	___lwdiv@counter^0,c
  1422  001C3E  EF25  F00E         	goto	l2764
  1423  001C42                     l2762:
  1424  001C42  90D8               	bcf	status,0,c
  1425  001C44  364C               	rlcf	___lwdiv@divisor^0,f,c
  1426  001C46  364D               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1427  001C48  2A50               	incf	___lwdiv@counter^0,f,c
  1428  001C4A                     l2764:
  1429  001C4A  AE4D               	btfss	(___lwdiv@divisor+1)^0,7,c
  1430  001C4C  EF2A  F00E         	goto	u1481
  1431  001C50  EF2C  F00E         	goto	u1480
  1432  001C54                     u1481:
  1433  001C54  EF21  F00E         	goto	l2762
  1434  001C58                     u1480:
  1435  001C58                     l2766:
  1436  001C58  90D8               	bcf	status,0,c
  1437  001C5A  364E               	rlcf	___lwdiv@quotient^0,f,c
  1438  001C5C  364F               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1439  001C5E  504C               	movf	___lwdiv@divisor^0,w,c
  1440  001C60  5C4A               	subwf	___lwdiv@dividend^0,w,c
  1441  001C62  504D               	movf	(___lwdiv@divisor+1)^0,w,c
  1442  001C64  584B               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1443  001C66  A0D8               	btfss	status,0,c
  1444  001C68  EF38  F00E         	goto	u1491
  1445  001C6C  EF3A  F00E         	goto	u1490
  1446  001C70                     u1491:
  1447  001C70  EF3F  F00E         	goto	l2774
  1448  001C74                     u1490:
  1449  001C74  504C               	movf	___lwdiv@divisor^0,w,c
  1450  001C76  5E4A               	subwf	___lwdiv@dividend^0,f,c
  1451  001C78  504D               	movf	(___lwdiv@divisor+1)^0,w,c
  1452  001C7A  5A4B               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1453  001C7C  804E               	bsf	___lwdiv@quotient^0,0,c
  1454  001C7E                     l2774:
  1455  001C7E  90D8               	bcf	status,0,c
  1456  001C80  324D               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1457  001C82  324C               	rrcf	___lwdiv@divisor^0,f,c
  1458  001C84  2E50               	decfsz	___lwdiv@counter^0,f,c
  1459  001C86  EF2C  F00E         	goto	l2766
  1460  001C8A                     l915:
  1461  001C8A  C04E  F04A         	movff	___lwdiv@quotient,?___lwdiv
  1462  001C8E  C04F  F04B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1463  001C92  0012               	return		;funcret
  1464  001C94                     __end_of___lwdiv:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _decodeIt *****************
  1468 ;; Defined at:
  1469 ;;		line 47 in file "modbus.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1483 ;;      Params:         0       0       0       0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0
  1486 ;;      Totals:         0       0       0       0       0       0       0
  1487 ;;Total ram usage:        0 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    6
  1490 ;; This function calls:
  1491 ;;		_checkCRC
  1492 ;;		_readCoil
  1493 ;;		_readInputCoil
  1494 ;;		_readInputReg
  1495 ;;		_readReg
  1496 ;;		_writeCoil
  1497 ;;		_writeReg
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text5
  1504  001A9A                     __ptext5:
  1505                           	callstack 0
  1506  001A9A                     _decodeIt:
  1507                           	callstack 24
  1508  001A9A                     
  1509                           ;modbus.c: 49: if(received[0] == 1){
  1510  001A9A  0101               	movlb	1	; () banked
  1511  001A9C  0500               	decf	_received& (0+255),w,b	;volatile
  1512  001A9E  A4D8               	btfss	status,2,c
  1513  001AA0  EF54  F00D         	goto	u1541
  1514  001AA4  EF56  F00D         	goto	u1540
  1515  001AA8                     u1541:
  1516  001AA8  EFB1  F00D         	goto	l258
  1517  001AAC                     u1540:
  1518  001AAC                     
  1519                           ; BSR set to: 1
  1520                           ;modbus.c: 50: if(checkCRC()){
  1521  001AAC  EC0C  F009         	call	_checkCRC	;wreg free
  1522  001AB0  0900               	iorlw	0
  1523  001AB2  B4D8               	btfsc	status,2,c
  1524  001AB4  EF5E  F00D         	goto	u1551
  1525  001AB8  EF60  F00D         	goto	u1550
  1526  001ABC                     u1551:
  1527  001ABC  EFB1  F00D         	goto	l258
  1528  001AC0                     u1550:
  1529  001AC0                     
  1530                           ;modbus.c: 51: if(received[1] == 0x01){
  1531  001AC0  0101               	movlb	1	; () banked
  1532  001AC2  0501               	decf	(_received+1)& (0+255),w,b	;volatile
  1533  001AC4  A4D8               	btfss	status,2,c
  1534  001AC6  EF67  F00D         	goto	u1561
  1535  001ACA  EF69  F00D         	goto	u1560
  1536  001ACE                     u1561:
  1537  001ACE  EF6D  F00D         	goto	l2866
  1538  001AD2                     u1560:
  1539  001AD2                     
  1540                           ; BSR set to: 1
  1541                           ;modbus.c: 52: readCoil();
  1542  001AD2  EC9A  F005         	call	_readCoil	;wreg free
  1543                           
  1544                           ;modbus.c: 53: }
  1545  001AD6  EFB1  F00D         	goto	l258
  1546  001ADA                     l2866:
  1547                           
  1548                           ; BSR set to: 1
  1549                           ;modbus.c: 54: else if(received[1] == 0x02){
  1550  001ADA  0E02               	movlw	2
  1551  001ADC  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1552  001ADE  A4D8               	btfss	status,2,c
  1553  001AE0  EF74  F00D         	goto	u1571
  1554  001AE4  EF76  F00D         	goto	u1570
  1555  001AE8                     u1571:
  1556  001AE8  EF7A  F00D         	goto	l2870
  1557  001AEC                     u1570:
  1558  001AEC                     
  1559                           ; BSR set to: 1
  1560                           ;modbus.c: 55: readInputCoil();
  1561  001AEC  EC84  F004         	call	_readInputCoil	;wreg free
  1562                           
  1563                           ;modbus.c: 56: }
  1564  001AF0  EFB1  F00D         	goto	l258
  1565  001AF4                     l2870:
  1566                           
  1567                           ; BSR set to: 1
  1568                           ;modbus.c: 57: else if(received[1] == 0x03){
  1569  001AF4  0E03               	movlw	3
  1570  001AF6  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1571  001AF8  A4D8               	btfss	status,2,c
  1572  001AFA  EF81  F00D         	goto	u1581
  1573  001AFE  EF83  F00D         	goto	u1580
  1574  001B02                     u1581:
  1575  001B02  EF87  F00D         	goto	l2874
  1576  001B06                     u1580:
  1577  001B06                     
  1578                           ; BSR set to: 1
  1579                           ;modbus.c: 58: readReg();
  1580  001B06  ECB0  F006         	call	_readReg	;wreg free
  1581                           
  1582                           ;modbus.c: 59: }
  1583  001B0A  EFB1  F00D         	goto	l258
  1584  001B0E                     l2874:
  1585                           
  1586                           ; BSR set to: 1
  1587                           ;modbus.c: 60: else if(received[1] == 0x04){
  1588  001B0E  0E04               	movlw	4
  1589  001B10  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1590  001B12  A4D8               	btfss	status,2,c
  1591  001B14  EF8E  F00D         	goto	u1591
  1592  001B18  EF90  F00D         	goto	u1590
  1593  001B1C                     u1591:
  1594  001B1C  EF94  F00D         	goto	l2878
  1595  001B20                     u1590:
  1596  001B20                     
  1597                           ; BSR set to: 1
  1598                           ;modbus.c: 61: readInputReg();
  1599  001B20  EC92  F007         	call	_readInputReg	;wreg free
  1600                           
  1601                           ;modbus.c: 62: }
  1602  001B24  EFB1  F00D         	goto	l258
  1603  001B28                     l2878:
  1604                           
  1605                           ; BSR set to: 1
  1606                           ;modbus.c: 63: else if(received[1] == 0x05){
  1607  001B28  0E05               	movlw	5
  1608  001B2A  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1609  001B2C  A4D8               	btfss	status,2,c
  1610  001B2E  EF9B  F00D         	goto	u1601
  1611  001B32  EF9D  F00D         	goto	u1600
  1612  001B36                     u1601:
  1613  001B36  EFA1  F00D         	goto	l2882
  1614  001B3A                     u1600:
  1615  001B3A                     
  1616                           ; BSR set to: 1
  1617                           ;modbus.c: 64: writeCoil();
  1618  001B3A  EC36  F00A         	call	_writeCoil	;wreg free
  1619                           
  1620                           ;modbus.c: 65: }
  1621  001B3E  EFB1  F00D         	goto	l258
  1622  001B42                     l2882:
  1623                           
  1624                           ; BSR set to: 1
  1625                           ;modbus.c: 66: else if(received[1] == 0x06){
  1626  001B42  0E06               	movlw	6
  1627  001B44  1901               	xorwf	(_received+1)& (0+255),w,b	;volatile
  1628  001B46  A4D8               	btfss	status,2,c
  1629  001B48  EFA8  F00D         	goto	u1611
  1630  001B4C  EFAA  F00D         	goto	u1610
  1631  001B50                     u1611:
  1632  001B50  EFAE  F00D         	goto	l2886
  1633  001B54                     u1610:
  1634  001B54                     
  1635                           ; BSR set to: 1
  1636                           ;modbus.c: 67: writeReg();
  1637  001B54  ECE6  F00B         	call	_writeReg	;wreg free
  1638                           
  1639                           ;modbus.c: 68: }
  1640  001B58  EFB1  F00D         	goto	l258
  1641  001B5C                     l2886:
  1642                           
  1643                           ; BSR set to: 1
  1644                           ;modbus.c: 69: else{;modbus.c: 70: response[0] = 0;
  1645  001B5C  0E00               	movlw	0
  1646  001B5E  0100               	movlb	0	; () banked
  1647  001B60  6F80               	movwf	_response& (0+255),b	;volatile
  1648  001B62                     l258:
  1649                           
  1650                           ;modbus.c: 71: };modbus.c: 72: };modbus.c: 73: };modbus.c: 74: modbusMessage = 0;
  1651  001B62  0E00               	movlw	0
  1652  001B64  6E34               	movwf	_modbusMessage^0,c	;volatile
  1653  001B66  0012               	return		;funcret
  1654  001B68                     __end_of_decodeIt:
  1655                           	callstack 0
  1656                           
  1657 ;; *************** function _writeReg *****************
  1658 ;; Defined at:
  1659 ;;		line 185 in file "modbus.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  i               2   34[COMRAM] unsigned int 
  1664 ;;  crc             2   32[COMRAM] unsigned int 
  1665 ;;  wr_valToWrit    2   30[COMRAM] unsigned int 
  1666 ;;  wr_Address      2   28[COMRAM] unsigned int 
  1667 ;;  wr_valToWrit    2   26[COMRAM] unsigned int 
  1668 ;;  wr_valToWrit    2   24[COMRAM] unsigned int 
  1669 ;;  wr_AddressHi    2   22[COMRAM] unsigned int 
  1670 ;;  wr_AddressLo    2   20[COMRAM] unsigned int 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1680 ;;      Params:         0       0       0       0       0       0       0
  1681 ;;      Locals:        16       0       0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0
  1683 ;;      Totals:        16       0       0       0       0       0       0
  1684 ;;Total ram usage:       16 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    5
  1687 ;; This function calls:
  1688 ;;		_clearResponse
  1689 ;;		_generateCRC
  1690 ;; This function is called by:
  1691 ;;		_decodeIt
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           	psect	text6
  1696  0017CC                     __ptext6:
  1697                           	callstack 0
  1698  0017CC                     _writeReg:
  1699                           	callstack 24
  1700  0017CC                     
  1701                           ;modbus.c: 191: unsigned int wr_AddressHigh = 0;
  1702  0017CC  0E00               	movlw	0
  1703  0017CE  6E5F               	movwf	(writeReg@wr_AddressHigh+1)^0,c
  1704  0017D0  0E00               	movlw	0
  1705  0017D2  6E5E               	movwf	writeReg@wr_AddressHigh^0,c
  1706                           
  1707                           ;modbus.c: 192: unsigned int wr_Address = 0;
  1708  0017D4  0E00               	movlw	0
  1709  0017D6  6E65               	movwf	(writeReg@wr_Address+1)^0,c
  1710  0017D8  0E00               	movlw	0
  1711  0017DA  6E64               	movwf	writeReg@wr_Address^0,c
  1712                           
  1713                           ;modbus.c: 194: unsigned int wr_valToWrite = 0;
  1714  0017DC  0E00               	movlw	0
  1715  0017DE  6E67               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1716  0017E0  0E00               	movlw	0
  1717  0017E2  6E66               	movwf	writeReg@wr_valToWrite^0,c
  1718                           
  1719                           ;modbus.c: 195: unsigned int wr_valToWriteLow = 0;
  1720  0017E4  0E00               	movlw	0
  1721  0017E6  6E61               	movwf	(writeReg@wr_valToWriteLow+1)^0,c
  1722  0017E8  0E00               	movlw	0
  1723  0017EA  6E60               	movwf	writeReg@wr_valToWriteLow^0,c
  1724                           
  1725                           ;modbus.c: 196: unsigned int wr_valToWriteHigh = 0;
  1726  0017EC  0E00               	movlw	0
  1727  0017EE  6E63               	movwf	(writeReg@wr_valToWriteHigh+1)^0,c
  1728  0017F0  0E00               	movlw	0
  1729  0017F2  6E62               	movwf	writeReg@wr_valToWriteHigh^0,c
  1730                           
  1731                           ;modbus.c: 198: unsigned int crc = 0;
  1732  0017F4  0E00               	movlw	0
  1733  0017F6  6E69               	movwf	(writeReg@crc+1)^0,c
  1734  0017F8  0E00               	movlw	0
  1735  0017FA  6E68               	movwf	writeReg@crc^0,c
  1736                           
  1737                           ;modbus.c: 199: unsigned int i = 0;
  1738  0017FC  0E00               	movlw	0
  1739  0017FE  6E6B               	movwf	(writeReg@i+1)^0,c
  1740  001800  0E00               	movlw	0
  1741  001802  6E6A               	movwf	writeReg@i^0,c
  1742  001804                     
  1743                           ;modbus.c: 202: wr_Address = received[2];
  1744  001804  C102  F064         	movff	_received+2,writeReg@wr_Address	;volatile
  1745  001808  6A65               	clrf	(writeReg@wr_Address+1)^0,c
  1746                           
  1747                           ;modbus.c: 203: wr_Address <<= 8;
  1748  00180A  5064               	movf	writeReg@wr_Address^0,w,c
  1749  00180C  6E65               	movwf	(writeReg@wr_Address+1)^0,c
  1750  00180E  6A64               	clrf	writeReg@wr_Address^0,c
  1751  001810                     
  1752                           ;modbus.c: 204: wr_Address |= received[3];
  1753  001810  0101               	movlb	1	; () banked
  1754  001812  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1755  001814  1264               	iorwf	writeReg@wr_Address^0,f,c
  1756  001816                     
  1757                           ; BSR set to: 1
  1758                           ;modbus.c: 206: wr_AddressLow = received[3];
  1759  001816  C103  F05C         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1760  00181A  6A5D               	clrf	(writeReg@wr_AddressLow+1)^0,c
  1761  00181C                     
  1762                           ; BSR set to: 1
  1763                           ;modbus.c: 207: wr_AddressHigh = received[2];
  1764  00181C  C102  F05E         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1765  001820  6A5F               	clrf	(writeReg@wr_AddressHigh+1)^0,c
  1766  001822                     
  1767                           ; BSR set to: 1
  1768                           ;modbus.c: 210: wr_valToWrite = received[4];
  1769  001822  C104  F066         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1770  001826  6A67               	clrf	(writeReg@wr_valToWrite+1)^0,c
  1771  001828                     
  1772                           ; BSR set to: 1
  1773                           ;modbus.c: 211: wr_valToWrite <<= 8;
  1774  001828  5066               	movf	writeReg@wr_valToWrite^0,w,c
  1775  00182A  6E67               	movwf	(writeReg@wr_valToWrite+1)^0,c
  1776  00182C  6A66               	clrf	writeReg@wr_valToWrite^0,c
  1777                           
  1778                           ;modbus.c: 212: wr_valToWrite |= received[5];
  1779  00182E  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1780  001830  1266               	iorwf	writeReg@wr_valToWrite^0,f,c
  1781  001832                     
  1782                           ; BSR set to: 1
  1783                           ;modbus.c: 214: wr_valToWriteLow = received[5];
  1784  001832  C105  F060         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1785  001836  6A61               	clrf	(writeReg@wr_valToWriteLow+1)^0,c
  1786  001838                     
  1787                           ; BSR set to: 1
  1788                           ;modbus.c: 215: wr_valToWriteHigh = received[4];
  1789  001838  C104  F062         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1790  00183C  6A63               	clrf	(writeReg@wr_valToWriteHigh+1)^0,c
  1791  00183E                     
  1792                           ; BSR set to: 1
  1793                           ;modbus.c: 217: holdingReg[wr_Address] = wr_valToWrite;
  1794  00183E  90D8               	bcf	status,0,c
  1795  001840  3464               	rlcf	writeReg@wr_Address^0,w,c
  1796  001842  6ED9               	movwf	fsr2l,c
  1797  001844  3465               	rlcf	(writeReg@wr_Address+1)^0,w,c
  1798  001846  6EDA               	movwf	fsr2h,c
  1799  001848  0E7D               	movlw	low _holdingReg
  1800  00184A  26D9               	addwf	fsr2l,f,c
  1801  00184C  0E01               	movlw	high _holdingReg
  1802  00184E  22DA               	addwfc	fsr2h,f,c
  1803  001850  C066  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1804  001854  C067  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1805  001858                     
  1806                           ; BSR set to: 1
  1807                           ;modbus.c: 219: response[0] = 1;
  1808  001858  0E01               	movlw	1
  1809  00185A  0100               	movlb	0	; () banked
  1810  00185C  6F80               	movwf	_response& (0+255),b	;volatile
  1811  00185E                     
  1812                           ; BSR set to: 0
  1813                           ;modbus.c: 220: response[1] = 0x06;
  1814  00185E  0E06               	movlw	6
  1815  001860  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  1816  001862                     
  1817                           ; BSR set to: 0
  1818                           ;modbus.c: 221: response[3] = wr_AddressLow;
  1819  001862  C05C  F083         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1820  001866                     
  1821                           ; BSR set to: 0
  1822                           ;modbus.c: 222: response[2] = wr_AddressHigh;
  1823  001866  C05E  F082         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1824  00186A                     
  1825                           ; BSR set to: 0
  1826                           ;modbus.c: 225: response[4] = wr_valToWriteHigh;
  1827  00186A  C062  F084         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  1828  00186E                     
  1829                           ; BSR set to: 0
  1830                           ;modbus.c: 226: response[5] = wr_valToWriteLow;
  1831  00186E  C060  F085         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  1832  001872                     
  1833                           ; BSR set to: 0
  1834                           ;modbus.c: 228: crc = generateCRC(8);
  1835  001872  0E08               	movlw	8
  1836  001874  EC69  F00C         	call	_generateCRC
  1837  001878  C04A  F068         	movff	?_generateCRC,writeReg@crc
  1838  00187C  C04B  F069         	movff	?_generateCRC+1,writeReg@crc+1
  1839  001880                     
  1840                           ;modbus.c: 230: response[6] = crc >> 8;
  1841  001880  5069               	movf	(writeReg@crc+1)^0,w,c
  1842  001882  0100               	movlb	0	; () banked
  1843  001884  6F86               	movwf	(_response+6)& (0+255),b	;volatile
  1844  001886                     
  1845                           ; BSR set to: 0
  1846                           ;modbus.c: 231: response[7] = crc;
  1847  001886  C068  F087         	movff	writeReg@crc,_response+7	;volatile
  1848  00188A                     
  1849                           ; BSR set to: 0
  1850                           ;modbus.c: 233: LATBbits.LATB7 = 1;
  1851  00188A  8E8A               	bsf	138,7,c	;volatile
  1852  00188C                     
  1853                           ; BSR set to: 0
  1854                           ;modbus.c: 234: for(i=0;i!=9;i++){
  1855  00188C  0E00               	movlw	0
  1856  00188E  6E6B               	movwf	(writeReg@i+1)^0,c
  1857  001890  0E00               	movlw	0
  1858  001892  6E6A               	movwf	writeReg@i^0,c
  1859  001894                     l305:
  1860  001894  A2AC               	btfss	172,1,c	;volatile
  1861  001896  EF4F  F00C         	goto	u1431
  1862  00189A  EF51  F00C         	goto	u1430
  1863  00189E                     u1431:
  1864  00189E  EF4A  F00C         	goto	l305
  1865  0018A2                     u1430:
  1866  0018A2                     
  1867                           ;modbus.c: 236: TXREG = response[i];
  1868  0018A2  0E80               	movlw	low _response
  1869  0018A4  246A               	addwf	writeReg@i^0,w,c
  1870  0018A6  6ED9               	movwf	fsr2l,c
  1871  0018A8  0E00               	movlw	high _response
  1872  0018AA  206B               	addwfc	(writeReg@i+1)^0,w,c
  1873  0018AC  6EDA               	movwf	fsr2h,c
  1874  0018AE  50DF               	movf	indf2,w,c
  1875  0018B0  6EAD               	movwf	173,c	;volatile
  1876  0018B2  4A6A               	infsnz	writeReg@i^0,f,c
  1877  0018B4  2A6B               	incf	(writeReg@i+1)^0,f,c
  1878  0018B6  0E09               	movlw	9
  1879  0018B8  186A               	xorwf	writeReg@i^0,w,c
  1880  0018BA  106B               	iorwf	(writeReg@i+1)^0,w,c
  1881  0018BC  A4D8               	btfss	status,2,c
  1882  0018BE  EF63  F00C         	goto	u1441
  1883  0018C2  EF65  F00C         	goto	u1440
  1884  0018C6                     u1441:
  1885  0018C6  EF4A  F00C         	goto	l305
  1886  0018CA                     u1440:
  1887  0018CA                     
  1888                           ;modbus.c: 237: };modbus.c: 238: LATBbits.LATB7 = 0;
  1889  0018CA  9E8A               	bcf	138,7,c	;volatile
  1890  0018CC                     
  1891                           ;modbus.c: 239: clearResponse();
  1892  0018CC  ECBC  F00E         	call	_clearResponse	;wreg free
  1893  0018D0  0012               	return		;funcret
  1894  0018D2                     __end_of_writeReg:
  1895                           	callstack 0
  1896                           
  1897 ;; *************** function _writeCoil *****************
  1898 ;; Defined at:
  1899 ;;		line 402 in file "modbus.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  i               2   34[COMRAM] int 
  1904 ;;  wc_Address      2   32[COMRAM] unsigned int 
  1905 ;;  crc             2   30[COMRAM] unsigned int 
  1906 ;;  wc_valToWrit    2   28[COMRAM] unsigned int 
  1907 ;;  wc_valToWrit    2   26[COMRAM] unsigned int 
  1908 ;;  wc_valToWrit    2   24[COMRAM] unsigned int 
  1909 ;;  wc_AddressHi    2   22[COMRAM] unsigned int 
  1910 ;;  wc_AddressLo    2   20[COMRAM] unsigned int 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1920 ;;      Params:         0       0       0       0       0       0       0
  1921 ;;      Locals:        16       0       0       0       0       0       0
  1922 ;;      Temps:          0       0       0       0       0       0       0
  1923 ;;      Totals:        16       0       0       0       0       0       0
  1924 ;;Total ram usage:       16 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    5
  1927 ;; This function calls:
  1928 ;;		_clearResponse
  1929 ;;		_generateCRC
  1930 ;; This function is called by:
  1931 ;;		_decodeIt
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text7
  1936  00146C                     __ptext7:
  1937                           	callstack 0
  1938  00146C                     _writeCoil:
  1939                           	callstack 24
  1940  00146C                     
  1941                           ;modbus.c: 408: unsigned int wc_AddressHigh = 0;
  1942  00146C  0E00               	movlw	0
  1943  00146E  6E5F               	movwf	(writeCoil@wc_AddressHigh+1)^0,c
  1944  001470  0E00               	movlw	0
  1945  001472  6E5E               	movwf	writeCoil@wc_AddressHigh^0,c
  1946                           
  1947                           ;modbus.c: 409: unsigned int wc_Address = 0;
  1948  001474  0E00               	movlw	0
  1949  001476  6E69               	movwf	(writeCoil@wc_Address+1)^0,c
  1950  001478  0E00               	movlw	0
  1951  00147A  6E68               	movwf	writeCoil@wc_Address^0,c
  1952                           
  1953                           ;modbus.c: 411: unsigned int wc_valToWrite = 0;
  1954  00147C  0E00               	movlw	0
  1955  00147E  6E65               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  1956  001480  0E00               	movlw	0
  1957  001482  6E64               	movwf	writeCoil@wc_valToWrite^0,c
  1958                           
  1959                           ;modbus.c: 412: unsigned int wc_valToWriteLow = 0;
  1960  001484  0E00               	movlw	0
  1961  001486  6E61               	movwf	(writeCoil@wc_valToWriteLow+1)^0,c
  1962  001488  0E00               	movlw	0
  1963  00148A  6E60               	movwf	writeCoil@wc_valToWriteLow^0,c
  1964                           
  1965                           ;modbus.c: 413: unsigned int wc_valToWriteHigh = 0;
  1966  00148C  0E00               	movlw	0
  1967  00148E  6E63               	movwf	(writeCoil@wc_valToWriteHigh+1)^0,c
  1968  001490  0E00               	movlw	0
  1969  001492  6E62               	movwf	writeCoil@wc_valToWriteHigh^0,c
  1970                           
  1971                           ;modbus.c: 414: int i = 0;
  1972  001494  0E00               	movlw	0
  1973  001496  6E6B               	movwf	(writeCoil@i+1)^0,c
  1974  001498  0E00               	movlw	0
  1975  00149A  6E6A               	movwf	writeCoil@i^0,c
  1976                           
  1977                           ;modbus.c: 415: unsigned int crc = 0;
  1978  00149C  0E00               	movlw	0
  1979  00149E  6E67               	movwf	(writeCoil@crc+1)^0,c
  1980  0014A0  0E00               	movlw	0
  1981  0014A2  6E66               	movwf	writeCoil@crc^0,c
  1982  0014A4                     
  1983                           ;modbus.c: 418: wc_Address = received[2];
  1984  0014A4  C102  F068         	movff	_received+2,writeCoil@wc_Address	;volatile
  1985  0014A8  6A69               	clrf	(writeCoil@wc_Address+1)^0,c
  1986                           
  1987                           ;modbus.c: 419: wc_Address <<= 8;
  1988  0014AA  5068               	movf	writeCoil@wc_Address^0,w,c
  1989  0014AC  6E69               	movwf	(writeCoil@wc_Address+1)^0,c
  1990  0014AE  6A68               	clrf	writeCoil@wc_Address^0,c
  1991  0014B0                     
  1992                           ;modbus.c: 420: wc_Address |= received[3];
  1993  0014B0  0101               	movlb	1	; () banked
  1994  0014B2  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1995  0014B4  1268               	iorwf	writeCoil@wc_Address^0,f,c
  1996  0014B6                     
  1997                           ; BSR set to: 1
  1998                           ;modbus.c: 422: wc_AddressLow = received[3];
  1999  0014B6  C103  F05C         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  2000  0014BA  6A5D               	clrf	(writeCoil@wc_AddressLow+1)^0,c
  2001  0014BC                     
  2002                           ; BSR set to: 1
  2003                           ;modbus.c: 423: wc_AddressHigh = received[2];
  2004  0014BC  C102  F05E         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  2005  0014C0  6A5F               	clrf	(writeCoil@wc_AddressHigh+1)^0,c
  2006  0014C2                     
  2007                           ; BSR set to: 1
  2008                           ;modbus.c: 426: wc_valToWrite = received[4];
  2009  0014C2  C104  F064         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  2010  0014C6  6A65               	clrf	(writeCoil@wc_valToWrite+1)^0,c
  2011  0014C8                     
  2012                           ; BSR set to: 1
  2013                           ;modbus.c: 427: wc_valToWrite <<= 8;
  2014  0014C8  5064               	movf	writeCoil@wc_valToWrite^0,w,c
  2015  0014CA  6E65               	movwf	(writeCoil@wc_valToWrite+1)^0,c
  2016  0014CC  6A64               	clrf	writeCoil@wc_valToWrite^0,c
  2017                           
  2018                           ;modbus.c: 428: wc_valToWrite |= received[5];
  2019  0014CE  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2020  0014D0  1264               	iorwf	writeCoil@wc_valToWrite^0,f,c
  2021  0014D2                     
  2022                           ; BSR set to: 1
  2023                           ;modbus.c: 430: wc_valToWriteLow = received[5];
  2024  0014D2  C105  F060         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  2025  0014D6  6A61               	clrf	(writeCoil@wc_valToWriteLow+1)^0,c
  2026  0014D8                     
  2027                           ; BSR set to: 1
  2028                           ;modbus.c: 431: wc_valToWriteHigh = received[4];
  2029  0014D8  C104  F062         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  2030  0014DC  6A63               	clrf	(writeCoil@wc_valToWriteHigh+1)^0,c
  2031                           
  2032                           ;modbus.c: 433: if(wc_valToWrite){
  2033  0014DE  5064               	movf	writeCoil@wc_valToWrite^0,w,c
  2034  0014E0  1065               	iorwf	(writeCoil@wc_valToWrite+1)^0,w,c
  2035  0014E2  B4D8               	btfsc	status,2,c
  2036  0014E4  EF76  F00A         	goto	u1401
  2037  0014E8  EF78  F00A         	goto	u1400
  2038  0014EC                     u1401:
  2039  0014EC  EF82  F00A         	goto	l2648
  2040  0014F0                     u1400:
  2041  0014F0                     
  2042                           ; BSR set to: 1
  2043                           ;modbus.c: 434: coils[wc_Address] = 0xFF;
  2044  0014F0  0E01               	movlw	low _coils
  2045  0014F2  2468               	addwf	writeCoil@wc_Address^0,w,c
  2046  0014F4  6ED9               	movwf	fsr2l,c
  2047  0014F6  0E00               	movlw	high _coils
  2048  0014F8  2069               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  2049  0014FA  6EDA               	movwf	fsr2h,c
  2050  0014FC  0EFF               	movlw	255
  2051  0014FE  6EDF               	movwf	indf2,c
  2052                           
  2053                           ;modbus.c: 435: }
  2054  001500  EF8A  F00A         	goto	l2650
  2055  001504                     l2648:
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;modbus.c: 436: else{;modbus.c: 437: coils[wc_Address] = 0x00;
  2059  001504  0E01               	movlw	low _coils
  2060  001506  2468               	addwf	writeCoil@wc_Address^0,w,c
  2061  001508  6ED9               	movwf	fsr2l,c
  2062  00150A  0E00               	movlw	high _coils
  2063  00150C  2069               	addwfc	(writeCoil@wc_Address+1)^0,w,c
  2064  00150E  6EDA               	movwf	fsr2h,c
  2065  001510  0E00               	movlw	0
  2066  001512  6EDF               	movwf	indf2,c
  2067  001514                     l2650:
  2068                           
  2069                           ; BSR set to: 1
  2070                           ;modbus.c: 438: };modbus.c: 440: response[0] = 1;
  2071  001514  0E01               	movlw	1
  2072  001516  0100               	movlb	0	; () banked
  2073  001518  6F80               	movwf	_response& (0+255),b	;volatile
  2074  00151A                     
  2075                           ; BSR set to: 0
  2076                           ;modbus.c: 441: response[1] = 0x05;
  2077  00151A  0E05               	movlw	5
  2078  00151C  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2079  00151E                     
  2080                           ; BSR set to: 0
  2081                           ;modbus.c: 442: response[3] = wc_AddressLow;
  2082  00151E  C05C  F083         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  2083  001522                     
  2084                           ; BSR set to: 0
  2085                           ;modbus.c: 443: response[2] = wc_AddressHigh;
  2086  001522  C05E  F082         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  2087  001526                     
  2088                           ; BSR set to: 0
  2089                           ;modbus.c: 446: response[4] = wc_valToWriteHigh;
  2090  001526  C062  F084         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  2091  00152A                     
  2092                           ; BSR set to: 0
  2093                           ;modbus.c: 447: response[5] = wc_valToWriteLow;
  2094  00152A  C060  F085         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  2095  00152E                     
  2096                           ; BSR set to: 0
  2097                           ;modbus.c: 449: crc = generateCRC(8);
  2098  00152E  0E08               	movlw	8
  2099  001530  EC69  F00C         	call	_generateCRC
  2100  001534  C04A  F066         	movff	?_generateCRC,writeCoil@crc
  2101  001538  C04B  F067         	movff	?_generateCRC+1,writeCoil@crc+1
  2102  00153C                     
  2103                           ;modbus.c: 451: response[6] = crc >> 8;
  2104  00153C  5067               	movf	(writeCoil@crc+1)^0,w,c
  2105  00153E  0100               	movlb	0	; () banked
  2106  001540  6F86               	movwf	(_response+6)& (0+255),b	;volatile
  2107  001542                     
  2108                           ; BSR set to: 0
  2109                           ;modbus.c: 452: response[7] = crc;
  2110  001542  C066  F087         	movff	writeCoil@crc,_response+7	;volatile
  2111  001546                     
  2112                           ; BSR set to: 0
  2113                           ;modbus.c: 454: LATBbits.LATB7 = 1;
  2114  001546  8E8A               	bsf	138,7,c	;volatile
  2115  001548                     
  2116                           ; BSR set to: 0
  2117                           ;modbus.c: 455: for(i=0;i!=9;i++){
  2118  001548  0E00               	movlw	0
  2119  00154A  6E6B               	movwf	(writeCoil@i+1)^0,c
  2120  00154C  0E00               	movlw	0
  2121  00154E  6E6A               	movwf	writeCoil@i^0,c
  2122  001550                     l361:
  2123  001550  A2AC               	btfss	172,1,c	;volatile
  2124  001552  EFAD  F00A         	goto	u1411
  2125  001556  EFAF  F00A         	goto	u1410
  2126  00155A                     u1411:
  2127  00155A  EFA8  F00A         	goto	l361
  2128  00155E                     u1410:
  2129  00155E                     
  2130                           ;modbus.c: 457: TXREG = response[i];
  2131  00155E  0E80               	movlw	low _response
  2132  001560  246A               	addwf	writeCoil@i^0,w,c
  2133  001562  6ED9               	movwf	fsr2l,c
  2134  001564  0E00               	movlw	high _response
  2135  001566  206B               	addwfc	(writeCoil@i+1)^0,w,c
  2136  001568  6EDA               	movwf	fsr2h,c
  2137  00156A  50DF               	movf	indf2,w,c
  2138  00156C  6EAD               	movwf	173,c	;volatile
  2139  00156E  4A6A               	infsnz	writeCoil@i^0,f,c
  2140  001570  2A6B               	incf	(writeCoil@i+1)^0,f,c
  2141  001572  0E09               	movlw	9
  2142  001574  186A               	xorwf	writeCoil@i^0,w,c
  2143  001576  106B               	iorwf	(writeCoil@i+1)^0,w,c
  2144  001578  A4D8               	btfss	status,2,c
  2145  00157A  EFC1  F00A         	goto	u1421
  2146  00157E  EFC3  F00A         	goto	u1420
  2147  001582                     u1421:
  2148  001582  EFA8  F00A         	goto	l361
  2149  001586                     u1420:
  2150  001586                     
  2151                           ;modbus.c: 458: };modbus.c: 459: LATBbits.LATB7 = 0;
  2152  001586  9E8A               	bcf	138,7,c	;volatile
  2153  001588                     
  2154                           ;modbus.c: 460: clearResponse();
  2155  001588  ECBC  F00E         	call	_clearResponse	;wreg free
  2156  00158C  0012               	return		;funcret
  2157  00158E                     __end_of_writeCoil:
  2158                           	callstack 0
  2159                           
  2160 ;; *************** function _readReg *****************
  2161 ;; Defined at:
  2162 ;;		line 77 in file "modbus.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  i               2   28[COMRAM] unsigned int 
  2167 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  2168 ;;  rr_Address      2   24[COMRAM] unsigned int 
  2169 ;;  crc             2   22[COMRAM] unsigned int 
  2170 ;;  j               1   30[COMRAM] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2180 ;;      Params:         0       0       0       0       0       0       0
  2181 ;;      Locals:         9       0       0       0       0       0       0
  2182 ;;      Temps:          2       0       0       0       0       0       0
  2183 ;;      Totals:        11       0       0       0       0       0       0
  2184 ;;Total ram usage:       11 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    5
  2187 ;; This function calls:
  2188 ;;		_clearResponse
  2189 ;;		_generateCRC
  2190 ;; This function is called by:
  2191 ;;		_decodeIt
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text8
  2196  000D60                     __ptext8:
  2197                           	callstack 0
  2198  000D60                     _readReg:
  2199                           	callstack 24
  2200  000D60                     
  2201                           ;modbus.c: 80: unsigned int rr_numRegs = 0;
  2202  000D60  0E00               	movlw	0
  2203  000D62  6E63               	movwf	(readReg@rr_numRegs+1)^0,c
  2204  000D64  0E00               	movlw	0
  2205  000D66  6E62               	movwf	readReg@rr_numRegs^0,c
  2206                           
  2207                           ;modbus.c: 81: unsigned char j = 3;
  2208  000D68  0E03               	movlw	3
  2209  000D6A  6E66               	movwf	readReg@j^0,c
  2210                           
  2211                           ;modbus.c: 82: unsigned int crc = 0;
  2212  000D6C  0E00               	movlw	0
  2213  000D6E  6E5F               	movwf	(readReg@crc+1)^0,c
  2214  000D70  0E00               	movlw	0
  2215  000D72  6E5E               	movwf	readReg@crc^0,c
  2216                           
  2217                           ;modbus.c: 83: unsigned int i = 0;
  2218  000D74  0E00               	movlw	0
  2219  000D76  6E65               	movwf	(readReg@i+1)^0,c
  2220  000D78  0E00               	movlw	0
  2221  000D7A  6E64               	movwf	readReg@i^0,c
  2222  000D7C                     
  2223                           ;modbus.c: 86: rr_Address = received[2];
  2224  000D7C  C102  F060         	movff	_received+2,readReg@rr_Address	;volatile
  2225  000D80  6A61               	clrf	(readReg@rr_Address+1)^0,c
  2226                           
  2227                           ;modbus.c: 87: rr_Address <<= 8;
  2228  000D82  5060               	movf	readReg@rr_Address^0,w,c
  2229  000D84  6E61               	movwf	(readReg@rr_Address+1)^0,c
  2230  000D86  6A60               	clrf	readReg@rr_Address^0,c
  2231  000D88                     
  2232                           ;modbus.c: 88: rr_Address |= received[3];
  2233  000D88  0101               	movlb	1	; () banked
  2234  000D8A  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2235  000D8C  1260               	iorwf	readReg@rr_Address^0,f,c
  2236  000D8E                     
  2237                           ; BSR set to: 1
  2238                           ;modbus.c: 91: rr_numRegs = received[4];
  2239  000D8E  C104  F062         	movff	_received+4,readReg@rr_numRegs	;volatile
  2240  000D92  6A63               	clrf	(readReg@rr_numRegs+1)^0,c
  2241  000D94                     
  2242                           ; BSR set to: 1
  2243                           ;modbus.c: 92: rr_numRegs <<= 8;
  2244  000D94  5062               	movf	readReg@rr_numRegs^0,w,c
  2245  000D96  6E63               	movwf	(readReg@rr_numRegs+1)^0,c
  2246  000D98  6A62               	clrf	readReg@rr_numRegs^0,c
  2247                           
  2248                           ;modbus.c: 93: rr_numRegs |= received[5];
  2249  000D9A  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2250  000D9C  1262               	iorwf	readReg@rr_numRegs^0,f,c
  2251  000D9E                     
  2252                           ; BSR set to: 1
  2253                           ;modbus.c: 95: response[0] = 1;
  2254  000D9E  0E01               	movlw	1
  2255  000DA0  0100               	movlb	0	; () banked
  2256  000DA2  6F80               	movwf	_response& (0+255),b	;volatile
  2257  000DA4                     
  2258                           ; BSR set to: 0
  2259                           ;modbus.c: 96: response[1] = 0x03;
  2260  000DA4  0E03               	movlw	3
  2261  000DA6  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2262                           
  2263                           ;modbus.c: 97: response[2] = rr_numRegs*2;
  2264  000DA8  5062               	movf	readReg@rr_numRegs^0,w,c
  2265  000DAA  2462               	addwf	readReg@rr_numRegs^0,w,c
  2266  000DAC  6F82               	movwf	(_response+2)& (0+255),b	;volatile
  2267  000DAE                     
  2268                           ; BSR set to: 0
  2269                           ;modbus.c: 99: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2270  000DAE  C060  F064         	movff	readReg@rr_Address,readReg@i
  2271  000DB2  C061  F065         	movff	readReg@rr_Address+1,readReg@i+1
  2272  000DB6  EF3B  F007         	goto	l2542
  2273  000DBA                     l2524:
  2274                           
  2275                           ;modbus.c: 100: if(holdingReg[i] > 255){
  2276  000DBA  90D8               	bcf	status,0,c
  2277  000DBC  3464               	rlcf	readReg@i^0,w,c
  2278  000DBE  6ED9               	movwf	fsr2l,c
  2279  000DC0  3465               	rlcf	(readReg@i+1)^0,w,c
  2280  000DC2  6EDA               	movwf	fsr2h,c
  2281  000DC4  0E7D               	movlw	low _holdingReg
  2282  000DC6  26D9               	addwf	fsr2l,f,c
  2283  000DC8  0E01               	movlw	high _holdingReg
  2284  000DCA  22DA               	addwfc	fsr2h,f,c
  2285  000DCC  0E00               	movlw	0
  2286  000DCE  5CDE               	subwf	postinc2,w,c
  2287  000DD0  0E01               	movlw	1
  2288  000DD2  58DE               	subwfb	postinc2,w,c
  2289  000DD4  A0D8               	btfss	status,0,c
  2290  000DD6  EFEF  F006         	goto	u1321
  2291  000DDA  EFF1  F006         	goto	u1320
  2292  000DDE                     u1321:
  2293  000DDE  EF1E  F007         	goto	l2532
  2294  000DE2                     u1320:
  2295  000DE2                     
  2296                           ;modbus.c: 102: response[j] = holdingReg[i] >> 8;
  2297  000DE2  0E80               	movlw	low _response
  2298  000DE4  2466               	addwf	readReg@j^0,w,c
  2299  000DE6  6ED9               	movwf	fsr2l,c
  2300  000DE8  6ADA               	clrf	fsr2h,c
  2301  000DEA  0E00               	movlw	high _response
  2302  000DEC  22DA               	addwfc	fsr2h,f,c
  2303  000DEE  90D8               	bcf	status,0,c
  2304  000DF0  3464               	rlcf	readReg@i^0,w,c
  2305  000DF2  6EE1               	movwf	fsr1l,c
  2306  000DF4  3465               	rlcf	(readReg@i+1)^0,w,c
  2307  000DF6  6EE2               	movwf	fsr1h,c
  2308  000DF8  0E7D               	movlw	low _holdingReg
  2309  000DFA  26E1               	addwf	fsr1l,f,c
  2310  000DFC  0E01               	movlw	high _holdingReg
  2311  000DFE  22E2               	addwfc	fsr1h,f,c
  2312  000E00  CFE6 F05C          	movff	postinc1,??_readReg
  2313  000E04  CFE5 F05D          	movff	postdec1,??_readReg+1
  2314  000E08  C05D  F05C         	movff	??_readReg+1,??_readReg
  2315  000E0C  6A5D               	clrf	(??_readReg+1)^0,c
  2316  000E0E  505C               	movf	??_readReg^0,w,c
  2317  000E10  6EDF               	movwf	indf2,c
  2318  000E12                     
  2319                           ;modbus.c: 103: j++;
  2320  000E12  2A66               	incf	readReg@j^0,f,c
  2321  000E14                     
  2322                           ;modbus.c: 104: response[j] = holdingReg[i];
  2323  000E14  90D8               	bcf	status,0,c
  2324  000E16  3464               	rlcf	readReg@i^0,w,c
  2325  000E18  6ED9               	movwf	fsr2l,c
  2326  000E1A  3465               	rlcf	(readReg@i+1)^0,w,c
  2327  000E1C  6EDA               	movwf	fsr2h,c
  2328  000E1E  0E7D               	movlw	low _holdingReg
  2329  000E20  26D9               	addwf	fsr2l,f,c
  2330  000E22  0E01               	movlw	high _holdingReg
  2331  000E24  22DA               	addwfc	fsr2h,f,c
  2332  000E26  0E80               	movlw	low _response
  2333  000E28  2466               	addwf	readReg@j^0,w,c
  2334  000E2A  6EE1               	movwf	fsr1l,c
  2335  000E2C  6AE2               	clrf	fsr1h,c
  2336  000E2E  0E00               	movlw	high _response
  2337  000E30  22E2               	addwfc	fsr1h,f,c
  2338  000E32  CFDF FFE7          	movff	indf2,indf1
  2339                           
  2340                           ;modbus.c: 105: j++;
  2341  000E36  2A66               	incf	readReg@j^0,f,c
  2342                           
  2343                           ;modbus.c: 106: }
  2344  000E38  EF39  F007         	goto	l2540
  2345  000E3C                     l2532:
  2346                           
  2347                           ;modbus.c: 107: else{;modbus.c: 108: response[j] = 0x00;
  2348  000E3C  0E80               	movlw	low _response
  2349  000E3E  2466               	addwf	readReg@j^0,w,c
  2350  000E40  6ED9               	movwf	fsr2l,c
  2351  000E42  6ADA               	clrf	fsr2h,c
  2352  000E44  0E00               	movlw	high _response
  2353  000E46  22DA               	addwfc	fsr2h,f,c
  2354  000E48  0E00               	movlw	0
  2355  000E4A  6EDF               	movwf	indf2,c
  2356  000E4C                     
  2357                           ;modbus.c: 109: j++;
  2358  000E4C  2A66               	incf	readReg@j^0,f,c
  2359  000E4E                     
  2360                           ;modbus.c: 110: response[j] = holdingReg[i];
  2361  000E4E  90D8               	bcf	status,0,c
  2362  000E50  3464               	rlcf	readReg@i^0,w,c
  2363  000E52  6ED9               	movwf	fsr2l,c
  2364  000E54  3465               	rlcf	(readReg@i+1)^0,w,c
  2365  000E56  6EDA               	movwf	fsr2h,c
  2366  000E58  0E7D               	movlw	low _holdingReg
  2367  000E5A  26D9               	addwf	fsr2l,f,c
  2368  000E5C  0E01               	movlw	high _holdingReg
  2369  000E5E  22DA               	addwfc	fsr2h,f,c
  2370  000E60  0E80               	movlw	low _response
  2371  000E62  2466               	addwf	readReg@j^0,w,c
  2372  000E64  6EE1               	movwf	fsr1l,c
  2373  000E66  6AE2               	clrf	fsr1h,c
  2374  000E68  0E00               	movlw	high _response
  2375  000E6A  22E2               	addwfc	fsr1h,f,c
  2376  000E6C  CFDF FFE7          	movff	indf2,indf1
  2377  000E70                     
  2378                           ;modbus.c: 111: j++;
  2379  000E70  2A66               	incf	readReg@j^0,f,c
  2380  000E72                     l2540:
  2381  000E72  4A64               	infsnz	readReg@i^0,f,c
  2382  000E74  2A65               	incf	(readReg@i+1)^0,f,c
  2383  000E76                     l2542:
  2384  000E76  5062               	movf	readReg@rr_numRegs^0,w,c
  2385  000E78  2460               	addwf	readReg@rr_Address^0,w,c
  2386  000E7A  6E5C               	movwf	??_readReg^0,c
  2387  000E7C  5063               	movf	(readReg@rr_numRegs+1)^0,w,c
  2388  000E7E  2061               	addwfc	(readReg@rr_Address+1)^0,w,c
  2389  000E80  6E5D               	movwf	(??_readReg+1)^0,c
  2390  000E82  505C               	movf	??_readReg^0,w,c
  2391  000E84  5C64               	subwf	readReg@i^0,w,c
  2392  000E86  505D               	movf	(??_readReg+1)^0,w,c
  2393  000E88  5865               	subwfb	(readReg@i+1)^0,w,c
  2394  000E8A  A0D8               	btfss	status,0,c
  2395  000E8C  EF4A  F007         	goto	u1331
  2396  000E90  EF4C  F007         	goto	u1330
  2397  000E94                     u1331:
  2398  000E94  EFDD  F006         	goto	l2524
  2399  000E98                     u1330:
  2400  000E98                     
  2401                           ;modbus.c: 112: };modbus.c: 113: };modbus.c: 114: crc = generateCRC(j+2);
  2402  000E98  5066               	movf	readReg@j^0,w,c
  2403  000E9A  0F02               	addlw	2
  2404  000E9C  EC69  F00C         	call	_generateCRC
  2405  000EA0  C04A  F05E         	movff	?_generateCRC,readReg@crc
  2406  000EA4  C04B  F05F         	movff	?_generateCRC+1,readReg@crc+1
  2407  000EA8                     
  2408                           ;modbus.c: 115: response[j] = crc >> 8;
  2409  000EA8  0E80               	movlw	low _response
  2410  000EAA  2466               	addwf	readReg@j^0,w,c
  2411  000EAC  6ED9               	movwf	fsr2l,c
  2412  000EAE  6ADA               	clrf	fsr2h,c
  2413  000EB0  0E00               	movlw	high _response
  2414  000EB2  22DA               	addwfc	fsr2h,f,c
  2415  000EB4  505F               	movf	(readReg@crc+1)^0,w,c
  2416  000EB6  6EDF               	movwf	indf2,c
  2417  000EB8                     
  2418                           ;modbus.c: 116: j++;
  2419  000EB8  2A66               	incf	readReg@j^0,f,c
  2420  000EBA                     
  2421                           ;modbus.c: 117: response[j] = crc;
  2422  000EBA  0E80               	movlw	low _response
  2423  000EBC  2466               	addwf	readReg@j^0,w,c
  2424  000EBE  6ED9               	movwf	fsr2l,c
  2425  000EC0  6ADA               	clrf	fsr2h,c
  2426  000EC2  0E00               	movlw	high _response
  2427  000EC4  22DA               	addwfc	fsr2h,f,c
  2428  000EC6  C05E  FFDF         	movff	readReg@crc,indf2
  2429  000ECA                     
  2430                           ;modbus.c: 118: j+=2;
  2431  000ECA  0E02               	movlw	2
  2432  000ECC  2666               	addwf	readReg@j^0,f,c
  2433  000ECE                     
  2434                           ;modbus.c: 120: LATBbits.LATB7 = 1;
  2435  000ECE  8E8A               	bsf	138,7,c	;volatile
  2436  000ED0                     
  2437                           ;modbus.c: 121: for(i=0;i!=j;i++){
  2438  000ED0  0E00               	movlw	0
  2439  000ED2  6E65               	movwf	(readReg@i+1)^0,c
  2440  000ED4  0E00               	movlw	0
  2441  000ED6  6E64               	movwf	readReg@i^0,c
  2442  000ED8  EF7F  F007         	goto	l2562
  2443  000EDC                     l282:
  2444  000EDC  A2AC               	btfss	172,1,c	;volatile
  2445  000EDE  EF73  F007         	goto	u1341
  2446  000EE2  EF75  F007         	goto	u1340
  2447  000EE6                     u1341:
  2448  000EE6  EF6E  F007         	goto	l282
  2449  000EEA                     u1340:
  2450  000EEA                     
  2451                           ;modbus.c: 123: TXREG = response[i];
  2452  000EEA  0E80               	movlw	low _response
  2453  000EEC  2464               	addwf	readReg@i^0,w,c
  2454  000EEE  6ED9               	movwf	fsr2l,c
  2455  000EF0  0E00               	movlw	high _response
  2456  000EF2  2065               	addwfc	(readReg@i+1)^0,w,c
  2457  000EF4  6EDA               	movwf	fsr2h,c
  2458  000EF6  50DF               	movf	indf2,w,c
  2459  000EF8  6EAD               	movwf	173,c	;volatile
  2460  000EFA  4A64               	infsnz	readReg@i^0,f,c
  2461  000EFC  2A65               	incf	(readReg@i+1)^0,f,c
  2462  000EFE                     l2562:
  2463  000EFE  5066               	movf	readReg@j^0,w,c
  2464  000F00  6E5C               	movwf	??_readReg^0,c
  2465  000F02  6A5D               	clrf	(??_readReg+1)^0,c
  2466  000F04  5064               	movf	readReg@i^0,w,c
  2467  000F06  185C               	xorwf	??_readReg^0,w,c
  2468  000F08  E107               	bnz	u1351
  2469  000F0A  5065               	movf	(readReg@i+1)^0,w,c
  2470  000F0C  185D               	xorwf	(??_readReg+1)^0,w,c
  2471  000F0E  A4D8               	btfss	status,2,c
  2472  000F10  EF8C  F007         	goto	u1351
  2473  000F14  EF8E  F007         	goto	u1350
  2474  000F18                     u1351:
  2475  000F18  EF6E  F007         	goto	l282
  2476  000F1C                     u1350:
  2477  000F1C                     
  2478                           ;modbus.c: 124: };modbus.c: 125: LATBbits.LATB7 = 0;
  2479  000F1C  9E8A               	bcf	138,7,c	;volatile
  2480  000F1E                     
  2481                           ;modbus.c: 128: clearResponse();
  2482  000F1E  ECBC  F00E         	call	_clearResponse	;wreg free
  2483  000F22  0012               	return		;funcret
  2484  000F24                     __end_of_readReg:
  2485                           	callstack 0
  2486                           
  2487 ;; *************** function _readInputReg *****************
  2488 ;; Defined at:
  2489 ;;		line 131 in file "modbus.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  i               2   28[COMRAM] unsigned int 
  2494 ;;  rr_numRegs      2   26[COMRAM] unsigned int 
  2495 ;;  rr_Address      2   24[COMRAM] unsigned int 
  2496 ;;  crc             2   22[COMRAM] unsigned int 
  2497 ;;  j               1   30[COMRAM] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2507 ;;      Params:         0       0       0       0       0       0       0
  2508 ;;      Locals:         9       0       0       0       0       0       0
  2509 ;;      Temps:          2       0       0       0       0       0       0
  2510 ;;      Totals:        11       0       0       0       0       0       0
  2511 ;;Total ram usage:       11 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    5
  2514 ;; This function calls:
  2515 ;;		_clearResponse
  2516 ;;		_generateCRC
  2517 ;; This function is called by:
  2518 ;;		_decodeIt
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text9
  2523  000F24                     __ptext9:
  2524                           	callstack 0
  2525  000F24                     _readInputReg:
  2526                           	callstack 24
  2527  000F24                     
  2528                           ;modbus.c: 134: unsigned int rr_numRegs = 0;
  2529  000F24  0E00               	movlw	0
  2530  000F26  6E63               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2531  000F28  0E00               	movlw	0
  2532  000F2A  6E62               	movwf	readInputReg@rr_numRegs^0,c
  2533                           
  2534                           ;modbus.c: 135: unsigned char j = 3;
  2535  000F2C  0E03               	movlw	3
  2536  000F2E  6E66               	movwf	readInputReg@j^0,c
  2537                           
  2538                           ;modbus.c: 136: unsigned int crc = 0;
  2539  000F30  0E00               	movlw	0
  2540  000F32  6E5F               	movwf	(readInputReg@crc+1)^0,c
  2541  000F34  0E00               	movlw	0
  2542  000F36  6E5E               	movwf	readInputReg@crc^0,c
  2543                           
  2544                           ;modbus.c: 137: unsigned int i = 0;
  2545  000F38  0E00               	movlw	0
  2546  000F3A  6E65               	movwf	(readInputReg@i+1)^0,c
  2547  000F3C  0E00               	movlw	0
  2548  000F3E  6E64               	movwf	readInputReg@i^0,c
  2549  000F40                     
  2550                           ;modbus.c: 140: rr_Address = received[2];
  2551  000F40  C102  F060         	movff	_received+2,readInputReg@rr_Address	;volatile
  2552  000F44  6A61               	clrf	(readInputReg@rr_Address+1)^0,c
  2553                           
  2554                           ;modbus.c: 141: rr_Address <<= 8;
  2555  000F46  5060               	movf	readInputReg@rr_Address^0,w,c
  2556  000F48  6E61               	movwf	(readInputReg@rr_Address+1)^0,c
  2557  000F4A  6A60               	clrf	readInputReg@rr_Address^0,c
  2558  000F4C                     
  2559                           ;modbus.c: 142: rr_Address |= received[3];
  2560  000F4C  0101               	movlb	1	; () banked
  2561  000F4E  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2562  000F50  1260               	iorwf	readInputReg@rr_Address^0,f,c
  2563  000F52                     
  2564                           ; BSR set to: 1
  2565                           ;modbus.c: 145: rr_numRegs = received[4];
  2566  000F52  C104  F062         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  2567  000F56  6A63               	clrf	(readInputReg@rr_numRegs+1)^0,c
  2568  000F58                     
  2569                           ; BSR set to: 1
  2570                           ;modbus.c: 146: rr_numRegs <<= 8;
  2571  000F58  5062               	movf	readInputReg@rr_numRegs^0,w,c
  2572  000F5A  6E63               	movwf	(readInputReg@rr_numRegs+1)^0,c
  2573  000F5C  6A62               	clrf	readInputReg@rr_numRegs^0,c
  2574                           
  2575                           ;modbus.c: 147: rr_numRegs |= received[5];
  2576  000F5E  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2577  000F60  1262               	iorwf	readInputReg@rr_numRegs^0,f,c
  2578  000F62                     
  2579                           ; BSR set to: 1
  2580                           ;modbus.c: 149: response[0] = 1;
  2581  000F62  0E01               	movlw	1
  2582  000F64  0100               	movlb	0	; () banked
  2583  000F66  6F80               	movwf	_response& (0+255),b	;volatile
  2584  000F68                     
  2585                           ; BSR set to: 0
  2586                           ;modbus.c: 150: response[1] = 0x04;
  2587  000F68  0E04               	movlw	4
  2588  000F6A  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2589                           
  2590                           ;modbus.c: 151: response[2] = rr_numRegs*2;
  2591  000F6C  5062               	movf	readInputReg@rr_numRegs^0,w,c
  2592  000F6E  2462               	addwf	readInputReg@rr_numRegs^0,w,c
  2593  000F70  6F82               	movwf	(_response+2)& (0+255),b	;volatile
  2594  000F72                     
  2595                           ; BSR set to: 0
  2596                           ;modbus.c: 153: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2597  000F72  C060  F064         	movff	readInputReg@rr_Address,readInputReg@i
  2598  000F76  C061  F065         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  2599  000F7A  EF1D  F008         	goto	l2602
  2600  000F7E                     l2584:
  2601                           
  2602                           ;modbus.c: 154: if(holdingReg[i] > 255){
  2603  000F7E  90D8               	bcf	status,0,c
  2604  000F80  3464               	rlcf	readInputReg@i^0,w,c
  2605  000F82  6ED9               	movwf	fsr2l,c
  2606  000F84  3465               	rlcf	(readInputReg@i+1)^0,w,c
  2607  000F86  6EDA               	movwf	fsr2h,c
  2608  000F88  0E7D               	movlw	low _holdingReg
  2609  000F8A  26D9               	addwf	fsr2l,f,c
  2610  000F8C  0E01               	movlw	high _holdingReg
  2611  000F8E  22DA               	addwfc	fsr2h,f,c
  2612  000F90  0E00               	movlw	0
  2613  000F92  5CDE               	subwf	postinc2,w,c
  2614  000F94  0E01               	movlw	1
  2615  000F96  58DE               	subwfb	postinc2,w,c
  2616  000F98  A0D8               	btfss	status,0,c
  2617  000F9A  EFD1  F007         	goto	u1361
  2618  000F9E  EFD3  F007         	goto	u1360
  2619  000FA2                     u1361:
  2620  000FA2  EF00  F008         	goto	l2592
  2621  000FA6                     u1360:
  2622  000FA6                     
  2623                           ;modbus.c: 156: response[j] = holdingReg[i] >> 8;
  2624  000FA6  0E80               	movlw	low _response
  2625  000FA8  2466               	addwf	readInputReg@j^0,w,c
  2626  000FAA  6ED9               	movwf	fsr2l,c
  2627  000FAC  6ADA               	clrf	fsr2h,c
  2628  000FAE  0E00               	movlw	high _response
  2629  000FB0  22DA               	addwfc	fsr2h,f,c
  2630  000FB2  90D8               	bcf	status,0,c
  2631  000FB4  3464               	rlcf	readInputReg@i^0,w,c
  2632  000FB6  6EE1               	movwf	fsr1l,c
  2633  000FB8  3465               	rlcf	(readInputReg@i+1)^0,w,c
  2634  000FBA  6EE2               	movwf	fsr1h,c
  2635  000FBC  0E7D               	movlw	low _holdingReg
  2636  000FBE  26E1               	addwf	fsr1l,f,c
  2637  000FC0  0E01               	movlw	high _holdingReg
  2638  000FC2  22E2               	addwfc	fsr1h,f,c
  2639  000FC4  CFE6 F05C          	movff	postinc1,??_readInputReg
  2640  000FC8  CFE5 F05D          	movff	postdec1,??_readInputReg+1
  2641  000FCC  C05D  F05C         	movff	??_readInputReg+1,??_readInputReg
  2642  000FD0  6A5D               	clrf	(??_readInputReg+1)^0,c
  2643  000FD2  505C               	movf	??_readInputReg^0,w,c
  2644  000FD4  6EDF               	movwf	indf2,c
  2645  000FD6                     
  2646                           ;modbus.c: 157: j++;
  2647  000FD6  2A66               	incf	readInputReg@j^0,f,c
  2648  000FD8                     
  2649                           ;modbus.c: 158: response[j] = holdingReg[i];
  2650  000FD8  90D8               	bcf	status,0,c
  2651  000FDA  3464               	rlcf	readInputReg@i^0,w,c
  2652  000FDC  6ED9               	movwf	fsr2l,c
  2653  000FDE  3465               	rlcf	(readInputReg@i+1)^0,w,c
  2654  000FE0  6EDA               	movwf	fsr2h,c
  2655  000FE2  0E7D               	movlw	low _holdingReg
  2656  000FE4  26D9               	addwf	fsr2l,f,c
  2657  000FE6  0E01               	movlw	high _holdingReg
  2658  000FE8  22DA               	addwfc	fsr2h,f,c
  2659  000FEA  0E80               	movlw	low _response
  2660  000FEC  2466               	addwf	readInputReg@j^0,w,c
  2661  000FEE  6EE1               	movwf	fsr1l,c
  2662  000FF0  6AE2               	clrf	fsr1h,c
  2663  000FF2  0E00               	movlw	high _response
  2664  000FF4  22E2               	addwfc	fsr1h,f,c
  2665  000FF6  CFDF FFE7          	movff	indf2,indf1
  2666                           
  2667                           ;modbus.c: 159: j++;
  2668  000FFA  2A66               	incf	readInputReg@j^0,f,c
  2669                           
  2670                           ;modbus.c: 160: }
  2671  000FFC  EF1B  F008         	goto	l2600
  2672  001000                     l2592:
  2673                           
  2674                           ;modbus.c: 161: else{;modbus.c: 162: response[j] = 0x00;
  2675  001000  0E80               	movlw	low _response
  2676  001002  2466               	addwf	readInputReg@j^0,w,c
  2677  001004  6ED9               	movwf	fsr2l,c
  2678  001006  6ADA               	clrf	fsr2h,c
  2679  001008  0E00               	movlw	high _response
  2680  00100A  22DA               	addwfc	fsr2h,f,c
  2681  00100C  0E00               	movlw	0
  2682  00100E  6EDF               	movwf	indf2,c
  2683  001010                     
  2684                           ;modbus.c: 163: j++;
  2685  001010  2A66               	incf	readInputReg@j^0,f,c
  2686  001012                     
  2687                           ;modbus.c: 164: response[j] = holdingReg[i];
  2688  001012  90D8               	bcf	status,0,c
  2689  001014  3464               	rlcf	readInputReg@i^0,w,c
  2690  001016  6ED9               	movwf	fsr2l,c
  2691  001018  3465               	rlcf	(readInputReg@i+1)^0,w,c
  2692  00101A  6EDA               	movwf	fsr2h,c
  2693  00101C  0E7D               	movlw	low _holdingReg
  2694  00101E  26D9               	addwf	fsr2l,f,c
  2695  001020  0E01               	movlw	high _holdingReg
  2696  001022  22DA               	addwfc	fsr2h,f,c
  2697  001024  0E80               	movlw	low _response
  2698  001026  2466               	addwf	readInputReg@j^0,w,c
  2699  001028  6EE1               	movwf	fsr1l,c
  2700  00102A  6AE2               	clrf	fsr1h,c
  2701  00102C  0E00               	movlw	high _response
  2702  00102E  22E2               	addwfc	fsr1h,f,c
  2703  001030  CFDF FFE7          	movff	indf2,indf1
  2704  001034                     
  2705                           ;modbus.c: 165: j++;
  2706  001034  2A66               	incf	readInputReg@j^0,f,c
  2707  001036                     l2600:
  2708  001036  4A64               	infsnz	readInputReg@i^0,f,c
  2709  001038  2A65               	incf	(readInputReg@i+1)^0,f,c
  2710  00103A                     l2602:
  2711  00103A  5062               	movf	readInputReg@rr_numRegs^0,w,c
  2712  00103C  2460               	addwf	readInputReg@rr_Address^0,w,c
  2713  00103E  6E5C               	movwf	??_readInputReg^0,c
  2714  001040  5063               	movf	(readInputReg@rr_numRegs+1)^0,w,c
  2715  001042  2061               	addwfc	(readInputReg@rr_Address+1)^0,w,c
  2716  001044  6E5D               	movwf	(??_readInputReg+1)^0,c
  2717  001046  505C               	movf	??_readInputReg^0,w,c
  2718  001048  5C64               	subwf	readInputReg@i^0,w,c
  2719  00104A  505D               	movf	(??_readInputReg+1)^0,w,c
  2720  00104C  5865               	subwfb	(readInputReg@i+1)^0,w,c
  2721  00104E  A0D8               	btfss	status,0,c
  2722  001050  EF2C  F008         	goto	u1371
  2723  001054  EF2E  F008         	goto	u1370
  2724  001058                     u1371:
  2725  001058  EFBF  F007         	goto	l2584
  2726  00105C                     u1370:
  2727  00105C                     
  2728                           ;modbus.c: 166: };modbus.c: 167: };modbus.c: 168: crc = generateCRC(j+2);
  2729  00105C  5066               	movf	readInputReg@j^0,w,c
  2730  00105E  0F02               	addlw	2
  2731  001060  EC69  F00C         	call	_generateCRC
  2732  001064  C04A  F05E         	movff	?_generateCRC,readInputReg@crc
  2733  001068  C04B  F05F         	movff	?_generateCRC+1,readInputReg@crc+1
  2734  00106C                     
  2735                           ;modbus.c: 169: response[j] = crc >> 8;
  2736  00106C  0E80               	movlw	low _response
  2737  00106E  2466               	addwf	readInputReg@j^0,w,c
  2738  001070  6ED9               	movwf	fsr2l,c
  2739  001072  6ADA               	clrf	fsr2h,c
  2740  001074  0E00               	movlw	high _response
  2741  001076  22DA               	addwfc	fsr2h,f,c
  2742  001078  505F               	movf	(readInputReg@crc+1)^0,w,c
  2743  00107A  6EDF               	movwf	indf2,c
  2744  00107C                     
  2745                           ;modbus.c: 170: j++;
  2746  00107C  2A66               	incf	readInputReg@j^0,f,c
  2747  00107E                     
  2748                           ;modbus.c: 171: response[j] = crc;
  2749  00107E  0E80               	movlw	low _response
  2750  001080  2466               	addwf	readInputReg@j^0,w,c
  2751  001082  6ED9               	movwf	fsr2l,c
  2752  001084  6ADA               	clrf	fsr2h,c
  2753  001086  0E00               	movlw	high _response
  2754  001088  22DA               	addwfc	fsr2h,f,c
  2755  00108A  C05E  FFDF         	movff	readInputReg@crc,indf2
  2756  00108E                     
  2757                           ;modbus.c: 172: j+=2;
  2758  00108E  0E02               	movlw	2
  2759  001090  2666               	addwf	readInputReg@j^0,f,c
  2760  001092                     
  2761                           ;modbus.c: 174: LATBbits.LATB7 = 1;
  2762  001092  8E8A               	bsf	138,7,c	;volatile
  2763  001094                     
  2764                           ;modbus.c: 175: for(i=0;i!=j;i++){
  2765  001094  0E00               	movlw	0
  2766  001096  6E65               	movwf	(readInputReg@i+1)^0,c
  2767  001098  0E00               	movlw	0
  2768  00109A  6E64               	movwf	readInputReg@i^0,c
  2769  00109C  EF61  F008         	goto	l2622
  2770  0010A0                     l296:
  2771  0010A0  A2AC               	btfss	172,1,c	;volatile
  2772  0010A2  EF55  F008         	goto	u1381
  2773  0010A6  EF57  F008         	goto	u1380
  2774  0010AA                     u1381:
  2775  0010AA  EF50  F008         	goto	l296
  2776  0010AE                     u1380:
  2777  0010AE                     
  2778                           ;modbus.c: 177: TXREG = response[i];
  2779  0010AE  0E80               	movlw	low _response
  2780  0010B0  2464               	addwf	readInputReg@i^0,w,c
  2781  0010B2  6ED9               	movwf	fsr2l,c
  2782  0010B4  0E00               	movlw	high _response
  2783  0010B6  2065               	addwfc	(readInputReg@i+1)^0,w,c
  2784  0010B8  6EDA               	movwf	fsr2h,c
  2785  0010BA  50DF               	movf	indf2,w,c
  2786  0010BC  6EAD               	movwf	173,c	;volatile
  2787  0010BE  4A64               	infsnz	readInputReg@i^0,f,c
  2788  0010C0  2A65               	incf	(readInputReg@i+1)^0,f,c
  2789  0010C2                     l2622:
  2790  0010C2  5066               	movf	readInputReg@j^0,w,c
  2791  0010C4  6E5C               	movwf	??_readInputReg^0,c
  2792  0010C6  6A5D               	clrf	(??_readInputReg+1)^0,c
  2793  0010C8  5064               	movf	readInputReg@i^0,w,c
  2794  0010CA  185C               	xorwf	??_readInputReg^0,w,c
  2795  0010CC  E107               	bnz	u1391
  2796  0010CE  5065               	movf	(readInputReg@i+1)^0,w,c
  2797  0010D0  185D               	xorwf	(??_readInputReg+1)^0,w,c
  2798  0010D2  A4D8               	btfss	status,2,c
  2799  0010D4  EF6E  F008         	goto	u1391
  2800  0010D8  EF70  F008         	goto	u1390
  2801  0010DC                     u1391:
  2802  0010DC  EF50  F008         	goto	l296
  2803  0010E0                     u1390:
  2804  0010E0                     
  2805                           ;modbus.c: 178: };modbus.c: 179: LATBbits.LATB7 = 0;
  2806  0010E0  9E8A               	bcf	138,7,c	;volatile
  2807  0010E2                     
  2808                           ;modbus.c: 182: clearResponse();
  2809  0010E2  ECBC  F00E         	call	_clearResponse	;wreg free
  2810  0010E6  0012               	return		;funcret
  2811  0010E8                     __end_of_readInputReg:
  2812                           	callstack 0
  2813                           
  2814 ;; *************** function _readInputCoil *****************
  2815 ;; Defined at:
  2816 ;;		line 322 in file "modbus.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  2821 ;;  crc             2   26[COMRAM] unsigned int 
  2822 ;;  rc_Address      2   24[COMRAM] unsigned int 
  2823 ;;  k               1   36[COMRAM] unsigned char 
  2824 ;;  j               1   35[COMRAM] unsigned char 
  2825 ;;  i               1   34[COMRAM] unsigned char 
  2826 ;;  lsb             1   33[COMRAM] unsigned char 
  2827 ;;  l               1   32[COMRAM] unsigned char 
  2828 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  2829 ;;  remainder       1   28[COMRAM] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2839 ;;      Params:         0       0       0       0       0       0       0
  2840 ;;      Locals:        13       0       0       0       0       0       0
  2841 ;;      Temps:          4       0       0       0       0       0       0
  2842 ;;      Totals:        17       0       0       0       0       0       0
  2843 ;;Total ram usage:       17 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    5
  2846 ;; This function calls:
  2847 ;;		_clearResponse
  2848 ;;		_generateCRC
  2849 ;; This function is called by:
  2850 ;;		_decodeIt
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text10
  2855  000908                     __ptext10:
  2856                           	callstack 0
  2857  000908                     _readInputCoil:
  2858                           	callstack 24
  2859  000908                     
  2860                           ;modbus.c: 328: unsigned int rc_numCoils = 0;
  2861  000908  0E00               	movlw	0
  2862  00090A  6E66               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2863  00090C  0E00               	movlw	0
  2864  00090E  6E65               	movwf	readInputCoil@rc_numCoils^0,c
  2865                           
  2866                           ;modbus.c: 329: unsigned int crc = 0;
  2867  000910  0E00               	movlw	0
  2868  000912  6E63               	movwf	(readInputCoil@crc+1)^0,c
  2869  000914  0E00               	movlw	0
  2870  000916  6E62               	movwf	readInputCoil@crc^0,c
  2871                           
  2872                           ;modbus.c: 331: unsigned char howManyBytes = 0;
  2873  000918  0E00               	movlw	0
  2874  00091A  6E67               	movwf	readInputCoil@howManyBytes^0,c
  2875                           
  2876                           ;modbus.c: 332: unsigned char remainder = 0;
  2877  00091C  0E00               	movlw	0
  2878  00091E  6E64               	movwf	readInputCoil@remainder^0,c
  2879                           
  2880                           ;modbus.c: 333: unsigned char lsb = 0;
  2881  000920  0E00               	movlw	0
  2882  000922  6E69               	movwf	readInputCoil@lsb^0,c
  2883                           
  2884                           ;modbus.c: 334: unsigned char i,j,k,l = 0;
  2885  000924  0E00               	movlw	0
  2886  000926  6E68               	movwf	readInputCoil@l^0,c
  2887  000928                     
  2888                           ;modbus.c: 337: rc_Address = received[2];
  2889  000928  C102  F060         	movff	_received+2,readInputCoil@rc_Address	;volatile
  2890  00092C  6A61               	clrf	(readInputCoil@rc_Address+1)^0,c
  2891                           
  2892                           ;modbus.c: 338: rc_Address <<=8;
  2893  00092E  5060               	movf	readInputCoil@rc_Address^0,w,c
  2894  000930  6E61               	movwf	(readInputCoil@rc_Address+1)^0,c
  2895  000932  6A60               	clrf	readInputCoil@rc_Address^0,c
  2896  000934                     
  2897                           ;modbus.c: 339: rc_Address |= received[3];
  2898  000934  0101               	movlb	1	; () banked
  2899  000936  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2900  000938  1260               	iorwf	readInputCoil@rc_Address^0,f,c
  2901  00093A                     
  2902                           ; BSR set to: 1
  2903                           ;modbus.c: 342: rc_numCoils = received[4];
  2904  00093A  C104  F065         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  2905  00093E  6A66               	clrf	(readInputCoil@rc_numCoils+1)^0,c
  2906  000940                     
  2907                           ; BSR set to: 1
  2908                           ;modbus.c: 343: rc_numCoils <<= 8;
  2909  000940  5065               	movf	readInputCoil@rc_numCoils^0,w,c
  2910  000942  6E66               	movwf	(readInputCoil@rc_numCoils+1)^0,c
  2911  000944  6A65               	clrf	readInputCoil@rc_numCoils^0,c
  2912                           
  2913                           ;modbus.c: 344: rc_numCoils |= received[5];
  2914  000946  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2915  000948  1265               	iorwf	readInputCoil@rc_numCoils^0,f,c
  2916  00094A                     
  2917                           ; BSR set to: 1
  2918                           ;modbus.c: 346: response[0] = 1;
  2919  00094A  0E01               	movlw	1
  2920  00094C  0100               	movlb	0	; () banked
  2921  00094E  6F80               	movwf	_response& (0+255),b	;volatile
  2922  000950                     
  2923                           ; BSR set to: 0
  2924                           ;modbus.c: 347: response[1] = 0x02;
  2925  000950  0E02               	movlw	2
  2926  000952  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  2927                           
  2928                           ;modbus.c: 349: howManyBytes = rc_numCoils/8;
  2929  000954  C065  F05C         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  2930  000958  C066  F05D         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  2931  00095C  90D8               	bcf	status,0,c
  2932  00095E  325D               	rrcf	(??_readInputCoil+1)^0,f,c
  2933  000960  325C               	rrcf	??_readInputCoil^0,f,c
  2934  000962  90D8               	bcf	status,0,c
  2935  000964  325D               	rrcf	(??_readInputCoil+1)^0,f,c
  2936  000966  325C               	rrcf	??_readInputCoil^0,f,c
  2937  000968  90D8               	bcf	status,0,c
  2938  00096A  325D               	rrcf	(??_readInputCoil+1)^0,f,c
  2939  00096C  325C               	rrcf	??_readInputCoil^0,f,c
  2940  00096E  505C               	movf	??_readInputCoil^0,w,c
  2941  000970  6E67               	movwf	readInputCoil@howManyBytes^0,c
  2942                           
  2943                           ;modbus.c: 350: remainder = rc_numCoils % 8;
  2944  000972  5065               	movf	readInputCoil@rc_numCoils^0,w,c
  2945  000974  0B07               	andlw	7
  2946  000976  6E64               	movwf	readInputCoil@remainder^0,c
  2947  000978                     
  2948                           ; BSR set to: 0
  2949                           ;modbus.c: 352: if(remainder){
  2950  000978  5064               	movf	readInputCoil@remainder^0,w,c
  2951  00097A  B4D8               	btfsc	status,2,c
  2952  00097C  EFC2  F004         	goto	u1211
  2953  000980  EFC4  F004         	goto	u1210
  2954  000984                     u1211:
  2955  000984  EFC5  F004         	goto	l2434
  2956  000988                     u1210:
  2957  000988                     
  2958                           ; BSR set to: 0
  2959                           ;modbus.c: 353: howManyBytes += 1;
  2960  000988  2A67               	incf	readInputCoil@howManyBytes^0,f,c
  2961  00098A                     l2434:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;modbus.c: 354: };modbus.c: 355: response[2] = howManyBytes;
  2965  00098A  C067  F082         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  2966  00098E                     
  2967                           ; BSR set to: 0
  2968                           ;modbus.c: 357: l = rc_Address;
  2969  00098E  C060  F068         	movff	readInputCoil@rc_Address,readInputCoil@l
  2970  000992                     
  2971                           ; BSR set to: 0
  2972                           ;modbus.c: 358: k = 3;
  2973  000992  0E03               	movlw	3
  2974  000994  6E6C               	movwf	readInputCoil@k^0,c
  2975  000996                     
  2976                           ; BSR set to: 0
  2977                           ;modbus.c: 360: for(i=howManyBytes; i!=0; i--){
  2978  000996  C067  F06A         	movff	readInputCoil@howManyBytes,readInputCoil@i
  2979  00099A                     l2442:
  2980  00099A  506A               	movf	readInputCoil@i^0,w,c
  2981  00099C  A4D8               	btfss	status,2,c
  2982  00099E  EFD3  F004         	goto	u1221
  2983  0009A2  EFD5  F004         	goto	u1220
  2984  0009A6                     u1221:
  2985  0009A6  EFD7  F004         	goto	l2446
  2986  0009AA                     u1220:
  2987  0009AA  EF53  F005         	goto	l2490
  2988  0009AE                     l2446:
  2989                           
  2990                           ;modbus.c: 361: if(i>1){
  2991  0009AE  0E01               	movlw	1
  2992  0009B0  646A               	cpfsgt	readInputCoil@i^0,c
  2993  0009B2  EFDD  F004         	goto	u1231
  2994  0009B6  EFDF  F004         	goto	u1230
  2995  0009BA                     u1231:
  2996  0009BA  EF17  F005         	goto	l2470
  2997  0009BE                     u1230:
  2998  0009BE                     
  2999                           ;modbus.c: 362: for(j=0;j!=8;j++){
  3000  0009BE  0E00               	movlw	0
  3001  0009C0  6E6B               	movwf	readInputCoil@j^0,c
  3002  0009C2                     l2454:
  3003                           
  3004                           ;modbus.c: 363: if(coils[l]){
  3005  0009C2  0E01               	movlw	low _coils
  3006  0009C4  2468               	addwf	readInputCoil@l^0,w,c
  3007  0009C6  6ED9               	movwf	fsr2l,c
  3008  0009C8  6ADA               	clrf	fsr2h,c
  3009  0009CA  0E00               	movlw	high _coils
  3010  0009CC  22DA               	addwfc	fsr2h,f,c
  3011  0009CE  50DF               	movf	indf2,w,c
  3012  0009D0  B4D8               	btfsc	status,2,c
  3013  0009D2  EFED  F004         	goto	u1241
  3014  0009D6  EFEF  F004         	goto	u1240
  3015  0009DA                     u1241:
  3016  0009DA  EFF3  F004         	goto	l2458
  3017  0009DE                     u1240:
  3018  0009DE                     
  3019                           ;modbus.c: 364: lsb = 1;
  3020  0009DE  0E01               	movlw	1
  3021  0009E0  6E69               	movwf	readInputCoil@lsb^0,c
  3022                           
  3023                           ;modbus.c: 365: }
  3024  0009E2  EFF5  F004         	goto	l2460
  3025  0009E6                     l2458:
  3026                           
  3027                           ;modbus.c: 366: else{;modbus.c: 367: lsb = 0;
  3028  0009E6  0E00               	movlw	0
  3029  0009E8  6E69               	movwf	readInputCoil@lsb^0,c
  3030  0009EA                     l2460:
  3031                           
  3032                           ;modbus.c: 368: };modbus.c: 369: response[k] ^= (lsb << j);
  3033  0009EA  C06B  F05C         	movff	readInputCoil@j,??_readInputCoil
  3034  0009EE  C069  F05D         	movff	readInputCoil@lsb,??_readInputCoil+1
  3035  0009F2  2A5C               	incf	??_readInputCoil^0,f,c
  3036  0009F4  EFFE  F004         	goto	u1254
  3037  0009F8                     u1255:
  3038  0009F8  90D8               	bcf	status,0,c
  3039  0009FA  365D               	rlcf	(??_readInputCoil+1)^0,f,c
  3040  0009FC                     u1254:
  3041  0009FC  2E5C               	decfsz	??_readInputCoil^0,f,c
  3042  0009FE  EFFC  F004         	goto	u1255
  3043  000A02  0E80               	movlw	low _response
  3044  000A04  246C               	addwf	readInputCoil@k^0,w,c
  3045  000A06  6ED9               	movwf	fsr2l,c
  3046  000A08  6ADA               	clrf	fsr2h,c
  3047  000A0A  0E00               	movlw	high _response
  3048  000A0C  22DA               	addwfc	fsr2h,f,c
  3049  000A0E  505D               	movf	(??_readInputCoil+1)^0,w,c
  3050  000A10  1ADF               	xorwf	indf2,f,c
  3051  000A12                     
  3052                           ;modbus.c: 370: l++;
  3053  000A12  2A68               	incf	readInputCoil@l^0,f,c
  3054  000A14  2A6B               	incf	readInputCoil@j^0,f,c
  3055  000A16  0E08               	movlw	8
  3056  000A18  186B               	xorwf	readInputCoil@j^0,w,c
  3057  000A1A  A4D8               	btfss	status,2,c
  3058  000A1C  EF12  F005         	goto	u1261
  3059  000A20  EF14  F005         	goto	u1260
  3060  000A24                     u1261:
  3061  000A24  EFE1  F004         	goto	l2454
  3062  000A28                     u1260:
  3063  000A28                     l2468:
  3064                           
  3065                           ;modbus.c: 371: };modbus.c: 372: k++;
  3066  000A28  2A6C               	incf	readInputCoil@k^0,f,c
  3067                           
  3068                           ;modbus.c: 373: }
  3069  000A2A  EF50  F005         	goto	l342
  3070  000A2E                     l2470:
  3071                           
  3072                           ;modbus.c: 374: else{;modbus.c: 375: for(j=0;j!=remainder;j++){
  3073  000A2E  0E00               	movlw	0
  3074  000A30  6E6B               	movwf	readInputCoil@j^0,c
  3075  000A32  EF45  F005         	goto	l2484
  3076  000A36                     l2472:
  3077                           
  3078                           ;modbus.c: 376: if(coils[l]){
  3079  000A36  0E01               	movlw	low _coils
  3080  000A38  2468               	addwf	readInputCoil@l^0,w,c
  3081  000A3A  6ED9               	movwf	fsr2l,c
  3082  000A3C  6ADA               	clrf	fsr2h,c
  3083  000A3E  0E00               	movlw	high _coils
  3084  000A40  22DA               	addwfc	fsr2h,f,c
  3085  000A42  50DF               	movf	indf2,w,c
  3086  000A44  B4D8               	btfsc	status,2,c
  3087  000A46  EF27  F005         	goto	u1271
  3088  000A4A  EF29  F005         	goto	u1270
  3089  000A4E                     u1271:
  3090  000A4E  EF2D  F005         	goto	l2476
  3091  000A52                     u1270:
  3092  000A52                     
  3093                           ;modbus.c: 377: lsb = 1;
  3094  000A52  0E01               	movlw	1
  3095  000A54  6E69               	movwf	readInputCoil@lsb^0,c
  3096                           
  3097                           ;modbus.c: 378: }
  3098  000A56  EF2F  F005         	goto	l2478
  3099  000A5A                     l2476:
  3100                           
  3101                           ;modbus.c: 379: else{;modbus.c: 380: lsb = 0;
  3102  000A5A  0E00               	movlw	0
  3103  000A5C  6E69               	movwf	readInputCoil@lsb^0,c
  3104  000A5E                     l2478:
  3105                           
  3106                           ;modbus.c: 381: };modbus.c: 382: response[k] ^= (lsb << j);
  3107  000A5E  C06B  F05C         	movff	readInputCoil@j,??_readInputCoil
  3108  000A62  C069  F05D         	movff	readInputCoil@lsb,??_readInputCoil+1
  3109  000A66  2A5C               	incf	??_readInputCoil^0,f,c
  3110  000A68  EF38  F005         	goto	u1284
  3111  000A6C                     u1285:
  3112  000A6C  90D8               	bcf	status,0,c
  3113  000A6E  365D               	rlcf	(??_readInputCoil+1)^0,f,c
  3114  000A70                     u1284:
  3115  000A70  2E5C               	decfsz	??_readInputCoil^0,f,c
  3116  000A72  EF36  F005         	goto	u1285
  3117  000A76  0E80               	movlw	low _response
  3118  000A78  246C               	addwf	readInputCoil@k^0,w,c
  3119  000A7A  6ED9               	movwf	fsr2l,c
  3120  000A7C  6ADA               	clrf	fsr2h,c
  3121  000A7E  0E00               	movlw	high _response
  3122  000A80  22DA               	addwfc	fsr2h,f,c
  3123  000A82  505D               	movf	(??_readInputCoil+1)^0,w,c
  3124  000A84  1ADF               	xorwf	indf2,f,c
  3125  000A86                     
  3126                           ;modbus.c: 383: l++;
  3127  000A86  2A68               	incf	readInputCoil@l^0,f,c
  3128  000A88  2A6B               	incf	readInputCoil@j^0,f,c
  3129  000A8A                     l2484:
  3130  000A8A  5064               	movf	readInputCoil@remainder^0,w,c
  3131  000A8C  186B               	xorwf	readInputCoil@j^0,w,c
  3132  000A8E  A4D8               	btfss	status,2,c
  3133  000A90  EF4C  F005         	goto	u1291
  3134  000A94  EF4E  F005         	goto	u1290
  3135  000A98                     u1291:
  3136  000A98  EF1B  F005         	goto	l2472
  3137  000A9C                     u1290:
  3138  000A9C  EF14  F005         	goto	l2468
  3139  000AA0                     l342:
  3140  000AA0  066A               	decf	readInputCoil@i^0,f,c
  3141  000AA2  EFCD  F004         	goto	l2442
  3142  000AA6                     l2490:
  3143                           
  3144                           ;modbus.c: 386: };modbus.c: 387: };modbus.c: 388: crc = generateCRC(k+2);
  3145  000AA6  506C               	movf	readInputCoil@k^0,w,c
  3146  000AA8  0F02               	addlw	2
  3147  000AAA  EC69  F00C         	call	_generateCRC
  3148  000AAE  C04A  F062         	movff	?_generateCRC,readInputCoil@crc
  3149  000AB2  C04B  F063         	movff	?_generateCRC+1,readInputCoil@crc+1
  3150  000AB6                     
  3151                           ;modbus.c: 390: response[k] = crc >> 8;
  3152  000AB6  0E80               	movlw	low _response
  3153  000AB8  246C               	addwf	readInputCoil@k^0,w,c
  3154  000ABA  6ED9               	movwf	fsr2l,c
  3155  000ABC  6ADA               	clrf	fsr2h,c
  3156  000ABE  0E00               	movlw	high _response
  3157  000AC0  22DA               	addwfc	fsr2h,f,c
  3158  000AC2  5063               	movf	(readInputCoil@crc+1)^0,w,c
  3159  000AC4  6EDF               	movwf	indf2,c
  3160  000AC6                     
  3161                           ;modbus.c: 391: response[k+1] = crc;
  3162  000AC6  0E81               	movlw	low (_response+1)
  3163  000AC8  246C               	addwf	readInputCoil@k^0,w,c
  3164  000ACA  6ED9               	movwf	fsr2l,c
  3165  000ACC  6ADA               	clrf	fsr2h,c
  3166  000ACE  0E00               	movlw	high (_response+1)
  3167  000AD0  22DA               	addwfc	fsr2h,f,c
  3168  000AD2  C062  FFDF         	movff	readInputCoil@crc,indf2
  3169  000AD6                     
  3170                           ;modbus.c: 393: LATBbits.LATB7 = 1;
  3171  000AD6  8E8A               	bsf	138,7,c	;volatile
  3172  000AD8                     
  3173                           ;modbus.c: 394: for(i=0;i!=(k+3);i++){
  3174  000AD8  0E00               	movlw	0
  3175  000ADA  6E6A               	movwf	readInputCoil@i^0,c
  3176  000ADC  EF80  F005         	goto	l2504
  3177  000AE0                     l350:
  3178  000AE0  A2AC               	btfss	172,1,c	;volatile
  3179  000AE2  EF75  F005         	goto	u1301
  3180  000AE6  EF77  F005         	goto	u1300
  3181  000AEA                     u1301:
  3182  000AEA  EF70  F005         	goto	l350
  3183  000AEE                     u1300:
  3184  000AEE                     
  3185                           ;modbus.c: 396: TXREG = response[i];
  3186  000AEE  0E80               	movlw	low _response
  3187  000AF0  246A               	addwf	readInputCoil@i^0,w,c
  3188  000AF2  6ED9               	movwf	fsr2l,c
  3189  000AF4  6ADA               	clrf	fsr2h,c
  3190  000AF6  0E00               	movlw	high _response
  3191  000AF8  22DA               	addwfc	fsr2h,f,c
  3192  000AFA  50DF               	movf	indf2,w,c
  3193  000AFC  6EAD               	movwf	173,c	;volatile
  3194  000AFE  2A6A               	incf	readInputCoil@i^0,f,c
  3195  000B00                     l2504:
  3196  000B00  506A               	movf	readInputCoil@i^0,w,c
  3197  000B02  6E5C               	movwf	??_readInputCoil^0,c
  3198  000B04  6A5D               	clrf	(??_readInputCoil+1)^0,c
  3199  000B06  506C               	movf	readInputCoil@k^0,w,c
  3200  000B08  6E5E               	movwf	(??_readInputCoil+2)^0,c
  3201  000B0A  6A5F               	clrf	(??_readInputCoil+3)^0,c
  3202  000B0C  0E03               	movlw	3
  3203  000B0E  265E               	addwf	(??_readInputCoil+2)^0,f,c
  3204  000B10  0E00               	movlw	0
  3205  000B12  225F               	addwfc	(??_readInputCoil+3)^0,f,c
  3206  000B14  505C               	movf	??_readInputCoil^0,w,c
  3207  000B16  185E               	xorwf	(??_readInputCoil+2)^0,w,c
  3208  000B18  E107               	bnz	u1311
  3209  000B1A  505D               	movf	(??_readInputCoil+1)^0,w,c
  3210  000B1C  185F               	xorwf	(??_readInputCoil+3)^0,w,c
  3211  000B1E  A4D8               	btfss	status,2,c
  3212  000B20  EF94  F005         	goto	u1311
  3213  000B24  EF96  F005         	goto	u1310
  3214  000B28                     u1311:
  3215  000B28  EF70  F005         	goto	l350
  3216  000B2C                     u1310:
  3217  000B2C                     
  3218                           ;modbus.c: 397: };modbus.c: 398: LATBbits.LATB7 = 0;
  3219  000B2C  9E8A               	bcf	138,7,c	;volatile
  3220  000B2E                     
  3221                           ;modbus.c: 399: clearResponse();
  3222  000B2E  ECBC  F00E         	call	_clearResponse	;wreg free
  3223  000B32  0012               	return		;funcret
  3224  000B34                     __end_of_readInputCoil:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _readCoil *****************
  3228 ;; Defined at:
  3229 ;;		line 242 in file "modbus.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  rc_numCoils     2   29[COMRAM] unsigned int 
  3234 ;;  crc             2   26[COMRAM] unsigned int 
  3235 ;;  rc_Address      2   24[COMRAM] unsigned int 
  3236 ;;  k               1   36[COMRAM] unsigned char 
  3237 ;;  j               1   35[COMRAM] unsigned char 
  3238 ;;  i               1   34[COMRAM] unsigned char 
  3239 ;;  lsb             1   33[COMRAM] unsigned char 
  3240 ;;  l               1   32[COMRAM] unsigned char 
  3241 ;;  howManyBytes    1   31[COMRAM] unsigned char 
  3242 ;;  remainder       1   28[COMRAM] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3252 ;;      Params:         0       0       0       0       0       0       0
  3253 ;;      Locals:        13       0       0       0       0       0       0
  3254 ;;      Temps:          4       0       0       0       0       0       0
  3255 ;;      Totals:        17       0       0       0       0       0       0
  3256 ;;Total ram usage:       17 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    5
  3259 ;; This function calls:
  3260 ;;		_clearResponse
  3261 ;;		_generateCRC
  3262 ;; This function is called by:
  3263 ;;		_decodeIt
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text11
  3268  000B34                     __ptext11:
  3269                           	callstack 0
  3270  000B34                     _readCoil:
  3271                           	callstack 24
  3272  000B34                     
  3273                           ;modbus.c: 248: unsigned int rc_numCoils = 0;
  3274  000B34  0E00               	movlw	0
  3275  000B36  6E66               	movwf	(readCoil@rc_numCoils+1)^0,c
  3276  000B38  0E00               	movlw	0
  3277  000B3A  6E65               	movwf	readCoil@rc_numCoils^0,c
  3278                           
  3279                           ;modbus.c: 249: unsigned int crc = 0;
  3280  000B3C  0E00               	movlw	0
  3281  000B3E  6E63               	movwf	(readCoil@crc+1)^0,c
  3282  000B40  0E00               	movlw	0
  3283  000B42  6E62               	movwf	readCoil@crc^0,c
  3284                           
  3285                           ;modbus.c: 251: unsigned char howManyBytes = 0;
  3286  000B44  0E00               	movlw	0
  3287  000B46  6E67               	movwf	readCoil@howManyBytes^0,c
  3288                           
  3289                           ;modbus.c: 252: unsigned char remainder = 0;
  3290  000B48  0E00               	movlw	0
  3291  000B4A  6E64               	movwf	readCoil@remainder^0,c
  3292                           
  3293                           ;modbus.c: 253: unsigned char lsb = 0;
  3294  000B4C  0E00               	movlw	0
  3295  000B4E  6E69               	movwf	readCoil@lsb^0,c
  3296                           
  3297                           ;modbus.c: 254: unsigned char i,j,k,l = 0;
  3298  000B50  0E00               	movlw	0
  3299  000B52  6E68               	movwf	readCoil@l^0,c
  3300  000B54                     
  3301                           ;modbus.c: 257: rc_Address = received[2];
  3302  000B54  C102  F060         	movff	_received+2,readCoil@rc_Address	;volatile
  3303  000B58  6A61               	clrf	(readCoil@rc_Address+1)^0,c
  3304                           
  3305                           ;modbus.c: 258: rc_Address <<=8;
  3306  000B5A  5060               	movf	readCoil@rc_Address^0,w,c
  3307  000B5C  6E61               	movwf	(readCoil@rc_Address+1)^0,c
  3308  000B5E  6A60               	clrf	readCoil@rc_Address^0,c
  3309  000B60                     
  3310                           ;modbus.c: 259: rc_Address |= received[3];
  3311  000B60  0101               	movlb	1	; () banked
  3312  000B62  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  3313  000B64  1260               	iorwf	readCoil@rc_Address^0,f,c
  3314  000B66                     
  3315                           ; BSR set to: 1
  3316                           ;modbus.c: 262: rc_numCoils = received[4];
  3317  000B66  C104  F065         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3318  000B6A  6A66               	clrf	(readCoil@rc_numCoils+1)^0,c
  3319  000B6C                     
  3320                           ; BSR set to: 1
  3321                           ;modbus.c: 263: rc_numCoils <<= 8;
  3322  000B6C  5065               	movf	readCoil@rc_numCoils^0,w,c
  3323  000B6E  6E66               	movwf	(readCoil@rc_numCoils+1)^0,c
  3324  000B70  6A65               	clrf	readCoil@rc_numCoils^0,c
  3325                           
  3326                           ;modbus.c: 264: rc_numCoils |= received[5];
  3327  000B72  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  3328  000B74  1265               	iorwf	readCoil@rc_numCoils^0,f,c
  3329  000B76                     
  3330                           ; BSR set to: 1
  3331                           ;modbus.c: 266: response[0] = 1;
  3332  000B76  0E01               	movlw	1
  3333  000B78  0100               	movlb	0	; () banked
  3334  000B7A  6F80               	movwf	_response& (0+255),b	;volatile
  3335  000B7C                     
  3336                           ; BSR set to: 0
  3337                           ;modbus.c: 267: response[1] = 0x01;
  3338  000B7C  0E01               	movlw	1
  3339  000B7E  6F81               	movwf	(_response+1)& (0+255),b	;volatile
  3340                           
  3341                           ;modbus.c: 269: howManyBytes = rc_numCoils/8;
  3342  000B80  C065  F05C         	movff	readCoil@rc_numCoils,??_readCoil
  3343  000B84  C066  F05D         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3344  000B88  90D8               	bcf	status,0,c
  3345  000B8A  325D               	rrcf	(??_readCoil+1)^0,f,c
  3346  000B8C  325C               	rrcf	??_readCoil^0,f,c
  3347  000B8E  90D8               	bcf	status,0,c
  3348  000B90  325D               	rrcf	(??_readCoil+1)^0,f,c
  3349  000B92  325C               	rrcf	??_readCoil^0,f,c
  3350  000B94  90D8               	bcf	status,0,c
  3351  000B96  325D               	rrcf	(??_readCoil+1)^0,f,c
  3352  000B98  325C               	rrcf	??_readCoil^0,f,c
  3353  000B9A  505C               	movf	??_readCoil^0,w,c
  3354  000B9C  6E67               	movwf	readCoil@howManyBytes^0,c
  3355                           
  3356                           ;modbus.c: 270: remainder = rc_numCoils % 8;
  3357  000B9E  5065               	movf	readCoil@rc_numCoils^0,w,c
  3358  000BA0  0B07               	andlw	7
  3359  000BA2  6E64               	movwf	readCoil@remainder^0,c
  3360  000BA4                     
  3361                           ; BSR set to: 0
  3362                           ;modbus.c: 272: if(remainder){
  3363  000BA4  5064               	movf	readCoil@remainder^0,w,c
  3364  000BA6  B4D8               	btfsc	status,2,c
  3365  000BA8  EFD8  F005         	goto	u1101
  3366  000BAC  EFDA  F005         	goto	u1100
  3367  000BB0                     u1101:
  3368  000BB0  EFDB  F005         	goto	l2342
  3369  000BB4                     u1100:
  3370  000BB4                     
  3371                           ; BSR set to: 0
  3372                           ;modbus.c: 273: howManyBytes += 1;
  3373  000BB4  2A67               	incf	readCoil@howManyBytes^0,f,c
  3374  000BB6                     l2342:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;modbus.c: 274: };modbus.c: 275: response[2] = howManyBytes;
  3378  000BB6  C067  F082         	movff	readCoil@howManyBytes,_response+2	;volatile
  3379  000BBA                     
  3380                           ; BSR set to: 0
  3381                           ;modbus.c: 277: l = rc_Address;
  3382  000BBA  C060  F068         	movff	readCoil@rc_Address,readCoil@l
  3383  000BBE                     
  3384                           ; BSR set to: 0
  3385                           ;modbus.c: 278: k = 3;
  3386  000BBE  0E03               	movlw	3
  3387  000BC0  6E6C               	movwf	readCoil@k^0,c
  3388  000BC2                     
  3389                           ; BSR set to: 0
  3390                           ;modbus.c: 280: for(i=howManyBytes; i!=0; i--){
  3391  000BC2  C067  F06A         	movff	readCoil@howManyBytes,readCoil@i
  3392  000BC6                     l2350:
  3393  000BC6  506A               	movf	readCoil@i^0,w,c
  3394  000BC8  A4D8               	btfss	status,2,c
  3395  000BCA  EFE9  F005         	goto	u1111
  3396  000BCE  EFEB  F005         	goto	u1110
  3397  000BD2                     u1111:
  3398  000BD2  EFED  F005         	goto	l2354
  3399  000BD6                     u1110:
  3400  000BD6  EF69  F006         	goto	l2398
  3401  000BDA                     l2354:
  3402                           
  3403                           ;modbus.c: 281: if(i>1){
  3404  000BDA  0E01               	movlw	1
  3405  000BDC  646A               	cpfsgt	readCoil@i^0,c
  3406  000BDE  EFF3  F005         	goto	u1121
  3407  000BE2  EFF5  F005         	goto	u1120
  3408  000BE6                     u1121:
  3409  000BE6  EF2D  F006         	goto	l2378
  3410  000BEA                     u1120:
  3411  000BEA                     
  3412                           ;modbus.c: 282: for(j=0;j!=8;j++){
  3413  000BEA  0E00               	movlw	0
  3414  000BEC  6E6B               	movwf	readCoil@j^0,c
  3415  000BEE                     l2362:
  3416                           
  3417                           ;modbus.c: 283: if(coils[l]){
  3418  000BEE  0E01               	movlw	low _coils
  3419  000BF0  2468               	addwf	readCoil@l^0,w,c
  3420  000BF2  6ED9               	movwf	fsr2l,c
  3421  000BF4  6ADA               	clrf	fsr2h,c
  3422  000BF6  0E00               	movlw	high _coils
  3423  000BF8  22DA               	addwfc	fsr2h,f,c
  3424  000BFA  50DF               	movf	indf2,w,c
  3425  000BFC  B4D8               	btfsc	status,2,c
  3426  000BFE  EF03  F006         	goto	u1131
  3427  000C02  EF05  F006         	goto	u1130
  3428  000C06                     u1131:
  3429  000C06  EF09  F006         	goto	l2366
  3430  000C0A                     u1130:
  3431  000C0A                     
  3432                           ;modbus.c: 284: lsb = 1;
  3433  000C0A  0E01               	movlw	1
  3434  000C0C  6E69               	movwf	readCoil@lsb^0,c
  3435                           
  3436                           ;modbus.c: 285: }
  3437  000C0E  EF0B  F006         	goto	l2368
  3438  000C12                     l2366:
  3439                           
  3440                           ;modbus.c: 286: else{;modbus.c: 287: lsb = 0;
  3441  000C12  0E00               	movlw	0
  3442  000C14  6E69               	movwf	readCoil@lsb^0,c
  3443  000C16                     l2368:
  3444                           
  3445                           ;modbus.c: 288: };modbus.c: 289: response[k] ^= (lsb << j);
  3446  000C16  C06B  F05C         	movff	readCoil@j,??_readCoil
  3447  000C1A  C069  F05D         	movff	readCoil@lsb,??_readCoil+1
  3448  000C1E  2A5C               	incf	??_readCoil^0,f,c
  3449  000C20  EF14  F006         	goto	u1144
  3450  000C24                     u1145:
  3451  000C24  90D8               	bcf	status,0,c
  3452  000C26  365D               	rlcf	(??_readCoil+1)^0,f,c
  3453  000C28                     u1144:
  3454  000C28  2E5C               	decfsz	??_readCoil^0,f,c
  3455  000C2A  EF12  F006         	goto	u1145
  3456  000C2E  0E80               	movlw	low _response
  3457  000C30  246C               	addwf	readCoil@k^0,w,c
  3458  000C32  6ED9               	movwf	fsr2l,c
  3459  000C34  6ADA               	clrf	fsr2h,c
  3460  000C36  0E00               	movlw	high _response
  3461  000C38  22DA               	addwfc	fsr2h,f,c
  3462  000C3A  505D               	movf	(??_readCoil+1)^0,w,c
  3463  000C3C  1ADF               	xorwf	indf2,f,c
  3464  000C3E                     
  3465                           ;modbus.c: 290: l++;
  3466  000C3E  2A68               	incf	readCoil@l^0,f,c
  3467  000C40  2A6B               	incf	readCoil@j^0,f,c
  3468  000C42  0E08               	movlw	8
  3469  000C44  186B               	xorwf	readCoil@j^0,w,c
  3470  000C46  A4D8               	btfss	status,2,c
  3471  000C48  EF28  F006         	goto	u1151
  3472  000C4C  EF2A  F006         	goto	u1150
  3473  000C50                     u1151:
  3474  000C50  EFF7  F005         	goto	l2362
  3475  000C54                     u1150:
  3476  000C54                     l2376:
  3477                           
  3478                           ;modbus.c: 291: };modbus.c: 292: k++;
  3479  000C54  2A6C               	incf	readCoil@k^0,f,c
  3480                           
  3481                           ;modbus.c: 293: }
  3482  000C56  EF66  F006         	goto	l319
  3483  000C5A                     l2378:
  3484                           
  3485                           ;modbus.c: 294: else{;modbus.c: 295: for(j=0;j!=remainder;j++){
  3486  000C5A  0E00               	movlw	0
  3487  000C5C  6E6B               	movwf	readCoil@j^0,c
  3488  000C5E  EF5B  F006         	goto	l2392
  3489  000C62                     l2380:
  3490                           
  3491                           ;modbus.c: 296: if(coils[l]){
  3492  000C62  0E01               	movlw	low _coils
  3493  000C64  2468               	addwf	readCoil@l^0,w,c
  3494  000C66  6ED9               	movwf	fsr2l,c
  3495  000C68  6ADA               	clrf	fsr2h,c
  3496  000C6A  0E00               	movlw	high _coils
  3497  000C6C  22DA               	addwfc	fsr2h,f,c
  3498  000C6E  50DF               	movf	indf2,w,c
  3499  000C70  B4D8               	btfsc	status,2,c
  3500  000C72  EF3D  F006         	goto	u1161
  3501  000C76  EF3F  F006         	goto	u1160
  3502  000C7A                     u1161:
  3503  000C7A  EF43  F006         	goto	l2384
  3504  000C7E                     u1160:
  3505  000C7E                     
  3506                           ;modbus.c: 297: lsb = 1;
  3507  000C7E  0E01               	movlw	1
  3508  000C80  6E69               	movwf	readCoil@lsb^0,c
  3509                           
  3510                           ;modbus.c: 298: }
  3511  000C82  EF45  F006         	goto	l2386
  3512  000C86                     l2384:
  3513                           
  3514                           ;modbus.c: 299: else{;modbus.c: 300: lsb = 0;
  3515  000C86  0E00               	movlw	0
  3516  000C88  6E69               	movwf	readCoil@lsb^0,c
  3517  000C8A                     l2386:
  3518                           
  3519                           ;modbus.c: 301: };modbus.c: 302: response[k] ^= (lsb << j);
  3520  000C8A  C06B  F05C         	movff	readCoil@j,??_readCoil
  3521  000C8E  C069  F05D         	movff	readCoil@lsb,??_readCoil+1
  3522  000C92  2A5C               	incf	??_readCoil^0,f,c
  3523  000C94  EF4E  F006         	goto	u1174
  3524  000C98                     u1175:
  3525  000C98  90D8               	bcf	status,0,c
  3526  000C9A  365D               	rlcf	(??_readCoil+1)^0,f,c
  3527  000C9C                     u1174:
  3528  000C9C  2E5C               	decfsz	??_readCoil^0,f,c
  3529  000C9E  EF4C  F006         	goto	u1175
  3530  000CA2  0E80               	movlw	low _response
  3531  000CA4  246C               	addwf	readCoil@k^0,w,c
  3532  000CA6  6ED9               	movwf	fsr2l,c
  3533  000CA8  6ADA               	clrf	fsr2h,c
  3534  000CAA  0E00               	movlw	high _response
  3535  000CAC  22DA               	addwfc	fsr2h,f,c
  3536  000CAE  505D               	movf	(??_readCoil+1)^0,w,c
  3537  000CB0  1ADF               	xorwf	indf2,f,c
  3538  000CB2                     
  3539                           ;modbus.c: 303: l++;
  3540  000CB2  2A68               	incf	readCoil@l^0,f,c
  3541  000CB4  2A6B               	incf	readCoil@j^0,f,c
  3542  000CB6                     l2392:
  3543  000CB6  5064               	movf	readCoil@remainder^0,w,c
  3544  000CB8  186B               	xorwf	readCoil@j^0,w,c
  3545  000CBA  A4D8               	btfss	status,2,c
  3546  000CBC  EF62  F006         	goto	u1181
  3547  000CC0  EF64  F006         	goto	u1180
  3548  000CC4                     u1181:
  3549  000CC4  EF31  F006         	goto	l2380
  3550  000CC8                     u1180:
  3551  000CC8  EF2A  F006         	goto	l2376
  3552  000CCC                     l319:
  3553  000CCC  066A               	decf	readCoil@i^0,f,c
  3554  000CCE  EFE3  F005         	goto	l2350
  3555  000CD2                     l2398:
  3556                           
  3557                           ;modbus.c: 306: };modbus.c: 307: };modbus.c: 308: crc = generateCRC(k+2);
  3558  000CD2  506C               	movf	readCoil@k^0,w,c
  3559  000CD4  0F02               	addlw	2
  3560  000CD6  EC69  F00C         	call	_generateCRC
  3561  000CDA  C04A  F062         	movff	?_generateCRC,readCoil@crc
  3562  000CDE  C04B  F063         	movff	?_generateCRC+1,readCoil@crc+1
  3563  000CE2                     
  3564                           ;modbus.c: 310: response[k] = crc >> 8;
  3565  000CE2  0E80               	movlw	low _response
  3566  000CE4  246C               	addwf	readCoil@k^0,w,c
  3567  000CE6  6ED9               	movwf	fsr2l,c
  3568  000CE8  6ADA               	clrf	fsr2h,c
  3569  000CEA  0E00               	movlw	high _response
  3570  000CEC  22DA               	addwfc	fsr2h,f,c
  3571  000CEE  5063               	movf	(readCoil@crc+1)^0,w,c
  3572  000CF0  6EDF               	movwf	indf2,c
  3573  000CF2                     
  3574                           ;modbus.c: 311: response[k+1] = crc;
  3575  000CF2  0E81               	movlw	low (_response+1)
  3576  000CF4  246C               	addwf	readCoil@k^0,w,c
  3577  000CF6  6ED9               	movwf	fsr2l,c
  3578  000CF8  6ADA               	clrf	fsr2h,c
  3579  000CFA  0E00               	movlw	high (_response+1)
  3580  000CFC  22DA               	addwfc	fsr2h,f,c
  3581  000CFE  C062  FFDF         	movff	readCoil@crc,indf2
  3582  000D02                     
  3583                           ;modbus.c: 313: LATBbits.LATB7 = 1;
  3584  000D02  8E8A               	bsf	138,7,c	;volatile
  3585  000D04                     
  3586                           ;modbus.c: 314: for(i=0;i!=(k+3);i++){
  3587  000D04  0E00               	movlw	0
  3588  000D06  6E6A               	movwf	readCoil@i^0,c
  3589  000D08  EF96  F006         	goto	l2412
  3590  000D0C                     l327:
  3591  000D0C  A2AC               	btfss	172,1,c	;volatile
  3592  000D0E  EF8B  F006         	goto	u1191
  3593  000D12  EF8D  F006         	goto	u1190
  3594  000D16                     u1191:
  3595  000D16  EF86  F006         	goto	l327
  3596  000D1A                     u1190:
  3597  000D1A                     
  3598                           ;modbus.c: 316: TXREG = response[i];
  3599  000D1A  0E80               	movlw	low _response
  3600  000D1C  246A               	addwf	readCoil@i^0,w,c
  3601  000D1E  6ED9               	movwf	fsr2l,c
  3602  000D20  6ADA               	clrf	fsr2h,c
  3603  000D22  0E00               	movlw	high _response
  3604  000D24  22DA               	addwfc	fsr2h,f,c
  3605  000D26  50DF               	movf	indf2,w,c
  3606  000D28  6EAD               	movwf	173,c	;volatile
  3607  000D2A  2A6A               	incf	readCoil@i^0,f,c
  3608  000D2C                     l2412:
  3609  000D2C  506A               	movf	readCoil@i^0,w,c
  3610  000D2E  6E5C               	movwf	??_readCoil^0,c
  3611  000D30  6A5D               	clrf	(??_readCoil+1)^0,c
  3612  000D32  506C               	movf	readCoil@k^0,w,c
  3613  000D34  6E5E               	movwf	(??_readCoil+2)^0,c
  3614  000D36  6A5F               	clrf	(??_readCoil+3)^0,c
  3615  000D38  0E03               	movlw	3
  3616  000D3A  265E               	addwf	(??_readCoil+2)^0,f,c
  3617  000D3C  0E00               	movlw	0
  3618  000D3E  225F               	addwfc	(??_readCoil+3)^0,f,c
  3619  000D40  505C               	movf	??_readCoil^0,w,c
  3620  000D42  185E               	xorwf	(??_readCoil+2)^0,w,c
  3621  000D44  E107               	bnz	u1201
  3622  000D46  505D               	movf	(??_readCoil+1)^0,w,c
  3623  000D48  185F               	xorwf	(??_readCoil+3)^0,w,c
  3624  000D4A  A4D8               	btfss	status,2,c
  3625  000D4C  EFAA  F006         	goto	u1201
  3626  000D50  EFAC  F006         	goto	u1200
  3627  000D54                     u1201:
  3628  000D54  EF86  F006         	goto	l327
  3629  000D58                     u1200:
  3630  000D58                     
  3631                           ;modbus.c: 317: };modbus.c: 318: LATBbits.LATB7 = 0;
  3632  000D58  9E8A               	bcf	138,7,c	;volatile
  3633  000D5A                     
  3634                           ;modbus.c: 319: clearResponse();
  3635  000D5A  ECBC  F00E         	call	_clearResponse	;wreg free
  3636  000D5E  0012               	return		;funcret
  3637  000D60                     __end_of_readCoil:
  3638                           	callstack 0
  3639                           
  3640 ;; *************** function _generateCRC *****************
  3641 ;; Defined at:
  3642 ;;		line 463 in file "modbus.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  messageLengt    1    wreg     unsigned char 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  messageLengt    1    9[COMRAM] unsigned char 
  3647 ;;  crc             2   18[COMRAM] unsigned int 
  3648 ;;  j               2   16[COMRAM] int 
  3649 ;;  i               2   14[COMRAM] int 
  3650 ;;  crcHigh         2   12[COMRAM] unsigned int 
  3651 ;;  crcLow          2   10[COMRAM] unsigned int 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  2    2[COMRAM] unsigned int 
  3654 ;; Registers used:
  3655 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3661 ;;      Params:         2       0       0       0       0       0       0
  3662 ;;      Locals:        11       0       0       0       0       0       0
  3663 ;;      Temps:          5       0       0       0       0       0       0
  3664 ;;      Totals:        18       0       0       0       0       0       0
  3665 ;;Total ram usage:       18 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    2
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_readReg
  3672 ;;		_readInputReg
  3673 ;;		_writeReg
  3674 ;;		_readCoil
  3675 ;;		_readInputCoil
  3676 ;;		_writeCoil
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text12
  3681  0018D2                     __ptext12:
  3682                           	callstack 0
  3683  0018D2                     _generateCRC:
  3684                           	callstack 26
  3685                           
  3686                           ;incstack = 0
  3687                           ;generateCRC@messageLength stored from wreg
  3688  0018D2  6E51               	movwf	generateCRC@messageLength^0,c
  3689  0018D4                     
  3690                           ;modbus.c: 465: unsigned int crc = 0xFFFF;
  3691  0018D4  685A               	setf	generateCRC@crc^0,c
  3692  0018D6  685B               	setf	(generateCRC@crc+1)^0,c
  3693  0018D8                     
  3694                           ;modbus.c: 467: unsigned int crcLow = 0;
  3695  0018D8  0E00               	movlw	0
  3696  0018DA  6E53               	movwf	(generateCRC@crcLow+1)^0,c
  3697  0018DC  0E00               	movlw	0
  3698  0018DE  6E52               	movwf	generateCRC@crcLow^0,c
  3699                           
  3700                           ;modbus.c: 468: int i,j = 0;
  3701  0018E0  0E00               	movlw	0
  3702  0018E2  6E59               	movwf	(generateCRC@j+1)^0,c
  3703  0018E4  0E00               	movlw	0
  3704  0018E6  6E58               	movwf	generateCRC@j^0,c
  3705                           
  3706                           ;modbus.c: 470: for(i=0;i<messageLength-2;i++){
  3707  0018E8  0E00               	movlw	0
  3708  0018EA  6E57               	movwf	(generateCRC@i+1)^0,c
  3709  0018EC  0E00               	movlw	0
  3710  0018EE  6E56               	movwf	generateCRC@i^0,c
  3711  0018F0  EFA9  F00C         	goto	l2226
  3712  0018F4                     l2208:
  3713                           
  3714                           ;modbus.c: 471: crc ^= response[i];
  3715  0018F4  0E80               	movlw	low _response
  3716  0018F6  2456               	addwf	generateCRC@i^0,w,c
  3717  0018F8  6ED9               	movwf	fsr2l,c
  3718  0018FA  0E00               	movlw	high _response
  3719  0018FC  2057               	addwfc	(generateCRC@i+1)^0,w,c
  3720  0018FE  6EDA               	movwf	fsr2h,c
  3721  001900  50DF               	movf	indf2,w,c
  3722  001902  6E4C               	movwf	??_generateCRC^0,c
  3723  001904  504C               	movf	??_generateCRC^0,w,c
  3724  001906  1A5A               	xorwf	generateCRC@crc^0,f,c
  3725  001908                     
  3726                           ;modbus.c: 472: for(j=8; j!=0; j--){
  3727  001908  0E00               	movlw	0
  3728  00190A  6E59               	movwf	(generateCRC@j+1)^0,c
  3729  00190C  0E08               	movlw	8
  3730  00190E  6E58               	movwf	generateCRC@j^0,c
  3731  001910                     l369:
  3732                           
  3733                           ;modbus.c: 473: if((crc & 0x0001) != 0){
  3734  001910  A05A               	btfss	generateCRC@crc^0,0,c
  3735  001912  EF8D  F00C         	goto	u961
  3736  001916  EF8F  F00C         	goto	u960
  3737  00191A                     u961:
  3738  00191A  EF98  F00C         	goto	l2220
  3739  00191E                     u960:
  3740  00191E                     
  3741                           ;modbus.c: 474: crc >>= 1;
  3742  00191E  90D8               	bcf	status,0,c
  3743  001920  325B               	rrcf	(generateCRC@crc+1)^0,f,c
  3744  001922  325A               	rrcf	generateCRC@crc^0,f,c
  3745  001924                     
  3746                           ;modbus.c: 475: crc ^= 0xA001;
  3747  001924  0E01               	movlw	1
  3748  001926  1A5A               	xorwf	generateCRC@crc^0,f,c
  3749  001928  0EA0               	movlw	160
  3750  00192A  1A5B               	xorwf	(generateCRC@crc+1)^0,f,c
  3751                           
  3752                           ;modbus.c: 476: }
  3753  00192C  EF9B  F00C         	goto	l372
  3754  001930                     l2220:
  3755                           
  3756                           ;modbus.c: 477: else{;modbus.c: 478: crc >>= 1;
  3757  001930  90D8               	bcf	status,0,c
  3758  001932  325B               	rrcf	(generateCRC@crc+1)^0,f,c
  3759  001934  325A               	rrcf	generateCRC@crc^0,f,c
  3760  001936                     l372:
  3761  001936  0658               	decf	generateCRC@j^0,f,c
  3762  001938  A0D8               	btfss	status,0,c
  3763  00193A  0659               	decf	(generateCRC@j+1)^0,f,c
  3764  00193C  5058               	movf	generateCRC@j^0,w,c
  3765  00193E  1059               	iorwf	(generateCRC@j+1)^0,w,c
  3766  001940  A4D8               	btfss	status,2,c
  3767  001942  EFA5  F00C         	goto	u971
  3768  001946  EFA7  F00C         	goto	u970
  3769  00194A                     u971:
  3770  00194A  EF88  F00C         	goto	l369
  3771  00194E                     u970:
  3772  00194E  4A56               	infsnz	generateCRC@i^0,f,c
  3773  001950  2A57               	incf	(generateCRC@i+1)^0,f,c
  3774  001952                     l2226:
  3775  001952  0EFE               	movlw	254
  3776  001954  6E4C               	movwf	??_generateCRC^0,c
  3777  001956  0EFF               	movlw	255
  3778  001958  6E4D               	movwf	(??_generateCRC+1)^0,c
  3779  00195A  5051               	movf	generateCRC@messageLength^0,w,c
  3780  00195C  6E4E               	movwf	(??_generateCRC+2)^0,c
  3781  00195E  6A4F               	clrf	(??_generateCRC+3)^0,c
  3782  001960  504C               	movf	??_generateCRC^0,w,c
  3783  001962  264E               	addwf	(??_generateCRC+2)^0,f,c
  3784  001964  504D               	movf	(??_generateCRC+1)^0,w,c
  3785  001966  224F               	addwfc	(??_generateCRC+3)^0,f,c
  3786  001968  504E               	movf	(??_generateCRC+2)^0,w,c
  3787  00196A  5C56               	subwf	generateCRC@i^0,w,c
  3788  00196C  5057               	movf	(generateCRC@i+1)^0,w,c
  3789  00196E  0A80               	xorlw	128
  3790  001970  6E50               	movwf	(??_generateCRC+4)^0,c
  3791  001972  504F               	movf	(??_generateCRC+3)^0,w,c
  3792  001974  0A80               	xorlw	128
  3793  001976  5850               	subwfb	(??_generateCRC+4)^0,w,c
  3794  001978  A0D8               	btfss	status,0,c
  3795  00197A  EFC1  F00C         	goto	u981
  3796  00197E  EFC3  F00C         	goto	u980
  3797  001982                     u981:
  3798  001982  EF7A  F00C         	goto	l2208
  3799  001986                     u980:
  3800  001986                     
  3801                           ;modbus.c: 479: };modbus.c: 480: };modbus.c: 481: };modbus.c: 483: crcHigh = (crc & 0x00
      +                          FF) <<8;
  3802  001986  505A               	movf	generateCRC@crc^0,w,c
  3803  001988  6E4D               	movwf	(??_generateCRC+1)^0,c
  3804  00198A  6A4C               	clrf	??_generateCRC^0,c
  3805  00198C  C04C  F054         	movff	??_generateCRC,generateCRC@crcHigh
  3806  001990  C04D  F055         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  3807                           
  3808                           ;modbus.c: 484: crcLow = (crc & 0xFF00) >>8;
  3809  001994  C05A  F04C         	movff	generateCRC@crc,??_generateCRC
  3810  001998  C05B  F04D         	movff	generateCRC@crc+1,??_generateCRC+1
  3811  00199C  C04D  F04C         	movff	??_generateCRC+1,??_generateCRC
  3812  0019A0  6A4D               	clrf	(??_generateCRC+1)^0,c
  3813  0019A2  504C               	movf	??_generateCRC^0,w,c
  3814  0019A4  6E52               	movwf	generateCRC@crcLow^0,c
  3815  0019A6  6A53               	clrf	(generateCRC@crcLow+1)^0,c
  3816  0019A8                     
  3817                           ;modbus.c: 485: crcHigh |= crcLow;
  3818  0019A8  5052               	movf	generateCRC@crcLow^0,w,c
  3819  0019AA  1254               	iorwf	generateCRC@crcHigh^0,f,c
  3820  0019AC  5053               	movf	(generateCRC@crcLow+1)^0,w,c
  3821  0019AE  1255               	iorwf	(generateCRC@crcHigh+1)^0,f,c
  3822  0019B0                     
  3823                           ;modbus.c: 486: crc = crcHigh;
  3824  0019B0  C054  F05A         	movff	generateCRC@crcHigh,generateCRC@crc
  3825  0019B4  C055  F05B         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  3826  0019B8                     
  3827                           ;modbus.c: 487: return crc;
  3828  0019B8  C05A  F04A         	movff	generateCRC@crc,?_generateCRC
  3829  0019BC  C05B  F04B         	movff	generateCRC@crc+1,?_generateCRC+1
  3830  0019C0  0012               	return		;funcret
  3831  0019C2                     __end_of_generateCRC:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function _clearResponse *****************
  3835 ;; Defined at:
  3836 ;;		line 37 in file "modbus.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;		None
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  i               1    7[COMRAM] unsigned char 
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  1    wreg      void 
  3843 ;; Registers used:
  3844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3850 ;;      Params:         0       0       0       0       0       0       0
  3851 ;;      Locals:         1       0       0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0
  3853 ;;      Totals:         1       0       0       0       0       0       0
  3854 ;;Total ram usage:        1 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    4
  3857 ;; This function calls:
  3858 ;;		_ClsUSART
  3859 ;;		_OpnUSART
  3860 ;; This function is called by:
  3861 ;;		_readReg
  3862 ;;		_readInputReg
  3863 ;;		_writeReg
  3864 ;;		_readCoil
  3865 ;;		_readInputCoil
  3866 ;;		_writeCoil
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text13
  3871  001D78                     __ptext13:
  3872                           	callstack 0
  3873  001D78                     _clearResponse:
  3874                           	callstack 24
  3875  001D78                     
  3876                           ;modbus.c: 39: unsigned char i;;modbus.c: 40: for(i=0;i<125;i++){
  3877  001D78  0E00               	movlw	0
  3878  001D7A  6E4F               	movwf	clearResponse@i^0,c
  3879  001D7C                     l2196:
  3880                           
  3881                           ;modbus.c: 41: response[i] = 0;
  3882  001D7C  0E80               	movlw	low _response
  3883  001D7E  244F               	addwf	clearResponse@i^0,w,c
  3884  001D80  6ED9               	movwf	fsr2l,c
  3885  001D82  6ADA               	clrf	fsr2h,c
  3886  001D84  0E00               	movlw	high _response
  3887  001D86  22DA               	addwfc	fsr2h,f,c
  3888  001D88  0E00               	movlw	0
  3889  001D8A  6EDF               	movwf	indf2,c
  3890  001D8C  2A4F               	incf	clearResponse@i^0,f,c
  3891  001D8E  0E7C               	movlw	124
  3892  001D90  644F               	cpfsgt	clearResponse@i^0,c
  3893  001D92  EFCD  F00E         	goto	u951
  3894  001D96  EFCF  F00E         	goto	u950
  3895  001D9A                     u951:
  3896  001D9A  EFBE  F00E         	goto	l2196
  3897  001D9E                     u950:
  3898  001D9E                     
  3899                           ;modbus.c: 42: };modbus.c: 43: ClsUSART();
  3900  001D9E  ECF3  F00E         	call	_ClsUSART	;wreg free
  3901                           
  3902                           ;modbus.c: 44: OpnUSART();
  3903  001DA2  EC4A  F00E         	call	_OpnUSART	;wreg free
  3904  001DA6  0012               	return		;funcret
  3905  001DA8                     __end_of_clearResponse:
  3906                           	callstack 0
  3907                           
  3908 ;; *************** function _OpnUSART *****************
  3909 ;; Defined at:
  3910 ;;		line 23 in file "system.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  spbrg           4    3[COMRAM] unsigned long 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3924 ;;      Params:         0       0       0       0       0       0       0
  3925 ;;      Locals:         4       0       0       0       0       0       0
  3926 ;;      Temps:          1       0       0       0       0       0       0
  3927 ;;      Totals:         5       0       0       0       0       0       0
  3928 ;;Total ram usage:        5 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    3
  3931 ;; This function calls:
  3932 ;;		_ClsUSART
  3933 ;; This function is called by:
  3934 ;;		_main
  3935 ;;		_clearResponse
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text14
  3940  001C94                     __ptext14:
  3941                           	callstack 0
  3942  001C94                     _OpnUSART:
  3943                           	callstack 24
  3944  001C94                     
  3945                           ;system.c: 29: unsigned long spbrg = 0;
  3946  001C94  0E00               	movlw	0
  3947  001C96  6E4B               	movwf	OpnUSART@spbrg^0,c
  3948  001C98  0E00               	movlw	0
  3949  001C9A  6E4C               	movwf	(OpnUSART@spbrg+1)^0,c
  3950  001C9C  0E00               	movlw	0
  3951  001C9E  6E4D               	movwf	(OpnUSART@spbrg+2)^0,c
  3952  001CA0  0E00               	movlw	0
  3953  001CA2  6E4E               	movwf	(OpnUSART@spbrg+3)^0,c
  3954                           
  3955                           ;system.c: 31: spbrg = 10000000L/9600;
  3956  001CA4  0E11               	movlw	17
  3957  001CA6  6E4B               	movwf	OpnUSART@spbrg^0,c
  3958  001CA8  0E04               	movlw	4
  3959  001CAA  6E4C               	movwf	(OpnUSART@spbrg+1)^0,c
  3960  001CAC  0E00               	movlw	0
  3961  001CAE  6E4D               	movwf	(OpnUSART@spbrg+2)^0,c
  3962  001CB0  0E00               	movlw	0
  3963  001CB2  6E4E               	movwf	(OpnUSART@spbrg+3)^0,c
  3964  001CB4                     
  3965                           ;system.c: 32: spbrg /= 64;
  3966  001CB4  0E06               	movlw	6
  3967  001CB6  6E4A               	movwf	??_OpnUSART^0,c
  3968  001CB8                     u945:
  3969  001CB8  90D8               	bcf	status,0,c
  3970  001CBA  324E               	rrcf	(OpnUSART@spbrg+3)^0,f,c
  3971  001CBC  324D               	rrcf	(OpnUSART@spbrg+2)^0,f,c
  3972  001CBE  324C               	rrcf	(OpnUSART@spbrg+1)^0,f,c
  3973  001CC0  324B               	rrcf	OpnUSART@spbrg^0,f,c
  3974  001CC2  2E4A               	decfsz	??_OpnUSART^0,f,c
  3975  001CC4  EF5C  F00E         	goto	u945
  3976  001CC8                     
  3977                           ;system.c: 33: spbrg -= 1;
  3978  001CC8  064B               	decf	OpnUSART@spbrg^0,f,c
  3979  001CCA  0E00               	movlw	0
  3980  001CCC  5A4C               	subwfb	(OpnUSART@spbrg+1)^0,f,c
  3981  001CCE  5A4D               	subwfb	(OpnUSART@spbrg+2)^0,f,c
  3982  001CD0  5A4E               	subwfb	(OpnUSART@spbrg+3)^0,f,c
  3983  001CD2                     
  3984                           ;system.c: 34: ClsUSART();
  3985  001CD2  ECF3  F00E         	call	_ClsUSART	;wreg free
  3986  001CD6                     
  3987                           ;system.c: 35: TRISBbits.TRISB7 = 0;
  3988  001CD6  9E93               	bcf	147,7,c	;volatile
  3989  001CD8                     
  3990                           ;system.c: 36: LATBbits.LATB7 = 0;
  3991  001CD8  9E8A               	bcf	138,7,c	;volatile
  3992  001CDA                     
  3993                           ;system.c: 38: TXSTA = 0;
  3994  001CDA  0E00               	movlw	0
  3995  001CDC  6EAC               	movwf	172,c	;volatile
  3996  001CDE                     
  3997                           ;system.c: 39: RCSTA = 0;
  3998  001CDE  0E00               	movlw	0
  3999  001CE0  6EAB               	movwf	171,c	;volatile
  4000  001CE2                     
  4001                           ;system.c: 41: TRISCbits.TRISC6 = 0;
  4002  001CE2  9C94               	bcf	148,6,c	;volatile
  4003  001CE4                     
  4004                           ;system.c: 42: TRISCbits.TRISC7 = 1;
  4005  001CE4  8E94               	bsf	148,7,c	;volatile
  4006  001CE6                     
  4007                           ;system.c: 44: TXSTAbits.SYNC = 0;
  4008  001CE6  98AC               	bcf	172,4,c	;volatile
  4009  001CE8                     
  4010                           ;system.c: 45: TXSTAbits.TX9 = 0;
  4011  001CE8  9CAC               	bcf	172,6,c	;volatile
  4012  001CEA                     
  4013                           ;system.c: 46: TXSTAbits.SENDB = 0;
  4014  001CEA  96AC               	bcf	172,3,c	;volatile
  4015  001CEC                     
  4016                           ;system.c: 47: TXSTAbits.BRGH = 0;
  4017  001CEC  94AC               	bcf	172,2,c	;volatile
  4018  001CEE                     
  4019                           ;system.c: 49: RCSTAbits.CREN = 1;
  4020  001CEE  88AB               	bsf	171,4,c	;volatile
  4021  001CF0                     
  4022                           ;system.c: 50: RCSTAbits.RX9 = 0;
  4023  001CF0  9CAB               	bcf	171,6,c	;volatile
  4024  001CF2                     
  4025                           ;system.c: 52: PIE1bits.RCIE = 1;
  4026  001CF2  8A9D               	bsf	157,5,c	;volatile
  4027  001CF4                     
  4028                           ;system.c: 53: PIE1bits.TXIE = 0;
  4029  001CF4  989D               	bcf	157,4,c	;volatile
  4030  001CF6                     
  4031                           ;system.c: 55: BAUDCONbits.BRG16 = 0;
  4032  001CF6  96B8               	bcf	184,3,c	;volatile
  4033  001CF8                     
  4034                           ;system.c: 56: SPBRG = spbrg;
  4035  001CF8  C04B  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  4036  001CFC                     
  4037                           ;system.c: 58: TXSTAbits.TXEN = 1;
  4038  001CFC  8AAC               	bsf	172,5,c	;volatile
  4039  001CFE                     
  4040                           ;system.c: 59: RCSTAbits.SPEN = 1;
  4041  001CFE  8EAB               	bsf	171,7,c	;volatile
  4042  001D00  0012               	return		;funcret
  4043  001D02                     __end_of_OpnUSART:
  4044                           	callstack 0
  4045                           
  4046 ;; *************** function _ClsUSART *****************
  4047 ;; Defined at:
  4048 ;;		line 62 in file "system.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4062 ;;      Params:         0       0       0       0       0       0       0
  4063 ;;      Locals:         0       0       0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0
  4065 ;;      Totals:         0       0       0       0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    2
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_OpnUSART
  4073 ;;		_clearResponse
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text15
  4078  001DE6                     __ptext15:
  4079                           	callstack 0
  4080  001DE6                     _ClsUSART:
  4081                           	callstack 24
  4082  001DE6                     
  4083                           ;system.c: 65: RCSTA &= 0b01001111;
  4084  001DE6  0E4F               	movlw	79
  4085  001DE8  16AB               	andwf	171,f,c	;volatile
  4086  001DEA                     
  4087                           ;system.c: 66: TXSTAbits.TXEN = 0;
  4088  001DEA  9AAC               	bcf	172,5,c	;volatile
  4089                           
  4090                           ;system.c: 67: PIE1 &= 0b11001111;
  4091  001DEC  0ECF               	movlw	207
  4092  001DEE  169D               	andwf	157,f,c	;volatile
  4093  001DF0  0012               	return		;funcret
  4094  001DF2                     __end_of_ClsUSART:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function _checkCRC *****************
  4098 ;; Defined at:
  4099 ;;		line 490 in file "modbus.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  i               2   15[COMRAM] int 
  4104 ;;  crc             2   13[COMRAM] unsigned int 
  4105 ;;  j               2   11[COMRAM] int 
  4106 ;;  crcLow          2    9[COMRAM] unsigned int 
  4107 ;;  crcHigh         2    7[COMRAM] unsigned int 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      unsigned char 
  4110 ;; Registers used:
  4111 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4117 ;;      Params:         0       0       0       0       0       0       0
  4118 ;;      Locals:        10       0       0       0       0       0       0
  4119 ;;      Temps:          5       0       0       0       0       0       0
  4120 ;;      Totals:        15       0       0       0       0       0       0
  4121 ;;Total ram usage:       15 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    2
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_decodeIt
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text16
  4132  001218                     __ptext16:
  4133                           	callstack 0
  4134  001218                     _checkCRC:
  4135                           	callstack 27
  4136  001218                     
  4137                           ;modbus.c: 492: unsigned int crc = 0xFFFF;
  4138  001218  6855               	setf	checkCRC@crc^0,c
  4139  00121A  6856               	setf	(checkCRC@crc+1)^0,c
  4140  00121C                     
  4141                           ;modbus.c: 494: unsigned int crcLow = 0;
  4142  00121C  0E00               	movlw	0
  4143  00121E  6E52               	movwf	(checkCRC@crcLow+1)^0,c
  4144  001220  0E00               	movlw	0
  4145  001222  6E51               	movwf	checkCRC@crcLow^0,c
  4146                           
  4147                           ;modbus.c: 495: int i,j = 0;
  4148  001224  0E00               	movlw	0
  4149  001226  6E54               	movwf	(checkCRC@j+1)^0,c
  4150  001228  0E00               	movlw	0
  4151  00122A  6E53               	movwf	checkCRC@j^0,c
  4152                           
  4153                           ;modbus.c: 497: for(i=0;i<messageLength-2;i++){
  4154  00122C  0E00               	movlw	0
  4155  00122E  6E58               	movwf	(checkCRC@i+1)^0,c
  4156  001230  0E00               	movlw	0
  4157  001232  6E57               	movwf	checkCRC@i^0,c
  4158  001234  EF4B  F009         	goto	l2306
  4159  001238                     l2288:
  4160                           
  4161                           ;modbus.c: 498: crc ^= received[i];
  4162  001238  0E00               	movlw	low _received
  4163  00123A  2457               	addwf	checkCRC@i^0,w,c
  4164  00123C  6ED9               	movwf	fsr2l,c
  4165  00123E  0E01               	movlw	high _received
  4166  001240  2058               	addwfc	(checkCRC@i+1)^0,w,c
  4167  001242  6EDA               	movwf	fsr2h,c
  4168  001244  50DF               	movf	indf2,w,c
  4169  001246  6E4A               	movwf	??_checkCRC^0,c
  4170  001248  504A               	movf	??_checkCRC^0,w,c
  4171  00124A  1A55               	xorwf	checkCRC@crc^0,f,c
  4172  00124C                     
  4173                           ;modbus.c: 499: for(j=8; j!=0; j--){
  4174  00124C  0E00               	movlw	0
  4175  00124E  6E54               	movwf	(checkCRC@j+1)^0,c
  4176  001250  0E08               	movlw	8
  4177  001252  6E53               	movwf	checkCRC@j^0,c
  4178  001254                     l379:
  4179                           
  4180                           ;modbus.c: 500: if((crc & 0x0001) != 0){
  4181  001254  A055               	btfss	checkCRC@crc^0,0,c
  4182  001256  EF2F  F009         	goto	u1051
  4183  00125A  EF31  F009         	goto	u1050
  4184  00125E                     u1051:
  4185  00125E  EF3A  F009         	goto	l2300
  4186  001262                     u1050:
  4187  001262                     
  4188                           ;modbus.c: 501: crc >>= 1;
  4189  001262  90D8               	bcf	status,0,c
  4190  001264  3256               	rrcf	(checkCRC@crc+1)^0,f,c
  4191  001266  3255               	rrcf	checkCRC@crc^0,f,c
  4192  001268                     
  4193                           ;modbus.c: 502: crc ^= 0xA001;
  4194  001268  0E01               	movlw	1
  4195  00126A  1A55               	xorwf	checkCRC@crc^0,f,c
  4196  00126C  0EA0               	movlw	160
  4197  00126E  1A56               	xorwf	(checkCRC@crc+1)^0,f,c
  4198                           
  4199                           ;modbus.c: 503: }
  4200  001270  EF3D  F009         	goto	l382
  4201  001274                     l2300:
  4202                           
  4203                           ;modbus.c: 504: else{;modbus.c: 505: crc >>= 1;
  4204  001274  90D8               	bcf	status,0,c
  4205  001276  3256               	rrcf	(checkCRC@crc+1)^0,f,c
  4206  001278  3255               	rrcf	checkCRC@crc^0,f,c
  4207  00127A                     l382:
  4208  00127A  0653               	decf	checkCRC@j^0,f,c
  4209  00127C  A0D8               	btfss	status,0,c
  4210  00127E  0654               	decf	(checkCRC@j+1)^0,f,c
  4211  001280  5053               	movf	checkCRC@j^0,w,c
  4212  001282  1054               	iorwf	(checkCRC@j+1)^0,w,c
  4213  001284  A4D8               	btfss	status,2,c
  4214  001286  EF47  F009         	goto	u1061
  4215  00128A  EF49  F009         	goto	u1060
  4216  00128E                     u1061:
  4217  00128E  EF2A  F009         	goto	l379
  4218  001292                     u1060:
  4219  001292  4A57               	infsnz	checkCRC@i^0,f,c
  4220  001294  2A58               	incf	(checkCRC@i+1)^0,f,c
  4221  001296                     l2306:
  4222  001296  0EFE               	movlw	254
  4223  001298  6E4A               	movwf	??_checkCRC^0,c
  4224  00129A  0EFF               	movlw	255
  4225  00129C  6E4B               	movwf	(??_checkCRC+1)^0,c
  4226  00129E  5035               	movf	_messageLength^0,w,c	;volatile
  4227  0012A0  6E4C               	movwf	(??_checkCRC+2)^0,c
  4228  0012A2  6A4D               	clrf	(??_checkCRC+3)^0,c
  4229  0012A4  504A               	movf	??_checkCRC^0,w,c
  4230  0012A6  264C               	addwf	(??_checkCRC+2)^0,f,c
  4231  0012A8  504B               	movf	(??_checkCRC+1)^0,w,c
  4232  0012AA  224D               	addwfc	(??_checkCRC+3)^0,f,c
  4233  0012AC  504C               	movf	(??_checkCRC+2)^0,w,c
  4234  0012AE  5C57               	subwf	checkCRC@i^0,w,c
  4235  0012B0  5058               	movf	(checkCRC@i+1)^0,w,c
  4236  0012B2  0A80               	xorlw	128
  4237  0012B4  6E4E               	movwf	(??_checkCRC+4)^0,c
  4238  0012B6  504D               	movf	(??_checkCRC+3)^0,w,c
  4239  0012B8  0A80               	xorlw	128
  4240  0012BA  584E               	subwfb	(??_checkCRC+4)^0,w,c
  4241  0012BC  A0D8               	btfss	status,0,c
  4242  0012BE  EF63  F009         	goto	u1071
  4243  0012C2  EF65  F009         	goto	u1070
  4244  0012C6                     u1071:
  4245  0012C6  EF1C  F009         	goto	l2288
  4246  0012CA                     u1070:
  4247  0012CA                     
  4248                           ;modbus.c: 506: };modbus.c: 507: };modbus.c: 508: };modbus.c: 510: crcHigh = (crc & 0x00
      +                          FF);
  4249  0012CA  5055               	movf	checkCRC@crc^0,w,c
  4250  0012CC  6E4F               	movwf	checkCRC@crcHigh^0,c
  4251  0012CE  6A50               	clrf	(checkCRC@crcHigh+1)^0,c
  4252                           
  4253                           ;modbus.c: 511: crcLow = (crc & 0xFF00) >>8;
  4254  0012D0  C055  F04A         	movff	checkCRC@crc,??_checkCRC
  4255  0012D4  C056  F04B         	movff	checkCRC@crc+1,??_checkCRC+1
  4256  0012D8  C04B  F04A         	movff	??_checkCRC+1,??_checkCRC
  4257  0012DC  6A4B               	clrf	(??_checkCRC+1)^0,c
  4258  0012DE  504A               	movf	??_checkCRC^0,w,c
  4259  0012E0  6E51               	movwf	checkCRC@crcLow^0,c
  4260  0012E2  6A52               	clrf	(checkCRC@crcLow+1)^0,c
  4261  0012E4                     
  4262                           ;modbus.c: 512: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4263  0012E4  0E00               	movlw	low _received
  4264  0012E6  2457               	addwf	checkCRC@i^0,w,c
  4265  0012E8  6ED9               	movwf	fsr2l,c
  4266  0012EA  0E01               	movlw	high _received
  4267  0012EC  2058               	addwfc	(checkCRC@i+1)^0,w,c
  4268  0012EE  6EDA               	movwf	fsr2h,c
  4269  0012F0  50DF               	movf	indf2,w,c
  4270  0012F2  6E4A               	movwf	??_checkCRC^0,c
  4271  0012F4  6A4B               	clrf	(??_checkCRC+1)^0,c
  4272  0012F6  504F               	movf	checkCRC@crcHigh^0,w,c
  4273  0012F8  184A               	xorwf	??_checkCRC^0,w,c
  4274  0012FA  E107               	bnz	u1081
  4275  0012FC  5050               	movf	(checkCRC@crcHigh+1)^0,w,c
  4276  0012FE  184B               	xorwf	(??_checkCRC+1)^0,w,c
  4277  001300  A4D8               	btfss	status,2,c
  4278  001302  EF85  F009         	goto	u1081
  4279  001306  EF87  F009         	goto	u1080
  4280  00130A                     u1081:
  4281  00130A  EF9F  F009         	goto	l2320
  4282  00130E                     u1080:
  4283  00130E  0E01               	movlw	low (_received+1)
  4284  001310  2457               	addwf	checkCRC@i^0,w,c
  4285  001312  6ED9               	movwf	fsr2l,c
  4286  001314  0E01               	movlw	high (_received+1)
  4287  001316  2058               	addwfc	(checkCRC@i+1)^0,w,c
  4288  001318  6EDA               	movwf	fsr2h,c
  4289  00131A  50DF               	movf	indf2,w,c
  4290  00131C  6E4A               	movwf	??_checkCRC^0,c
  4291  00131E  6A4B               	clrf	(??_checkCRC+1)^0,c
  4292  001320  5051               	movf	checkCRC@crcLow^0,w,c
  4293  001322  184A               	xorwf	??_checkCRC^0,w,c
  4294  001324  E107               	bnz	u1091
  4295  001326  5052               	movf	(checkCRC@crcLow+1)^0,w,c
  4296  001328  184B               	xorwf	(??_checkCRC+1)^0,w,c
  4297  00132A  A4D8               	btfss	status,2,c
  4298  00132C  EF9A  F009         	goto	u1091
  4299  001330  EF9C  F009         	goto	u1090
  4300  001334                     u1091:
  4301  001334  EF9F  F009         	goto	l2320
  4302  001338                     u1090:
  4303  001338                     
  4304                           ;modbus.c: 513: {;modbus.c: 514: return 1;
  4305  001338  0E01               	movlw	1
  4306  00133A  EFA0  F009         	goto	l385
  4307  00133E                     l2320:
  4308                           
  4309                           ;modbus.c: 516: else{;modbus.c: 517: return 0;
  4310  00133E  0E00               	movlw	0
  4311  001340                     l385:
  4312  001340  0012               	return		;funcret
  4313  001342                     __end_of_checkCRC:
  4314                           	callstack 0
  4315                           
  4316 ;; *************** function _Lcd_Out *****************
  4317 ;; Defined at:
  4318 ;;		line 96 in file "flexlcd.h"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  y               1    wreg     unsigned char 
  4321 ;;  x               1    5[COMRAM] unsigned char 
  4322 ;;  buffer          2    6[COMRAM] PTR const unsigned char 
  4323 ;;		 -> str(16), STR_1(7), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  y               1    8[COMRAM] unsigned char 
  4326 ;;  data            1    9[COMRAM] unsigned char 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4336 ;;      Params:         3       0       0       0       0       0       0
  4337 ;;      Locals:         2       0       0       0       0       0       0
  4338 ;;      Temps:          0       0       0       0       0       0       0
  4339 ;;      Totals:         5       0       0       0       0       0       0
  4340 ;;Total ram usage:        5 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    3
  4343 ;; This function calls:
  4344 ;;		_Lcd_Chr_CP
  4345 ;;		_Lcd_Cmd
  4346 ;; This function is called by:
  4347 ;;		_main
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text17
  4352  001B68                     __ptext17:
  4353                           	callstack 0
  4354  001B68                     _Lcd_Out:
  4355                           	callstack 27
  4356                           
  4357                           ;incstack = 0
  4358                           ;Lcd_Out@y stored from wreg
  4359  001B68  6E50               	movwf	Lcd_Out@y^0,c
  4360  001B6A                     
  4361                           ;flexlcd.h: 98: unsigned char data;;flexlcd.h: 99: switch (y)
  4362  001B6A  EFCB  F00D         	goto	l2846
  4363  001B6E                     l2836:
  4364  001B6E  504D               	movf	Lcd_Out@x^0,w,c
  4365  001B70  0F80               	addlw	128
  4366  001B72  6E51               	movwf	Lcd_Out@data^0,c
  4367  001B74  EFDE  F00D         	goto	l2848
  4368  001B78                     l2838:
  4369  001B78  504D               	movf	Lcd_Out@x^0,w,c
  4370  001B7A  0FC0               	addlw	192
  4371  001B7C  6E51               	movwf	Lcd_Out@data^0,c
  4372  001B7E  EFDE  F00D         	goto	l2848
  4373  001B82                     l2840:
  4374  001B82  504D               	movf	Lcd_Out@x^0,w,c
  4375  001B84  0F94               	addlw	148
  4376  001B86  6E51               	movwf	Lcd_Out@data^0,c
  4377  001B88  EFDE  F00D         	goto	l2848
  4378  001B8C                     l2842:
  4379  001B8C  504D               	movf	Lcd_Out@x^0,w,c
  4380  001B8E  0FD4               	addlw	212
  4381  001B90  6E51               	movwf	Lcd_Out@data^0,c
  4382  001B92  EFDE  F00D         	goto	l2848
  4383  001B96                     l2846:
  4384  001B96  5050               	movf	Lcd_Out@y^0,w,c
  4385                           
  4386                           ; Switch size 1, requested type "simple"
  4387                           ; Number of cases is 4, Range of values is 1 to 4
  4388                           ; switch strategies available:
  4389                           ; Name         Instructions Cycles
  4390                           ; simple_byte           13     7 (average)
  4391                           ;	Chosen strategy is simple_byte
  4392  001B98  0A01               	xorlw	1	; case 1
  4393  001B9A  B4D8               	btfsc	status,2,c
  4394  001B9C  EFB7  F00D         	goto	l2836
  4395  001BA0  0A03               	xorlw	3	; case 2
  4396  001BA2  B4D8               	btfsc	status,2,c
  4397  001BA4  EFBC  F00D         	goto	l2838
  4398  001BA8  0A01               	xorlw	1	; case 3
  4399  001BAA  B4D8               	btfsc	status,2,c
  4400  001BAC  EFC1  F00D         	goto	l2840
  4401  001BB0  0A07               	xorlw	7	; case 4
  4402  001BB2  B4D8               	btfsc	status,2,c
  4403  001BB4  EFC6  F00D         	goto	l2842
  4404  001BB8  EFDE  F00D         	goto	l2848
  4405  001BBC                     l2848:
  4406                           
  4407                           ;flexlcd.h: 107: Lcd_Cmd(data);
  4408  001BBC  5051               	movf	Lcd_Out@data^0,w,c
  4409  001BBE  ECA1  F009         	call	_Lcd_Cmd
  4410                           
  4411                           ;flexlcd.h: 108: while(*buffer)
  4412  001BC2  EFF7  F00D         	goto	l2854
  4413  001BC6                     l2850:
  4414                           
  4415                           ;flexlcd.h: 109: {;flexlcd.h: 110: Lcd_Chr_CP(*buffer);
  4416  001BC6  C04E  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4417  001BCA  C04F  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4418  001BCE  6AF8               	clrf	tblptru,c
  4419  001BD0  0E05               	movlw	(high __ramtop+-1)
  4420  001BD2  64F7               	cpfsgt	tblptrh,c
  4421  001BD4  D003               	bra	u1517
  4422  001BD6  0008               	tblrd		*
  4423  001BD8  50F5               	movf	tablat,w,c
  4424  001BDA  D005               	bra	u1510
  4425  001BDC                     u1517:
  4426  001BDC  CFF6 FFE1          	movff	tblptrl,fsr1l
  4427  001BE0  CFF7 FFE2          	movff	tblptrh,fsr1h
  4428  001BE4  50E7               	movf	indf1,w,c
  4429  001BE6                     u1510:
  4430  001BE6  EC74  F008         	call	_Lcd_Chr_CP
  4431  001BEA                     
  4432                           ;flexlcd.h: 111: buffer++;
  4433  001BEA  4A4E               	infsnz	Lcd_Out@buffer^0,f,c
  4434  001BEC  2A4F               	incf	(Lcd_Out@buffer+1)^0,f,c
  4435  001BEE                     l2854:
  4436  001BEE  C04E  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4437  001BF2  C04F  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4438  001BF6  6AF8               	clrf	tblptru,c
  4439  001BF8  0E05               	movlw	(high __ramtop+-1)
  4440  001BFA  64F7               	cpfsgt	tblptrh,c
  4441  001BFC  D003               	bra	u1527
  4442  001BFE  0008               	tblrd		*
  4443  001C00  50F5               	movf	tablat,w,c
  4444  001C02  D005               	bra	u1520
  4445  001C04                     u1527:
  4446  001C04  CFF6 FFE1          	movff	tblptrl,fsr1l
  4447  001C08  CFF7 FFE2          	movff	tblptrh,fsr1h
  4448  001C0C  50E7               	movf	indf1,w,c
  4449  001C0E                     u1520:
  4450  001C0E  0900               	iorlw	0
  4451  001C10  A4D8               	btfss	status,2,c
  4452  001C12  EF0D  F00E         	goto	u1531
  4453  001C16  EF0F  F00E         	goto	u1530
  4454  001C1A                     u1531:
  4455  001C1A  EFE3  F00D         	goto	l2850
  4456  001C1E                     u1530:
  4457  001C1E  0012               	return		;funcret
  4458  001C20                     __end_of_Lcd_Out:
  4459                           	callstack 0
  4460                           
  4461 ;; *************** function _Lcd_Chr_CP *****************
  4462 ;; Defined at:
  4463 ;;		line 138 in file "flexlcd.h"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  data            1    wreg     unsigned char 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  data            1    4[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4477 ;;      Params:         0       0       0       0       0       0       0
  4478 ;;      Locals:         1       0       0       0       0       0       0
  4479 ;;      Temps:          2       0       0       0       0       0       0
  4480 ;;      Totals:         3       0       0       0       0       0       0
  4481 ;;Total ram usage:        3 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    2
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_Lcd_Out
  4488 ;;		_Lcd_Out2
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text18
  4493  0010E8                     __ptext18:
  4494                           	callstack 0
  4495  0010E8                     _Lcd_Chr_CP:
  4496                           	callstack 27
  4497                           
  4498                           ;incstack = 0
  4499                           ;Lcd_Chr_CP@data stored from wreg
  4500  0010E8  6E4C               	movwf	Lcd_Chr_CP@data^0,c
  4501  0010EA                     
  4502                           ;flexlcd.h: 139: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  4503  0010EA  9284               	bcf	132,1,c	;volatile
  4504  0010EC  8484               	bsf	132,2,c	;volatile
  4505  0010EE                     
  4506                           ;flexlcd.h: 140: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  4507  0010EE  6A4A               	clrf	??_Lcd_Chr_CP^0,c
  4508  0010F0  AE4C               	btfss	Lcd_Chr_CP@data^0,7,c
  4509  0010F2  D001               	bra	u1025
  4510  0010F4  2A4A               	incf	??_Lcd_Chr_CP^0,f,c
  4511  0010F6                     u1025:
  4512  0010F6  0E01               	movlw	1
  4513  0010F8  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4514  0010FA  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4515  0010FC  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4516  0010FE  5083               	movf	131,w,c	;volatile
  4517  001100  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4518  001102  0B7F               	andlw	-129
  4519  001104  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4520  001106  6E83               	movwf	131,c	;volatile
  4521  001108  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4522  00110C  0E06               	movlw	6
  4523  00110E  6E4B               	movwf	(??_Lcd_Chr_CP+1)^0,c
  4524  001110                     u1035:
  4525  001110  90D8               	bcf	status,0,c
  4526  001112  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4527  001114  2E4B               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  4528  001116  EF88  F008         	goto	u1035
  4529  00111A  0E01               	movlw	1
  4530  00111C  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4531  00111E  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4532  001120  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4533  001122  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4534  001124  5083               	movf	131,w,c	;volatile
  4535  001126  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4536  001128  0BBF               	andlw	-65
  4537  00112A  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4538  00112C  6E83               	movwf	131,c	;volatile
  4539                           
  4540                           ;flexlcd.h: 141: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  4541  00112E  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4542  001132  0E05               	movlw	5
  4543  001134  6E4B               	movwf	(??_Lcd_Chr_CP+1)^0,c
  4544  001136                     u1045:
  4545  001136  90D8               	bcf	status,0,c
  4546  001138  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4547  00113A  2E4B               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  4548  00113C  EF9B  F008         	goto	u1045
  4549  001140  0E01               	movlw	1
  4550  001142  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4551  001144  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4552  001146  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4553  001148  5083               	movf	131,w,c	;volatile
  4554  00114A  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4555  00114C  0BDF               	andlw	-33
  4556  00114E  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4557  001150  6E83               	movwf	131,c	;volatile
  4558  001152  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4559  001156  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4560  001158  0E0F               	movlw	15
  4561  00115A  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4562  00115C  0E01               	movlw	1
  4563  00115E  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4564  001160  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4565  001162  5083               	movf	131,w,c	;volatile
  4566  001164  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4567  001166  0BEF               	andlw	-17
  4568  001168  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4569  00116A  6E83               	movwf	131,c	;volatile
  4570  00116C                     
  4571                           ;flexlcd.h: 142: _delay(10);
  4572  00116C  0E03               	movlw	3
  4573  00116E                     u1877:
  4574  00116E  2EE8               	decfsz	wreg,f,c
  4575  001170  D7FE               	bra	u1877
  4576  001172  F000               	nop	
  4577  001174                     
  4578                           ;flexlcd.h: 143: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  4579  001174  8284               	bsf	132,1,c	;volatile
  4580  001176  0E04               	movlw	4
  4581  001178                     u1887:
  4582  001178  2EE8               	decfsz	wreg,f,c
  4583  00117A  D7FE               	bra	u1887
  4584  00117C  9284               	bcf	132,1,c	;volatile
  4585                           
  4586                           ;flexlcd.h: 144: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  4587  00117E  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4588  001182  90D8               	bcf	status,0,c
  4589  001184  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4590  001186  90D8               	bcf	status,0,c
  4591  001188  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4592  00118A  90D8               	bcf	status,0,c
  4593  00118C  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4594  00118E  0E01               	movlw	1
  4595  001190  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4596  001192  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4597  001194  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4598  001196  5083               	movf	131,w,c	;volatile
  4599  001198  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4600  00119A  0B7F               	andlw	-129
  4601  00119C  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4602  00119E  6E83               	movwf	131,c	;volatile
  4603  0011A0  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4604  0011A4  90D8               	bcf	status,0,c
  4605  0011A6  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4606  0011A8  90D8               	bcf	status,0,c
  4607  0011AA  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4608  0011AC  0E01               	movlw	1
  4609  0011AE  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4610  0011B0  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4611  0011B2  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4612  0011B4  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4613  0011B6  5083               	movf	131,w,c	;volatile
  4614  0011B8  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4615  0011BA  0BBF               	andlw	-65
  4616  0011BC  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4617  0011BE  6E83               	movwf	131,c	;volatile
  4618                           
  4619                           ;flexlcd.h: 145: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  4620  0011C0  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4621  0011C4  90D8               	bcf	status,0,c
  4622  0011C6  324A               	rrcf	??_Lcd_Chr_CP^0,f,c
  4623  0011C8  0E01               	movlw	1
  4624  0011CA  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4625  0011CC  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4626  0011CE  464A               	rlncf	??_Lcd_Chr_CP^0,f,c
  4627  0011D0  5083               	movf	131,w,c	;volatile
  4628  0011D2  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4629  0011D4  0BDF               	andlw	-33
  4630  0011D6  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4631  0011D8  6E83               	movwf	131,c	;volatile
  4632  0011DA  C04C  F04A         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4633  0011DE  0E01               	movlw	1
  4634  0011E0  164A               	andwf	??_Lcd_Chr_CP^0,f,c
  4635  0011E2  3A4A               	swapf	??_Lcd_Chr_CP^0,f,c
  4636  0011E4  5083               	movf	131,w,c	;volatile
  4637  0011E6  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4638  0011E8  0BEF               	andlw	-17
  4639  0011EA  184A               	xorwf	??_Lcd_Chr_CP^0,w,c
  4640  0011EC  6E83               	movwf	131,c	;volatile
  4641  0011EE                     
  4642                           ;flexlcd.h: 146: _delay(10);
  4643  0011EE  0E03               	movlw	3
  4644  0011F0                     u1897:
  4645  0011F0  2EE8               	decfsz	wreg,f,c
  4646  0011F2  D7FE               	bra	u1897
  4647  0011F4  F000               	nop	
  4648  0011F6                     
  4649                           ;flexlcd.h: 147: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  4650  0011F6  8284               	bsf	132,1,c	;volatile
  4651  0011F8  0E04               	movlw	4
  4652  0011FA                     u1907:
  4653  0011FA  2EE8               	decfsz	wreg,f,c
  4654  0011FC  D7FE               	bra	u1907
  4655  0011FE  9284               	bcf	132,1,c	;volatile
  4656  001200                     
  4657                           ;flexlcd.h: 148: _delay((unsigned long)((5)*(10000000/4000000.0))); _delay((unsigned lon
      +                          g)((5500)*(10000000/4000000.0)));
  4658  001200  0E04               	movlw	4
  4659  001202                     u1917:
  4660  001202  2EE8               	decfsz	wreg,f,c
  4661  001204  D7FE               	bra	u1917
  4662  001206  0E12               	movlw	18
  4663  001208  6E4A               	movwf	??_Lcd_Chr_CP^0,c
  4664  00120A  0EDA               	movlw	218
  4665  00120C                     u1927:
  4666  00120C  2EE8               	decfsz	wreg,f,c
  4667  00120E  D7FE               	bra	u1927
  4668  001210  2E4A               	decfsz	??_Lcd_Chr_CP^0,f,c
  4669  001212  D7FC               	bra	u1927
  4670  001214  D000               	nop2	
  4671  001216  0012               	return		;funcret
  4672  001218                     __end_of_Lcd_Chr_CP:
  4673                           	callstack 0
  4674                           
  4675 ;; *************** function _Lcd_Init *****************
  4676 ;; Defined at:
  4677 ;;		line 54 in file "flexlcd.h"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  data            1    6[COMRAM] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4691 ;;      Params:         0       0       0       0       0       0       0
  4692 ;;      Locals:         1       0       0       0       0       0       0
  4693 ;;      Temps:          1       0       0       0       0       0       0
  4694 ;;      Totals:         2       0       0       0       0       0       0
  4695 ;;Total ram usage:        2 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    3
  4698 ;; This function calls:
  4699 ;;		_Lcd_Cmd
  4700 ;; This function is called by:
  4701 ;;		_main
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text19
  4706  0016B0                     __ptext19:
  4707                           	callstack 0
  4708  0016B0                     _Lcd_Init:
  4709                           	callstack 27
  4710  0016B0                     
  4711                           ;flexlcd.h: 55: unsigned char data;;flexlcd.h: 56: TRISDbits.TRISD7 = 0;
  4712  0016B0  9E95               	bcf	149,7,c	;volatile
  4713                           
  4714                           ;flexlcd.h: 57: TRISDbits.TRISD6 = 0;
  4715  0016B2  9C95               	bcf	149,6,c	;volatile
  4716                           
  4717                           ;flexlcd.h: 58: TRISDbits.TRISD5 = 0;
  4718  0016B4  9A95               	bcf	149,5,c	;volatile
  4719                           
  4720                           ;flexlcd.h: 59: TRISDbits.TRISD4 = 0;
  4721  0016B6  9895               	bcf	149,4,c	;volatile
  4722                           
  4723                           ;flexlcd.h: 60: TRISEbits.TRISE2 = 0;
  4724  0016B8  9496               	bcf	150,2,c	;volatile
  4725                           
  4726                           ;flexlcd.h: 61: TRISEbits.TRISE1 = 0;
  4727  0016BA  9296               	bcf	150,1,c	;volatile
  4728                           
  4729                           ;flexlcd.h: 62: PORTDbits.RD7 = 0;
  4730  0016BC  9E83               	bcf	131,7,c	;volatile
  4731                           
  4732                           ;flexlcd.h: 63: PORTDbits.RD6 = 0;
  4733  0016BE  9C83               	bcf	131,6,c	;volatile
  4734                           
  4735                           ;flexlcd.h: 64: PORTDbits.RD5 = 0;
  4736  0016C0  9A83               	bcf	131,5,c	;volatile
  4737                           
  4738                           ;flexlcd.h: 65: PORTDbits.RD4 = 0;
  4739  0016C2  9883               	bcf	131,4,c	;volatile
  4740                           
  4741                           ;flexlcd.h: 66: PORTEbits.RE1 = 0;
  4742  0016C4  9284               	bcf	132,1,c	;volatile
  4743                           
  4744                           ;flexlcd.h: 67: PORTEbits.RE2 = 0;
  4745  0016C6  9484               	bcf	132,2,c	;volatile
  4746  0016C8                     
  4747                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4748  0016C8  0E12               	movlw	18
  4749  0016CA  6E4D               	movwf	??_Lcd_Init^0,c
  4750  0016CC  0EDA               	movlw	218
  4751  0016CE                     u1937:
  4752  0016CE  2EE8               	decfsz	wreg,f,c
  4753  0016D0  D7FE               	bra	u1937
  4754  0016D2  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4755  0016D4  D7FC               	bra	u1937
  4756  0016D6  D000               	nop2	
  4757                           
  4758                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4759  0016D8  0E12               	movlw	18
  4760  0016DA  6E4D               	movwf	??_Lcd_Init^0,c
  4761  0016DC  0EDA               	movlw	218
  4762  0016DE                     u1947:
  4763  0016DE  2EE8               	decfsz	wreg,f,c
  4764  0016E0  D7FE               	bra	u1947
  4765  0016E2  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4766  0016E4  D7FC               	bra	u1947
  4767  0016E6  D000               	nop2	
  4768                           
  4769                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4770  0016E8  0E12               	movlw	18
  4771  0016EA  6E4D               	movwf	??_Lcd_Init^0,c
  4772  0016EC  0EDA               	movlw	218
  4773  0016EE                     u1957:
  4774  0016EE  2EE8               	decfsz	wreg,f,c
  4775  0016F0  D7FE               	bra	u1957
  4776  0016F2  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4777  0016F4  D7FC               	bra	u1957
  4778  0016F6  D000               	nop2	
  4779                           
  4780                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4781  0016F8  0E12               	movlw	18
  4782  0016FA  6E4D               	movwf	??_Lcd_Init^0,c
  4783  0016FC  0EDA               	movlw	218
  4784  0016FE                     u1967:
  4785  0016FE  2EE8               	decfsz	wreg,f,c
  4786  001700  D7FE               	bra	u1967
  4787  001702  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4788  001704  D7FC               	bra	u1967
  4789  001706  D000               	nop2	
  4790                           
  4791                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4792  001708  0E12               	movlw	18
  4793  00170A  6E4D               	movwf	??_Lcd_Init^0,c
  4794  00170C  0EDA               	movlw	218
  4795  00170E                     u1977:
  4796  00170E  2EE8               	decfsz	wreg,f,c
  4797  001710  D7FE               	bra	u1977
  4798  001712  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4799  001714  D7FC               	bra	u1977
  4800  001716  D000               	nop2	
  4801                           
  4802                           ;flexlcd.h: 73: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4803  001718  0E12               	movlw	18
  4804  00171A  6E4D               	movwf	??_Lcd_Init^0,c
  4805  00171C  0EDA               	movlw	218
  4806  00171E                     u1987:
  4807  00171E  2EE8               	decfsz	wreg,f,c
  4808  001720  D7FE               	bra	u1987
  4809  001722  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4810  001724  D7FC               	bra	u1987
  4811  001726  D000               	nop2	
  4812  001728                     
  4813                           ;flexlcd.h: 74: for(data = 1; data < 4; data ++)
  4814  001728  0E01               	movlw	1
  4815  00172A  6E4E               	movwf	Lcd_Init@data^0,c
  4816  00172C                     l89:
  4817                           
  4818                           ;flexlcd.h: 75: {;flexlcd.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  4819  00172C  9E83               	bcf	131,7,c	;volatile
  4820  00172E  9C83               	bcf	131,6,c	;volatile
  4821  001730  8A83               	bsf	131,5,c	;volatile
  4822  001732  8883               	bsf	131,4,c	;volatile
  4823  001734  9284               	bcf	132,1,c	;volatile
  4824                           
  4825                           ;flexlcd.h: 77: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  4826  001736  9484               	bcf	132,2,c	;volatile
  4827  001738  9E83               	bcf	131,7,c	;volatile
  4828  00173A  9C83               	bcf	131,6,c	;volatile
  4829  00173C  8A83               	bsf	131,5,c	;volatile
  4830  00173E  8883               	bsf	131,4,c	;volatile
  4831                           
  4832                           ;flexlcd.h: 78: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  4833  001740  8284               	bsf	132,1,c	;volatile
  4834  001742  9484               	bcf	132,2,c	;volatile
  4835  001744                     
  4836                           ;flexlcd.h: 79: _delay((unsigned long)((5)*(10000000/4000000.0)));
  4837  001744  0E04               	movlw	4
  4838  001746                     u1997:
  4839  001746  2EE8               	decfsz	wreg,f,c
  4840  001748  D7FE               	bra	u1997
  4841  00174A                     
  4842                           ;flexlcd.h: 80: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  4843  00174A  9E83               	bcf	131,7,c	;volatile
  4844  00174C  9C83               	bcf	131,6,c	;volatile
  4845  00174E  8A83               	bsf	131,5,c	;volatile
  4846  001750  8883               	bsf	131,4,c	;volatile
  4847  001752  9284               	bcf	132,1,c	;volatile
  4848  001754                     
  4849                           ;flexlcd.h: 81: PORTEbits.RE2 = 0;
  4850  001754  9484               	bcf	132,2,c	;volatile
  4851                           
  4852                           ;flexlcd.h: 82: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4853  001756  0E12               	movlw	18
  4854  001758  6E4D               	movwf	??_Lcd_Init^0,c
  4855  00175A  0EDA               	movlw	218
  4856  00175C                     u2007:
  4857  00175C  2EE8               	decfsz	wreg,f,c
  4858  00175E  D7FE               	bra	u2007
  4859  001760  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4860  001762  D7FC               	bra	u2007
  4861  001764  D000               	nop2	
  4862  001766  2A4E               	incf	Lcd_Init@data^0,f,c
  4863  001768  0E03               	movlw	3
  4864  00176A  644E               	cpfsgt	Lcd_Init@data^0,c
  4865  00176C  EFBA  F00B         	goto	u1501
  4866  001770  EFBC  F00B         	goto	u1500
  4867  001774                     u1501:
  4868  001774  EF96  F00B         	goto	l89
  4869  001778                     u1500:
  4870  001778                     
  4871                           ;flexlcd.h: 83: };flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  4872  001778  9E83               	bcf	131,7,c	;volatile
  4873  00177A  9C83               	bcf	131,6,c	;volatile
  4874  00177C  8A83               	bsf	131,5,c	;volatile
  4875  00177E  9883               	bcf	131,4,c	;volatile
  4876  001780  9284               	bcf	132,1,c	;volatile
  4877  001782  9484               	bcf	132,2,c	;volatile
  4878                           
  4879                           ;flexlcd.h: 85: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  4880  001784  9E83               	bcf	131,7,c	;volatile
  4881  001786  9C83               	bcf	131,6,c	;volatile
  4882  001788  8A83               	bsf	131,5,c	;volatile
  4883  00178A  9883               	bcf	131,4,c	;volatile
  4884  00178C  8284               	bsf	132,1,c	;volatile
  4885  00178E  9484               	bcf	132,2,c	;volatile
  4886  001790                     
  4887                           ;flexlcd.h: 86: _delay((unsigned long)((5)*(10000000/4000000.0)));
  4888  001790  0E04               	movlw	4
  4889  001792                     u2017:
  4890  001792  2EE8               	decfsz	wreg,f,c
  4891  001794  D7FE               	bra	u2017
  4892  001796                     
  4893                           ;flexlcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  4894  001796  9E83               	bcf	131,7,c	;volatile
  4895  001798  9C83               	bcf	131,6,c	;volatile
  4896  00179A  8A83               	bsf	131,5,c	;volatile
  4897  00179C  9883               	bcf	131,4,c	;volatile
  4898  00179E  9284               	bcf	132,1,c	;volatile
  4899  0017A0  9484               	bcf	132,2,c	;volatile
  4900                           
  4901                           ;flexlcd.h: 88: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  4902  0017A2  0E12               	movlw	18
  4903  0017A4  6E4D               	movwf	??_Lcd_Init^0,c
  4904  0017A6  0EDA               	movlw	218
  4905  0017A8                     u2027:
  4906  0017A8  2EE8               	decfsz	wreg,f,c
  4907  0017AA  D7FE               	bra	u2027
  4908  0017AC  2E4D               	decfsz	??_Lcd_Init^0,f,c
  4909  0017AE  D7FC               	bra	u2027
  4910  0017B0  D000               	nop2	
  4911  0017B2  0E28               	movlw	40
  4912  0017B4  ECA1  F009         	call	_Lcd_Cmd
  4913  0017B8  0E10               	movlw	16
  4914  0017BA  ECA1  F009         	call	_Lcd_Cmd
  4915  0017BE  0E01               	movlw	1
  4916  0017C0  ECA1  F009         	call	_Lcd_Cmd
  4917  0017C4  0E0F               	movlw	15
  4918  0017C6  ECA1  F009         	call	_Lcd_Cmd
  4919  0017CA  0012               	return		;funcret
  4920  0017CC                     __end_of_Lcd_Init:
  4921                           	callstack 0
  4922                           
  4923 ;; *************** function _Lcd_Cmd *****************
  4924 ;; Defined at:
  4925 ;;		line 152 in file "flexlcd.h"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  data            1    wreg     unsigned char 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  data            1    4[COMRAM] unsigned char 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4939 ;;      Params:         0       0       0       0       0       0       0
  4940 ;;      Locals:         1       0       0       0       0       0       0
  4941 ;;      Temps:          2       0       0       0       0       0       0
  4942 ;;      Totals:         3       0       0       0       0       0       0
  4943 ;;Total ram usage:        3 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    2
  4946 ;; This function calls:
  4947 ;;		Nothing
  4948 ;; This function is called by:
  4949 ;;		_Lcd_Init
  4950 ;;		_Lcd_Out
  4951 ;;		_main
  4952 ;;		_Lcd_Out2
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text20
  4957  001342                     __ptext20:
  4958                           	callstack 0
  4959  001342                     _Lcd_Cmd:
  4960                           	callstack 27
  4961                           
  4962                           ;incstack = 0
  4963                           ;Lcd_Cmd@data stored from wreg
  4964  001342  6E4C               	movwf	Lcd_Cmd@data^0,c
  4965  001344                     
  4966                           ;flexlcd.h: 153: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  4967  001344  9284               	bcf	132,1,c	;volatile
  4968  001346  9484               	bcf	132,2,c	;volatile
  4969  001348                     
  4970                           ;flexlcd.h: 154: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  4971  001348  6A4A               	clrf	??_Lcd_Cmd^0,c
  4972  00134A  AE4C               	btfss	Lcd_Cmd@data^0,7,c
  4973  00134C  D001               	bra	u995
  4974  00134E  2A4A               	incf	??_Lcd_Cmd^0,f,c
  4975  001350                     u995:
  4976  001350  0E01               	movlw	1
  4977  001352  164A               	andwf	??_Lcd_Cmd^0,f,c
  4978  001354  324A               	rrcf	??_Lcd_Cmd^0,f,c
  4979  001356  324A               	rrcf	??_Lcd_Cmd^0,f,c
  4980  001358  5083               	movf	131,w,c	;volatile
  4981  00135A  184A               	xorwf	??_Lcd_Cmd^0,w,c
  4982  00135C  0B7F               	andlw	-129
  4983  00135E  184A               	xorwf	??_Lcd_Cmd^0,w,c
  4984  001360  6E83               	movwf	131,c	;volatile
  4985  001362  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  4986  001366  0E06               	movlw	6
  4987  001368  6E4B               	movwf	(??_Lcd_Cmd+1)^0,c
  4988  00136A                     u1005:
  4989  00136A  90D8               	bcf	status,0,c
  4990  00136C  324A               	rrcf	??_Lcd_Cmd^0,f,c
  4991  00136E  2E4B               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  4992  001370  EFB5  F009         	goto	u1005
  4993  001374  0E01               	movlw	1
  4994  001376  164A               	andwf	??_Lcd_Cmd^0,f,c
  4995  001378  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  4996  00137A  464A               	rlncf	??_Lcd_Cmd^0,f,c
  4997  00137C  464A               	rlncf	??_Lcd_Cmd^0,f,c
  4998  00137E  5083               	movf	131,w,c	;volatile
  4999  001380  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5000  001382  0BBF               	andlw	-65
  5001  001384  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5002  001386  6E83               	movwf	131,c	;volatile
  5003                           
  5004                           ;flexlcd.h: 155: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  5005  001388  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5006  00138C  0E05               	movlw	5
  5007  00138E  6E4B               	movwf	(??_Lcd_Cmd+1)^0,c
  5008  001390                     u1015:
  5009  001390  90D8               	bcf	status,0,c
  5010  001392  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5011  001394  2E4B               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  5012  001396  EFC8  F009         	goto	u1015
  5013  00139A  0E01               	movlw	1
  5014  00139C  164A               	andwf	??_Lcd_Cmd^0,f,c
  5015  00139E  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5016  0013A0  464A               	rlncf	??_Lcd_Cmd^0,f,c
  5017  0013A2  5083               	movf	131,w,c	;volatile
  5018  0013A4  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5019  0013A6  0BDF               	andlw	-33
  5020  0013A8  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5021  0013AA  6E83               	movwf	131,c	;volatile
  5022  0013AC  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5023  0013B0  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5024  0013B2  0E0F               	movlw	15
  5025  0013B4  164A               	andwf	??_Lcd_Cmd^0,f,c
  5026  0013B6  0E01               	movlw	1
  5027  0013B8  164A               	andwf	??_Lcd_Cmd^0,f,c
  5028  0013BA  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5029  0013BC  5083               	movf	131,w,c	;volatile
  5030  0013BE  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5031  0013C0  0BEF               	andlw	-17
  5032  0013C2  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5033  0013C4  6E83               	movwf	131,c	;volatile
  5034  0013C6                     
  5035                           ;flexlcd.h: 156: _delay(10);
  5036  0013C6  0E03               	movlw	3
  5037  0013C8                     u2037:
  5038  0013C8  2EE8               	decfsz	wreg,f,c
  5039  0013CA  D7FE               	bra	u2037
  5040  0013CC  F000               	nop	
  5041  0013CE                     
  5042                           ;flexlcd.h: 157: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  5043  0013CE  8284               	bsf	132,1,c	;volatile
  5044  0013D0  0E04               	movlw	4
  5045  0013D2                     u2047:
  5046  0013D2  2EE8               	decfsz	wreg,f,c
  5047  0013D4  D7FE               	bra	u2047
  5048  0013D6  9284               	bcf	132,1,c	;volatile
  5049                           
  5050                           ;flexlcd.h: 158: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  5051  0013D8  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5052  0013DC  90D8               	bcf	status,0,c
  5053  0013DE  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5054  0013E0  90D8               	bcf	status,0,c
  5055  0013E2  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5056  0013E4  90D8               	bcf	status,0,c
  5057  0013E6  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5058  0013E8  0E01               	movlw	1
  5059  0013EA  164A               	andwf	??_Lcd_Cmd^0,f,c
  5060  0013EC  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5061  0013EE  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5062  0013F0  5083               	movf	131,w,c	;volatile
  5063  0013F2  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5064  0013F4  0B7F               	andlw	-129
  5065  0013F6  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5066  0013F8  6E83               	movwf	131,c	;volatile
  5067  0013FA  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5068  0013FE  90D8               	bcf	status,0,c
  5069  001400  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5070  001402  90D8               	bcf	status,0,c
  5071  001404  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5072  001406  0E01               	movlw	1
  5073  001408  164A               	andwf	??_Lcd_Cmd^0,f,c
  5074  00140A  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5075  00140C  464A               	rlncf	??_Lcd_Cmd^0,f,c
  5076  00140E  464A               	rlncf	??_Lcd_Cmd^0,f,c
  5077  001410  5083               	movf	131,w,c	;volatile
  5078  001412  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5079  001414  0BBF               	andlw	-65
  5080  001416  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5081  001418  6E83               	movwf	131,c	;volatile
  5082                           
  5083                           ;flexlcd.h: 159: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  5084  00141A  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5085  00141E  90D8               	bcf	status,0,c
  5086  001420  324A               	rrcf	??_Lcd_Cmd^0,f,c
  5087  001422  0E01               	movlw	1
  5088  001424  164A               	andwf	??_Lcd_Cmd^0,f,c
  5089  001426  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5090  001428  464A               	rlncf	??_Lcd_Cmd^0,f,c
  5091  00142A  5083               	movf	131,w,c	;volatile
  5092  00142C  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5093  00142E  0BDF               	andlw	-33
  5094  001430  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5095  001432  6E83               	movwf	131,c	;volatile
  5096  001434  C04C  F04A         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5097  001438  0E01               	movlw	1
  5098  00143A  164A               	andwf	??_Lcd_Cmd^0,f,c
  5099  00143C  3A4A               	swapf	??_Lcd_Cmd^0,f,c
  5100  00143E  5083               	movf	131,w,c	;volatile
  5101  001440  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5102  001442  0BEF               	andlw	-17
  5103  001444  184A               	xorwf	??_Lcd_Cmd^0,w,c
  5104  001446  6E83               	movwf	131,c	;volatile
  5105  001448                     
  5106                           ;flexlcd.h: 160: _delay(10);
  5107  001448  0E03               	movlw	3
  5108  00144A                     u2057:
  5109  00144A  2EE8               	decfsz	wreg,f,c
  5110  00144C  D7FE               	bra	u2057
  5111  00144E  F000               	nop	
  5112  001450                     
  5113                           ;flexlcd.h: 161: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(10000000/4000000.0))); P
      +                          ORTEbits.RE1 = 0;
  5114  001450  8284               	bsf	132,1,c	;volatile
  5115  001452  0E04               	movlw	4
  5116  001454                     u2067:
  5117  001454  2EE8               	decfsz	wreg,f,c
  5118  001456  D7FE               	bra	u2067
  5119  001458  9284               	bcf	132,1,c	;volatile
  5120  00145A                     
  5121                           ;flexlcd.h: 162: _delay((unsigned long)((5500)*(10000000/4000000.0)));
  5122  00145A  0E12               	movlw	18
  5123  00145C  6E4A               	movwf	??_Lcd_Cmd^0,c
  5124  00145E  0EDA               	movlw	218
  5125  001460                     u2077:
  5126  001460  2EE8               	decfsz	wreg,f,c
  5127  001462  D7FE               	bra	u2077
  5128  001464  2E4A               	decfsz	??_Lcd_Cmd^0,f,c
  5129  001466  D7FC               	bra	u2077
  5130  001468  D000               	nop2	
  5131  00146A  0012               	return		;funcret
  5132  00146C                     __end_of_Lcd_Cmd:
  5133                           	callstack 0
  5134                           
  5135 ;; *************** function _ConfigInterrupts *****************
  5136 ;; Defined at:
  5137 ;;		line 94 in file "system.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		None
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5151 ;;      Params:         0       0       0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0
  5154 ;;      Totals:         0       0       0       0       0       0       0
  5155 ;;Total ram usage:        0 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    2
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text21
  5166  001DF2                     __ptext21:
  5167                           	callstack 0
  5168  001DF2                     _ConfigInterrupts:
  5169                           	callstack 28
  5170  001DF2                     
  5171                           ;system.c: 96: RCONbits.IPEN = 0;
  5172  001DF2  9ED0               	bcf	208,7,c	;volatile
  5173                           
  5174                           ;system.c: 97: PIR1bits.RCIF = 0;
  5175  001DF4  9A9E               	bcf	158,5,c	;volatile
  5176                           
  5177                           ;system.c: 98: INTCONbits.TMR0IF = 0;
  5178  001DF6  94F2               	bcf	242,2,c	;volatile
  5179                           
  5180                           ;system.c: 99: INTCONbits.PEIE = 1;
  5181  001DF8  8CF2               	bsf	242,6,c	;volatile
  5182                           
  5183                           ;system.c: 100: INTCONbits.GIE = 1;
  5184  001DFA  8EF2               	bsf	242,7,c	;volatile
  5185  001DFC  0012               	return		;funcret
  5186  001DFE                     __end_of_ConfigInterrupts:
  5187                           	callstack 0
  5188                           
  5189 ;; *************** function _isr *****************
  5190 ;; Defined at:
  5191 ;;		line 79 in file "main.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      void 
  5198 ;; Registers used:
  5199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5205 ;;      Params:         0       0       0       0       0       0       0
  5206 ;;      Locals:         0       0       0       0       0       0       0
  5207 ;;      Temps:          2       0       0       0       0       0       0
  5208 ;;      Totals:         2       0       0       0       0       0       0
  5209 ;;Total ram usage:        2 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    1
  5212 ;; This function calls:
  5213 ;;		_OpenTmr0
  5214 ;;		_modbusDelay
  5215 ;; This function is called by:
  5216 ;;		Interrupt level 2
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	intcode
  5221  000008                     __pintcode:
  5222                           	callstack 0
  5223  000008                     _isr:
  5224                           	callstack 24
  5225                           
  5226                           ;incstack = 0
  5227  000008  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5228  00000A  EDC7  F00A         	call	int_func,f	;refresh shadow registers
  5229                           
  5230                           	psect	intcode_body
  5231  00158E                     __pintcode_body:
  5232                           	callstack 24
  5233  00158E                     int_func:
  5234                           	callstack 24
  5235  00158E  0006               	pop		; remove dummy address from shadow register refresh
  5236  001590  CFD9 F048          	movff	fsr2l,??_isr
  5237  001594  CFDA F049          	movff	fsr2h,??_isr+1
  5238  001598                     
  5239                           ;main.c: 81: if(PIR1bits.RCIF)
  5240  001598  AA9E               	btfss	158,5,c	;volatile
  5241  00159A  EFD1  F00A         	goto	i2u178_41
  5242  00159E  EFD3  F00A         	goto	i2u178_40
  5243  0015A2                     i2u178_41:
  5244  0015A2  EF1C  F00B         	goto	i2l139
  5245  0015A6                     i2u178_40:
  5246  0015A6                     
  5247                           ;main.c: 82: {;main.c: 84: if((!endOfMessage)&&(!newMessage)){
  5248  0015A6  5037               	movf	_endOfMessage^0,w,c	;volatile
  5249  0015A8  A4D8               	btfss	status,2,c
  5250  0015AA  EFD9  F00A         	goto	i2u179_41
  5251  0015AE  EFDB  F00A         	goto	i2u179_40
  5252  0015B2                     i2u179_41:
  5253  0015B2  EFF5  F00A         	goto	i2l3052
  5254  0015B6                     i2u179_40:
  5255  0015B6  506D               	movf	_newMessage^0,w,c	;volatile
  5256  0015B8  A4D8               	btfss	status,2,c
  5257  0015BA  EFE1  F00A         	goto	i2u180_41
  5258  0015BE  EFE3  F00A         	goto	i2u180_40
  5259  0015C2                     i2u180_41:
  5260  0015C2  EFF5  F00A         	goto	i2l3052
  5261  0015C6                     i2u180_40:
  5262  0015C6                     
  5263                           ;main.c: 85: if(PIR1bits.TXIF){
  5264  0015C6  A89E               	btfss	158,4,c	;volatile
  5265  0015C8  EFE8  F00A         	goto	i2u181_41
  5266  0015CC  EFEA  F00A         	goto	i2u181_40
  5267  0015D0                     i2u181_41:
  5268  0015D0  EFF5  F00A         	goto	i2l3052
  5269  0015D4                     i2u181_40:
  5270  0015D4                     
  5271                           ;main.c: 86: received[z] = RCREG;
  5272  0015D4  0E00               	movlw	low _received
  5273  0015D6  2433               	addwf	_z^0,w,c	;volatile
  5274  0015D8  6ED9               	movwf	fsr2l,c
  5275  0015DA  6ADA               	clrf	fsr2h,c
  5276  0015DC  0E01               	movlw	high _received
  5277  0015DE  22DA               	addwfc	fsr2h,f,c
  5278  0015E0  CFAE FFDF          	movff	4014,indf2	;volatile
  5279  0015E4                     
  5280                           ;main.c: 87: z++;
  5281  0015E4  2A33               	incf	_z^0,f,c	;volatile
  5282  0015E6                     
  5283                           ;main.c: 88: timerCount = 0;
  5284  0015E6  0E00               	movlw	0
  5285  0015E8  6E36               	movwf	_timerCount^0,c	;volatile
  5286  0015EA                     i2l3052:
  5287                           
  5288                           ;main.c: 89: };main.c: 90: };main.c: 91: if(newMessage){
  5289  0015EA  506D               	movf	_newMessage^0,w,c	;volatile
  5290  0015EC  B4D8               	btfsc	status,2,c
  5291  0015EE  EFFB  F00A         	goto	i2u182_41
  5292  0015F2  EFFD  F00A         	goto	i2u182_40
  5293  0015F6                     i2u182_41:
  5294  0015F6  EF1B  F00B         	goto	i2l142
  5295  0015FA                     i2u182_40:
  5296  0015FA                     
  5297                           ;main.c: 92: OpenTmr0();
  5298  0015FA  ECE7  F00E         	call	_OpenTmr0	;wreg free
  5299  0015FE                     
  5300                           ;main.c: 93: if(PIR1bits.TXIF){
  5301  0015FE  A89E               	btfss	158,4,c	;volatile
  5302  001600  EF04  F00B         	goto	i2u183_41
  5303  001604  EF06  F00B         	goto	i2u183_40
  5304  001608                     i2u183_41:
  5305  001608  EF1B  F00B         	goto	i2l142
  5306  00160C                     i2u183_40:
  5307  00160C                     
  5308                           ;main.c: 94: received[z] = RCREG;
  5309  00160C  0E00               	movlw	low _received
  5310  00160E  2433               	addwf	_z^0,w,c	;volatile
  5311  001610  6ED9               	movwf	fsr2l,c
  5312  001612  6ADA               	clrf	fsr2h,c
  5313  001614  0E01               	movlw	high _received
  5314  001616  22DA               	addwfc	fsr2h,f,c
  5315  001618  CFAE FFDF          	movff	4014,indf2	;volatile
  5316  00161C                     
  5317                           ;main.c: 95: z++;
  5318  00161C  2A33               	incf	_z^0,f,c	;volatile
  5319  00161E                     
  5320                           ;main.c: 96: newMessage = 0;
  5321  00161E  0E00               	movlw	0
  5322  001620  6E6D               	movwf	_newMessage^0,c	;volatile
  5323  001622                     
  5324                           ;main.c: 97: endOfMessage = 0;
  5325  001622  0E00               	movlw	0
  5326  001624  6E37               	movwf	_endOfMessage^0,c	;volatile
  5327  001626                     
  5328                           ;main.c: 98: messageLength = 0;
  5329  001626  0E00               	movlw	0
  5330  001628  6E35               	movwf	_messageLength^0,c	;volatile
  5331  00162A                     
  5332                           ;main.c: 99: modbusMessage = 0;
  5333  00162A  0E00               	movlw	0
  5334  00162C  6E34               	movwf	_modbusMessage^0,c	;volatile
  5335  00162E                     
  5336                           ;main.c: 100: timerCount = 0;
  5337  00162E  0E00               	movlw	0
  5338  001630  6E36               	movwf	_timerCount^0,c	;volatile
  5339  001632  EF52  F00B         	goto	i2l144
  5340  001636                     i2l142:
  5341                           
  5342                           ;main.c: 102: };main.c: 103: };main.c: 104: PIR1bits.RCIF = 0;
  5343  001636  9A9E               	bcf	158,5,c	;volatile
  5344  001638                     i2l139:
  5345                           
  5346                           ;main.c: 105: };main.c: 106: if(INTCONbits.TMR0IF){
  5347  001638  A4F2               	btfss	242,2,c	;volatile
  5348  00163A  EF21  F00B         	goto	i2u184_41
  5349  00163E  EF23  F00B         	goto	i2u184_40
  5350  001642                     i2u184_41:
  5351  001642  EF52  F00B         	goto	i2l144
  5352  001646                     i2u184_40:
  5353  001646                     
  5354                           ;main.c: 107: modbusDelay();
  5355  001646  ECFF  F00E         	call	_modbusDelay	;wreg free
  5356  00164A                     
  5357                           ;main.c: 108: timerCount++;
  5358  00164A  2A36               	incf	_timerCount^0,f,c	;volatile
  5359  00164C                     
  5360                           ;main.c: 109: if(timerCount > 4){
  5361  00164C  0E04               	movlw	4
  5362  00164E  6436               	cpfsgt	_timerCount^0,c	;volatile
  5363  001650  EF2C  F00B         	goto	i2u185_41
  5364  001654  EF2E  F00B         	goto	i2u185_40
  5365  001658                     i2u185_41:
  5366  001658  EF51  F00B         	goto	i2l3096
  5367  00165C                     i2u185_40:
  5368  00165C                     
  5369                           ;main.c: 110: endOfMessage = 1;
  5370  00165C  0E01               	movlw	1
  5371  00165E  6E37               	movwf	_endOfMessage^0,c	;volatile
  5372                           
  5373                           ;main.c: 111: newMessage = 1;
  5374  001660  0E01               	movlw	1
  5375  001662  6E6D               	movwf	_newMessage^0,c	;volatile
  5376  001664                     
  5377                           ;main.c: 112: messageLength = z;
  5378  001664  C033  F035         	movff	_z,_messageLength	;volatile
  5379                           
  5380                           ;main.c: 113: modbusMessage = 1;
  5381  001668  0E01               	movlw	1
  5382  00166A  6E34               	movwf	_modbusMessage^0,c	;volatile
  5383  00166C                     
  5384                           ;main.c: 114: for(z=(messageLength);z!=125;z++){
  5385  00166C  C035  F033         	movff	_messageLength,_z	;volatile
  5386  001670  EF43  F00B         	goto	i2l3090
  5387  001674                     i2l3086:
  5388                           
  5389                           ;main.c: 115: received[z] = 0;
  5390  001674  0E00               	movlw	low _received
  5391  001676  2433               	addwf	_z^0,w,c	;volatile
  5392  001678  6ED9               	movwf	fsr2l,c
  5393  00167A  6ADA               	clrf	fsr2h,c
  5394  00167C  0E01               	movlw	high _received
  5395  00167E  22DA               	addwfc	fsr2h,f,c
  5396  001680  0E00               	movlw	0
  5397  001682  6EDF               	movwf	indf2,c
  5398  001684  2A33               	incf	_z^0,f,c	;volatile
  5399  001686                     i2l3090:
  5400  001686  0E7D               	movlw	125
  5401  001688  1833               	xorwf	_z^0,w,c	;volatile
  5402  00168A  A4D8               	btfss	status,2,c
  5403  00168C  EF4A  F00B         	goto	i2u186_41
  5404  001690  EF4C  F00B         	goto	i2u186_40
  5405  001694                     i2u186_41:
  5406  001694  EF3A  F00B         	goto	i2l3086
  5407  001698                     i2u186_40:
  5408  001698                     
  5409                           ;main.c: 116: };main.c: 117: z=0;
  5410  001698  0E00               	movlw	0
  5411  00169A  6E33               	movwf	_z^0,c	;volatile
  5412  00169C                     
  5413                           ;main.c: 118: T0CONbits.TMR0ON = 0;
  5414  00169C  9ED5               	bcf	213,7,c	;volatile
  5415                           
  5416                           ;main.c: 119: timerCount = 0;
  5417  00169E  0E00               	movlw	0
  5418  0016A0  6E36               	movwf	_timerCount^0,c	;volatile
  5419  0016A2                     i2l3096:
  5420                           
  5421                           ;main.c: 120: };main.c: 121: INTCONbits.TMR0IF = 0;
  5422  0016A2  94F2               	bcf	242,2,c	;volatile
  5423  0016A4                     i2l144:
  5424  0016A4  C049  FFDA         	movff	??_isr+1,fsr2h
  5425  0016A8  C048  FFD9         	movff	??_isr,fsr2l
  5426  0016AC  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5427  0016AE  0011               	retfie		f
  5428  0016B0                     __end_of_isr:
  5429                           	callstack 0
  5430                           
  5431 ;; *************** function _modbusDelay *****************
  5432 ;; Defined at:
  5433 ;;		line 30 in file "modbus.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5447 ;;      Params:         0       0       0       0       0       0       0
  5448 ;;      Locals:         0       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0
  5450 ;;      Totals:         0       0       0       0       0       0       0
  5451 ;;Total ram usage:        0 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_isr
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text23
  5461  001DFE                     __ptext23:
  5462                           	callstack 0
  5463  001DFE                     _modbusDelay:
  5464                           	callstack 24
  5465  001DFE                     
  5466                           ;modbus.c: 33: TMR0H = 0xF5;
  5467  001DFE  0EF5               	movlw	245
  5468  001E00  6ED7               	movwf	215,c	;volatile
  5469                           
  5470                           ;modbus.c: 34: TMR0L = 0xD7;
  5471  001E02  0ED7               	movlw	215
  5472  001E04  6ED6               	movwf	214,c	;volatile
  5473  001E06  0012               	return		;funcret
  5474  001E08                     __end_of_modbusDelay:
  5475                           	callstack 0
  5476                           
  5477 ;; *************** function _OpenTmr0 *****************
  5478 ;; Defined at:
  5479 ;;		line 76 in file "system.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5493 ;;      Params:         0       0       0       0       0       0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0
  5496 ;;      Totals:         0       0       0       0       0       0       0
  5497 ;;Total ram usage:        0 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_isr
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text24
  5507  001DCE                     __ptext24:
  5508                           	callstack 0
  5509  001DCE                     _OpenTmr0:
  5510                           	callstack 24
  5511  001DCE                     
  5512                           ;system.c: 78: T0CONbits.TMR0ON = 0;
  5513  001DCE  9ED5               	bcf	213,7,c	;volatile
  5514                           
  5515                           ;system.c: 79: T0CONbits.T08BIT = 0;
  5516  001DD0  9CD5               	bcf	213,6,c	;volatile
  5517                           
  5518                           ;system.c: 80: T0CONbits.T0CS = 0;
  5519  001DD2  9AD5               	bcf	213,5,c	;volatile
  5520                           
  5521                           ;system.c: 81: T0CONbits.PSA = 1;
  5522  001DD4  86D5               	bsf	213,3,c	;volatile
  5523  001DD6                     
  5524                           ;system.c: 83: TMR0H = 0xF5;
  5525  001DD6  0EF5               	movlw	245
  5526  001DD8  6ED7               	movwf	215,c	;volatile
  5527                           
  5528                           ;system.c: 84: TMR0L = 0xD7;
  5529  001DDA  0ED7               	movlw	215
  5530  001DDC  6ED6               	movwf	214,c	;volatile
  5531  001DDE                     
  5532                           ;system.c: 86: T0CONbits.TMR0ON = 1;
  5533  001DDE  8ED5               	bsf	213,7,c	;volatile
  5534  001DE0                     
  5535                           ;system.c: 88: INTCONbits.TMR0IF = 0;
  5536  001DE0  94F2               	bcf	242,2,c	;volatile
  5537  001DE2                     
  5538                           ;system.c: 89: INTCONbits.TMR0IE = 1;
  5539  001DE2  8AF2               	bsf	242,5,c	;volatile
  5540  001DE4  0012               	return		;funcret
  5541  001DE6                     __end_of_OpenTmr0:
  5542                           	callstack 0
  5543                           
  5544                           	psect	rparam
  5545  0000                     
  5546                           	psect	temp
  5547  00006E                     btemp:
  5548                           	callstack 0
  5549  00006E                     	ds	1
  5550  0000                     int$flags	set	btemp
  5551  0000                     wtemp8	set	btemp+1
  5552  0000                     ttemp5	set	btemp+1
  5553  0000                     ttemp6	set	btemp+4
  5554  0000                     ttemp7	set	btemp+8
  5555                           
  5556                           	psect	idloc
  5557                           
  5558                           ;Config register IDLOC0 @ 0x200000
  5559                           ;	unspecified, using default values
  5560  200000                     	org	2097152
  5561  200000  FF                 	db	255
  5562                           
  5563                           ;Config register IDLOC1 @ 0x200001
  5564                           ;	unspecified, using default values
  5565  200001                     	org	2097153
  5566  200001  FF                 	db	255
  5567                           
  5568                           ;Config register IDLOC2 @ 0x200002
  5569                           ;	unspecified, using default values
  5570  200002                     	org	2097154
  5571  200002  FF                 	db	255
  5572                           
  5573                           ;Config register IDLOC3 @ 0x200003
  5574                           ;	unspecified, using default values
  5575  200003                     	org	2097155
  5576  200003  FF                 	db	255
  5577                           
  5578                           ;Config register IDLOC4 @ 0x200004
  5579                           ;	unspecified, using default values
  5580  200004                     	org	2097156
  5581  200004  FF                 	db	255
  5582                           
  5583                           ;Config register IDLOC5 @ 0x200005
  5584                           ;	unspecified, using default values
  5585  200005                     	org	2097157
  5586  200005  FF                 	db	255
  5587                           
  5588                           ;Config register IDLOC6 @ 0x200006
  5589                           ;	unspecified, using default values
  5590  200006                     	org	2097158
  5591  200006  FF                 	db	255
  5592                           
  5593                           ;Config register IDLOC7 @ 0x200007
  5594                           ;	unspecified, using default values
  5595  200007                     	org	2097159
  5596  200007  FF                 	db	255
  5597                           
  5598                           	psect	config
  5599                           
  5600                           ; Padding undefined space
  5601  300000                     	org	3145728
  5602  300000  FF                 	db	255
  5603                           
  5604                           ;Config register CONFIG1H @ 0x300001
  5605                           ;	unspecified, using default values
  5606                           ;	Oscillator Selection bits
  5607                           ;	OSC = 0x7, unprogrammed default
  5608                           ;	Fail-Safe Clock Monitor Enable bit
  5609                           ;	FCMEN = 0x0, unprogrammed default
  5610                           ;	Internal/External Oscillator Switchover bit
  5611                           ;	IESO = 0x0, unprogrammed default
  5612  300001                     	org	3145729
  5613  300001  07                 	db	7
  5614                           
  5615                           ;Config register CONFIG2L @ 0x300002
  5616                           ;	unspecified, using default values
  5617                           ;	Power-up Timer Enable bit
  5618                           ;	PWRT = 0x1, unprogrammed default
  5619                           ;	Brown-out Reset Enable bits
  5620                           ;	BOREN = 0x3, unprogrammed default
  5621                           ;	Brown Out Reset Voltage bits
  5622                           ;	BORV = 0x3, unprogrammed default
  5623  300002                     	org	3145730
  5624  300002  1F                 	db	31
  5625                           
  5626                           ;Config register CONFIG2H @ 0x300003
  5627                           ;	unspecified, using default values
  5628                           ;	Watchdog Timer Enable bit
  5629                           ;	WDT = 0x1, unprogrammed default
  5630                           ;	Watchdog Timer Postscale Select bits
  5631                           ;	WDTPS = 0xF, unprogrammed default
  5632  300003                     	org	3145731
  5633  300003  1F                 	db	31
  5634                           
  5635                           ; Padding undefined space
  5636  300004                     	org	3145732
  5637  300004  FF                 	db	255
  5638                           
  5639                           ;Config register CONFIG3H @ 0x300005
  5640                           ;	unspecified, using default values
  5641                           ;	CCP2 MUX bit
  5642                           ;	CCP2MX = 0x1, unprogrammed default
  5643                           ;	PORTB A/D Enable bit
  5644                           ;	PBADEN = 0x1, unprogrammed default
  5645                           ;	Low-Power Timer1 Oscillator Enable bit
  5646                           ;	LPT1OSC = 0x0, unprogrammed default
  5647                           ;	MCLR Pin Enable bit
  5648                           ;	MCLRE = 0x1, unprogrammed default
  5649  300005                     	org	3145733
  5650  300005  83                 	db	131
  5651                           
  5652                           ;Config register CONFIG4L @ 0x300006
  5653                           ;	unspecified, using default values
  5654                           ;	Stack Full/Underflow Reset Enable bit
  5655                           ;	STVREN = 0x1, unprogrammed default
  5656                           ;	Single-Supply ICSP Enable bit
  5657                           ;	LVP = 0x1, unprogrammed default
  5658                           ;	Extended Instruction Set Enable bit
  5659                           ;	XINST = 0x0, unprogrammed default
  5660                           ;	Background Debugger Enable bit
  5661                           ;	DEBUG = 0x1, unprogrammed default
  5662  300006                     	org	3145734
  5663  300006  85                 	db	133
  5664                           
  5665                           ; Padding undefined space
  5666  300007                     	org	3145735
  5667  300007  FF                 	db	255
  5668                           
  5669                           ;Config register CONFIG5L @ 0x300008
  5670                           ;	unspecified, using default values
  5671                           ;	Code Protection bit
  5672                           ;	CP0 = 0x1, unprogrammed default
  5673                           ;	Code Protection bit
  5674                           ;	CP1 = 0x1, unprogrammed default
  5675                           ;	Code Protection bit
  5676                           ;	CP2 = 0x1, unprogrammed default
  5677                           ;	Code Protection bit
  5678                           ;	CP3 = 0x1, unprogrammed default
  5679  300008                     	org	3145736
  5680  300008  0F                 	db	15
  5681                           
  5682                           ;Config register CONFIG5H @ 0x300009
  5683                           ;	unspecified, using default values
  5684                           ;	Boot Block Code Protection bit
  5685                           ;	CPB = 0x1, unprogrammed default
  5686                           ;	Data EEPROM Code Protection bit
  5687                           ;	CPD = 0x1, unprogrammed default
  5688  300009                     	org	3145737
  5689  300009  C0                 	db	192
  5690                           
  5691                           ;Config register CONFIG6L @ 0x30000A
  5692                           ;	unspecified, using default values
  5693                           ;	Write Protection bit
  5694                           ;	WRT0 = 0x1, unprogrammed default
  5695                           ;	Write Protection bit
  5696                           ;	WRT1 = 0x1, unprogrammed default
  5697                           ;	Write Protection bit
  5698                           ;	WRT2 = 0x1, unprogrammed default
  5699                           ;	Write Protection bit
  5700                           ;	WRT3 = 0x1, unprogrammed default
  5701  30000A                     	org	3145738
  5702  30000A  0F                 	db	15
  5703                           
  5704                           ;Config register CONFIG6H @ 0x30000B
  5705                           ;	unspecified, using default values
  5706                           ;	Configuration Register Write Protection bit
  5707                           ;	WRTC = 0x1, unprogrammed default
  5708                           ;	Boot Block Write Protection bit
  5709                           ;	WRTB = 0x1, unprogrammed default
  5710                           ;	Data EEPROM Write Protection bit
  5711                           ;	WRTD = 0x1, unprogrammed default
  5712  30000B                     	org	3145739
  5713  30000B  E0                 	db	224
  5714                           
  5715                           ;Config register CONFIG7L @ 0x30000C
  5716                           ;	unspecified, using default values
  5717                           ;	Table Read Protection bit
  5718                           ;	EBTR0 = 0x1, unprogrammed default
  5719                           ;	Table Read Protection bit
  5720                           ;	EBTR1 = 0x1, unprogrammed default
  5721                           ;	Table Read Protection bit
  5722                           ;	EBTR2 = 0x1, unprogrammed default
  5723                           ;	Table Read Protection bit
  5724                           ;	EBTR3 = 0x1, unprogrammed default
  5725  30000C                     	org	3145740
  5726  30000C  0F                 	db	15
  5727                           
  5728                           ;Config register CONFIG7H @ 0x30000D
  5729                           ;	unspecified, using default values
  5730                           ;	Boot Block Table Read Protection bit
  5731                           ;	EBTRB = 0x1, unprogrammed default
  5732  30000D                     	org	3145741
  5733  30000D  40                 	db	64
  5734                           tosu	equ	0xFFF
  5735                           tosh	equ	0xFFE
  5736                           tosl	equ	0xFFD
  5737                           stkptr	equ	0xFFC
  5738                           pclatu	equ	0xFFB
  5739                           pclath	equ	0xFFA
  5740                           pcl	equ	0xFF9
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           indf0	equ	0xFEF
  5748                           postinc0	equ	0xFEE
  5749                           postdec0	equ	0xFED
  5750                           preinc0	equ	0xFEC
  5751                           plusw0	equ	0xFEB
  5752                           fsr0h	equ	0xFEA
  5753                           fsr0l	equ	0xFE9
  5754                           wreg	equ	0xFE8
  5755                           indf1	equ	0xFE7
  5756                           postinc1	equ	0xFE6
  5757                           postdec1	equ	0xFE5
  5758                           preinc1	equ	0xFE4
  5759                           plusw1	equ	0xFE3
  5760                           fsr1h	equ	0xFE2
  5761                           fsr1l	equ	0xFE1
  5762                           bsr	equ	0xFE0
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           preinc2	equ	0xFDC
  5767                           plusw2	equ	0xFDB
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8

Data Sizes:
    Strings     44
    Constant    8
    Data        1
    BSS         421
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     37     109
    BANK0           128      0     125
    BANK1           256      0     225
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_2(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> str(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 16
		 -> str(COMRAM[16]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _sprintf->___lwdiv
    _decodeIt->_readCoil
    _decodeIt->_readInputCoil
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readReg->_generateCRC
    _readInputReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC
    _clearResponse->_OpnUSART
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8180
                   _ConfigInterrupts
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _OpnUSART
                           _decodeIt
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             35    23     12    1595
                                              9 COMRAM    26    14     12
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    5232
                           _checkCRC
                           _readCoil
                      _readInputCoil
                       _readInputReg
                            _readReg
                          _writeCoil
                           _writeReg
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            16    16      0     615
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           16    16      0     637
                                             20 COMRAM    16    16      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        11    11      0     837
                                             20 COMRAM    11    11      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            17    17      0    1025
                                             20 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         18    16      2     258
                                              2 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        1     1      0      94
                                              7 COMRAM     1     1      0
                           _ClsUSART
                           _OpnUSART
 ---------------------------------------------------------------------------------
 (4) _OpnUSART                                             5     5      0      26
                                              2 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (5) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            15    15      0     256
                                              2 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3     837
                                              5 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              5 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  2     2      0       0
                                              0 COMRAM     2     2      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (7) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInterrupts
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _OpnUSART
     _ClsUSART
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
     _readInputCoil
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
     _readInputReg
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
     _readReg
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
     _writeCoil
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
     _writeReg
       _clearResponse
         _ClsUSART
         _OpnUSART
           _ClsUSART
       _generateCRC
   _sprintf
     ___lwdiv
     ___wmul
     _isdigit

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E1       7       87.9%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     25      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CB      15        0.0%
DATA                 0      0     1CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Nov 24 20:11:09 2020

                         _z 0033                          l90 1778                          l91 17CA  
                        l89 172C                generateCRC@i 0056                generateCRC@j 0058  
        writeReg@wr_Address 0064         ___wmul@multiplicand 004C                         l120 1216  
                       l104 1C1E                         l123 146A                         l300 10E6  
                       l304 18CA                         l305 1894                         l330 0D58  
                       l331 0D5E                         l308 18D0                         l350 0AE0  
                       l342 0AA0                         l191 1DF0                         l255 1DA6  
                       l327 0D0C                         l319 0CCC                         l360 1586  
                       l272 1B66                         l353 0B2C                         l361 1550  
                       l433 0906                         l425 086E                         l354 0B32  
                       l282 0EDC                         l258 1B62                         l188 1D00  
                       l372 1936                         l364 158C                         l436 1DCC  
                       l197 1DFC                         l285 0F1C                         l382 127A  
                       l374 19C0                         l286 0F22                         l296 10A0  
                       l385 1340                         l369 1910                         l379 1254  
                       l299 10E0                         l922 1C92                         l915 1C8A  
                       u950 1D9E                         u951 1D9A                         u960 191E  
                       u945 1CB8                         u961 191A                         u970 194E  
                       u971 194A                         u980 1986                         u981 1982  
                       u995 1350                         _isr 0008                         _str 0038  
                       wreg 000FE8                        l1100 1D76                        l2200 1D8E  
                      l2202 1D9E                        l2210 1908                        l2300 1274  
                      l2220 1930                        l2204 18D4                        l3020 1A0E  
                      l3012 19C2                        l2310 12E4                        l2302 1280  
                      l2142 1DE6                        l2150 1CC8                        l2230 19A8  
                      l2222 193C                        l2206 18D8                        l3030 1A3E  
                      l3022 1A12                        l3014 19CC                        l2240 1348  
                      l2312 130E                        l2320 133E                        l2304 1292  
                      l2144 1DEA                        l2160 1CDE                        l2152 1CD2  
                      l2232 19B0                        l2224 194E                        l2216 191E  
                      l2208 18F4                        l2400 0CE2                        l3032 1A72  
                      l3024 1A18                        l3016 1A06                        l2250 1448  
                      l2242 13C6                        l2314 1338                        l2306 1296  
                      l2170 1CEA                        l2162 1CE2                        l2154 1CD6  
                      l2146 1C94                        l2234 19B8                        l2218 1924  
                      l2226 1952                        l2410 0D2A                        l2402 0CF2  
                      l2330 0B66                        l3034 1A84                        l3026 1A2A  
                      l3018 1A0A                        l2252 1450                        l2244 13CE  
                      l2260 10EA                        l2308 12CA                        l2180 1CF4  
                      l2172 1CEC                        l2164 1CE4                        l2156 1CD8  
                      l2148 1CB4                        l2228 1986                        l2412 0D2C  
                      l2404 0D02                        l2340 0BB4                        l2332 0B6C  
                      l2324 0B34                        l2500 0AEE                        l2420 0934  
                      l3036 1A88                        l3028 1A3A                        l2254 1452  
                      l2246 13D0                        l2238 1344                        l2270 117C  
                      l2262 10EE                        l2182 1CF6                        l2174 1CEE  
                      l2166 1CE6                        l2158 1CDA                        l2190 1D78  
                      l2414 0D5A                        l2406 0D04                        l2350 0BC6  
                      l2342 0BB6                        l2334 0B76                        l2326 0B54  
                      l2502 0AFE                        l2430 0978                        l2422 093A  
                      l2510 0D7C                        l2256 1458                        l2248 13D6  
                      l2280 1200                        l2272 11EE                        l2264 116C  
                      l2184 1CF8                        l2176 1CF0                        l2168 1CE8  
                      l2408 0D1A                        l2344 0BBA                        l2336 0B7C  
                      l2328 0B60                        l2504 0B00                        l2440 0996  
                      l2432 0988                        l2424 0940                        l2416 0908  
                      l2600 1036                        l2520 0DA4                        l2512 0D88  
                      l2258 145A                        l2282 1206                        l2274 11F6  
                      l2266 1174                        l2290 124C                        l2186 1CFC  
                      l2178 1CF2                        l2370 0C3E                        l2362 0BEE  
                      l2354 0BDA                        l2346 0BBE                        l2338 0BA4  
                      l2506 0B2E                        l2442 099A                        l2434 098A  
                      l2426 094A                        l2418 0928                        l2610 107E  
                      l2602 103A                        l2530 0E14                        l2522 0DAE  
                      l2514 0D8E                        l2276 11F8                        l2268 1176  
                      l2284 1218                        l2188 1CFE                        l2196 1D7C  
                      l2380 0C62                        l2372 0C40                        l2364 0C0A  
                      l2356 0BEA                        l2348 0BC2                        l2460 09EA  
                      l2436 098E                        l2428 0950                        l2620 10BE  
                      l2612 108E                        l2604 105C                        l2540 0E72  
                      l2532 0E3C                        l2524 0DBA                        l2516 0D94  
                      l2508 0D60                        l2700 1838                        l2278 11FE  
                      l2286 121C                        l2198 1D8C                        l2390 0CB4  
                      l2382 0C7E                        l2374 0C42                        l2366 0C12  
                      l2462 0A12                        l2454 09C2                        l2470 0A2E  
                      l2446 09AE                        l2438 0992                        l2622 10C2  
                      l2614 1092                        l2606 106C                        l2550 0EBA  
                      l2534 0E4C                        l2526 0DE2                        l2542 0E76  
                      l2518 0D9E                        l2630 14A4                        l2710 1866  
                      l2702 183E                        l2800 1754                        l2296 1262  
                      l2288 1238                        l2384 0C86                        l2392 0CB6  
                      l2376 0C54                        l2368 0C16                        l2480 0A86  
                      l2472 0A36                        l2464 0A14                        l2456 09DE  
                      l2448 09BE                        l2624 10E2                        l2616 1094  
                      l2608 107C                        l2560 0EFA                        l2552 0ECA  
                      l2544 0E98                        l2536 0E4E                        l2528 0E12  
                      l2640 14C8                        l2632 14B0                        l2720 1886  
                      l2712 186A                        l2704 1858                        l2810 179A  
                      l2802 1766                        l2298 1268                        l2386 0C8A  
                      l2378 0C5A                        l2482 0A88                        l2474 0A52  
                      l2466 0A16                        l2458 09E6                        l2490 0AA6  
                      l2626 10E2                        l2618 10AE                        l2570 0F40  
                      l2562 0EFE                        l2554 0ECE                        l2546 0EA8  
                      l2538 0E70                        l2650 1514                        l2642 14D2  
                      l2634 14B6                        l2730 18A2                        l2722 188A  
                      l2714 186E                        l2706 185E                        l2820 17B2  
                      l2812 179C                        l2804 1790                        l2388 0CB2  
                      l2492 0AB6                        l2476 0A5A                        l2484 0A8A  
                      l2468 0A28                        l2580 0F68                        l2572 0F4C  
                      l2564 0F1E                        l2556 0ED0                        l2548 0EB8  
                      l2660 152A                        l2652 151A                        l2644 14D8  
                      l2636 14BC                        l2628 146C                        l2732 18B2  
                      l2724 188C                        l2716 1872                        l2708 1862  
                      l2740 1D4C                        l2830 17C4                        l2822 17B8  
                      l2814 179E                        l2806 1796                        l2398 0CD2  
                      l2494 0AC6                        l2478 0A5E                        l2590 0FD8  
                      l2582 0F72                        l2574 0F52                        l2566 0F1E  
                      l2558 0EEA                        l2670 1548                        l2662 152E  
                      l2654 151E                        l2646 14F0                        l2638 14C2  
                      l2734 18B6                        l2718 1880                        l2750 1DA8  
                      l2742 1D5C                        l2910 06D8                        l2902 067E  
                      l2832 17C4                        l2824 17B8                        l2816 17A0  
                      l2808 1798                        l2840 1B82                        l2496 0AD6  
                      l2592 1000                        l2584 0F7E                        l2576 0F58  
                      l2568 0F24                        l2680 1572                        l2664 153C  
                      l2656 1522                        l2648 1504                        l2736 18CC  
                      l2760 1C3A                        l2752 1DC4                        l2744 1D6C  
                      l2920 0752                        l2912 0700                        l2904 0696  
                      l2826 17BE                        l2818 17B2                        l2850 1BC6  
                      l2842 1B8C                        l2834 1B6A                        l2498 0AD8  
                      l2594 1010                        l2586 0FA6                        l2578 0F62  
                      l2682 1588                        l2666 1542                        l2658 1526  
                      l2690 1816                        l2770 1C74                        l2762 1C42  
                      l2746 1D70                        l2738 1D48                        l2930 076E  
                      l2922 0762                        l2914 0704                        l2906 06B4  
                      l2828 17BE                        l2780 16C8                        l2852 1BEA  
                      l2836 1B6E                        l2596 1012                        l2588 0FD6  
                      l2676 155E                        l2668 1546                        l2692 181C  
                      l2684 17CC                        l2860 1AAC                        l2772 1C7C  
                      l2764 1C4A                        l2756 1C20                        l2940 07D4  
                      l2924 076A                        l2908 06BC                        l2790 174A  
                      l2782 1728                        l2854 1BEE                        l2838 1B78  
                      l2846 1B96                        l2598 1034                        l2678 156E  
                      l2694 1822                        l2686 1804                        l2870 1AF4  
                      l2862 1AC0                        l2774 1C7E                        l2766 1C58  
                      l2758 1C28                        l2950 0814                        l2942 07E0  
                      l2934 079C                        l2918 0722                        l2856 1DF2  
                      l2792 174C                        l2848 1BBC                        l2696 1828  
                      l2688 1810                        l2880 1B3A                        l2872 1B06  
                      l2864 1AD2                        l2776 1C84                        l2768 1C5E  
                      l2960 0856                        l2952 0818                        l2944 07E8  
                      l2936 079E                        l2794 174E                        l2778 16B0  
                      l2698 1832                        l2882 1B42                        l2874 1B0E  
                      l2866 1ADA                        l2858 1A9A                        l2962 0876  
                      l2970 08C6                        l2946 07F6                        l2954 0834  
                      l2938 07B0                        l2890 0642                        l2796 1750  
                      l2788 1744                        l2884 1B54                        l2876 1B20  
                      l2868 1AEC                        l2964 08A4                        l2956 0846  
                      l2948 0808                        l2892 0654                        l2972 08D8  
                      l2798 1752                        l2886 1B5C                        l2878 1B28  
                      l2966 08B6                        l2958 0852                        l2974 08FA  
                      l2894 0660                        l2968 08C2                        l2896 0668  
                      l2888 0636                        l2898 0678                        ?_isr 0048  
                      STR_1 062E                        STR_2 0609                        STR_3 061D  
                      u1100 0BB4                        u1005 136A                        u1101 0BB0  
                      u1110 0BD6                        u1015 1390                        u1111 0BD2  
                      u1200 0D58                        u1120 0BEA                        u1025 10F6  
                      u1201 0D54                        u1121 0BE6                        u1050 1262  
                      u1130 0C0A                        u1210 0988                        u1035 1110  
                      u1051 125E                        u1131 0C06                        u1211 0984  
                      u1060 1292                        u1300 0AEE                        u1220 09AA  
                      u1045 1136                        u1061 128E                        u1301 0AEA  
                      u1221 09A6                        u1070 12CA                        u1150 0C54  
                      u1310 0B2C                        u1230 09BE                        u2007 175C  
                      u1071 12C6                        u1151 0C50                        u1311 0B28  
                      u1231 09BA                        u1080 130E                        u1160 0C7E  
                      u1144 0C28                        u1240 09DE                        u1320 0DE2  
                      u1400 14F0                        u2017 1792                        u1081 130A  
                      u1161 0C7A                        u1145 0C24                        u1241 09DA  
                      u1321 0DDE                        u1401 14EC                        u1090 1338  
                      u1330 0E98                        u1410 155E                        u2027 17A8  
                      u1091 1334                        u1331 0E94                        u1411 155A  
                      u1500 1778                        u1180 0CC8                        u1260 0A28  
                      u1340 0EEA                        u1420 1586                        u2037 13C8  
                      u1501 1774                        u1181 0CC4                        u1261 0A24  
                      u1341 0EE6                        u1421 1582                        _LATA 000F89  
                      u1510 1BE6                        u1190 0D1A                        u1174 0C9C  
                      u1270 0A52                        u1254 09FC                        u1350 0F1C  
                      u1430 18A2                        _LATB 000F8A                        u2047 13D2  
                      u1191 0D16                        u1175 0C98                        u1271 0A4E  
                      u1255 09F8                        u1351 0F18                        u1431 189E  
                      _LATC 000F8B                        u1520 1C0E                        u1360 0FA6  
                      u1440 18CA                        u1600 1B3A                        _LATD 000F8C  
                      u2057 144A                        u1361 0FA2                        u1441 18C6  
                      u1601 1B36                        _LATE 000F8D                        u1530 1C1E  
                      u1290 0A9C                        u1370 105C                        u1610 1B54  
                      u1450 1D5C                        u2067 1454                        u1531 1C1A  
                      u1291 0A98                        u1371 1058                        u1611 1B50  
                      u1451 1D58                        u1284 0A70                        u1380 10AE  
                      u1540 1AAC                        u1460 1D6C                        u1700 0830  
                      u1620 0654                        u2077 1460                        u1517 1BDC  
                      u1285 0A6C                        u1381 10AA                        u1541 1AA8  
                      u1461 1D68                        u1701 082C                        u1621 0650  
                      u1390 10E0                        u1550 1AC0                        u1470 1C3A  
                      u1710 0846                        u1630 06B4                        u1527 1C04  
                      u1391 10DC                        u1551 1ABC                        u1471 1C36  
                      u1711 0842                        u1631 06B0                        u1560 1AD2  
                      u1480 1C58                        u1720 086E                        u1640 0722  
                      u1561 1ACE                        u1481 1C54                        u1721 086A  
                      u1641 071E                        u1570 1AEC                        u1490 1C74  
                      u1730 08D8                        u1650 0798                        u1571 1AE8  
                      u1491 1C70                        u1731 08D4                        u1651 0794  
                      u1580 1B06                        u1740 08FA                        u1660 07B0  
                      u1581 1B02                        u1741 08F6                        u1661 07AC  
                      u1590 1B20                        u1670 07D4                        u1591 1B1C  
                      u1671 07D0                        _PIE1 000F9D                        u1680 07F6  
                      u1760 1A3A                        u1681 07F2                        u1761 1A36  
                      u1690 0808                        u1907 11FA                        u1691 0804  
                      u1917 1202                        u1927 120C                        u1775 1A90  
                      u1776 1A92                        u1937 16CE                        u1947 16DE  
                      u1957 16EE                        u1877 116E                        u1967 16FE  
                      u1887 1178                        u1977 170E                        u1897 11F0  
                      u1987 171E                        u1997 1746              generateCRC@crc 005A  
                      _main 19C2                        fsr1h 000FE2                        fsr2h 000FDA  
                      indf1 000FE7                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                        btemp 006E                        prodh 000FF4  
                      prodl 000FF3                        start 000E             __end_of_Lcd_Cmd 146C  
           __end_of_Lcd_Out 1C20                ___param_bank 000000                  _Lcd_Chr_CP 10E8  
                     ??_isr 0048                       ?_main 0048              clearResponse@i 004F  
           __end_of___lwdiv 1C94                       i2l142 1636                       i2l144 16A4  
                     i2l250 1E06                       i2l139 1638                       i2l194 1DE4  
                     _RCREG 000FAE                       _RCSTA 000FAB   writeReg@wr_valToWriteHigh 0062  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _SPBRG 000FAF  
                     _PORTA 000F80                       _PORTB 000F81                       _PORTC 000F82  
                     _PORTD 000F83                       _PORTE 000F84                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96                       _TXREG 000FAD                       _TXSTA 000FAC  
       writeCoil@wc_Address 0068                       _coils 0001             __end_of_readReg 0F24  
           __end_of_isdigit 1D78       writeReg@wr_AddressLow 005C                       tablat 000FF5  
                     ttemp5 006F                       ttemp6 0072                       ttemp7 0076  
                     status 000FD8                       wtemp8 006F             __end_of_sprintf 0908  
          __end_of_ClsUSART 1DF2                ?_modbusDelay 0048            __end_of_Lcd_Init 17CC  
            checkCRC@crcLow 0051   writeCoil@wc_valToWriteLow 0060             __initialization 1D02  
              __end_of_main 1A9A            __end_of_OpnUSART 1D02                      ??_main 006D  
          __end_of_OpenTmr0 1DE6               __activetblptr 000002               ?_readInputReg 0048  
     __end_of_clearResponse 1DA8    __end_of_ConfigInterrupts 1DFE      __size_of_readInputCoil 022C  
               readCoil@crc 0062                 readCoil@lsb 0069                      i2l3040 15A6  
                    i2l3050 15E6                      i2l3042 15B6                      i2l3060 161C  
                    i2l3044 15C6                      i2l3052 15EA                      i2l3070 162E  
                    i2l3062 161E                      i2l3054 15FA                      i2l3046 15D4  
                    i2l3038 1598                      i2l3080 165C                      i2l3064 1622  
                    i2l3056 15FE                      i2l3048 15E4                      i2l3090 1686  
                    i2l3082 1664                      i2l3074 1646                      i2l3066 1626  
                    i2l3058 160C                      i2l3092 1698                      i2l3084 166C  
                    i2l3076 164A                      i2l3068 162A                      i2l3094 169C  
                    i2l3086 1674                      i2l3078 164C                      i2l3088 1684  
                    i2l3096 16A2                      i2l2980 1DD6                      i2l2982 1DDE  
                    i2l2984 1DE0                      i2l2986 1DE2                      i2l2978 1DCE  
                    i2l2988 1DFE                   ??_Lcd_Cmd 004A                   ??_Lcd_Out 0050  
          __end_of_checkCRC 1342            __end_of_decodeIt 1B68      writeCoil@wc_valToWrite 0064  
      __size_of_generateCRC 00F0                 ?_Lcd_Chr_CP 0048                      ___wmul 1DA8  
                 ??___lwdiv 004E            __end_of_readCoil 0D60                      clear_0 1D1A  
                    clear_1 1D26                      clear_2 1D32      writeReg@wr_AddressHigh 005E  
           readInputReg@crc 005E                   ??_readReg 005C                __pdataCOMRAM 006D  
                 ??_isdigit 004A              ??_readInputReg 005C                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_sprintf 005D            __end_of_writeReg 18D2                  __accesstop 0080  
   __end_of__initialization 1D38    writeReg@wr_valToWriteLow 0060               ___rparam_used 000001  
           checkCRC@crcHigh 004F               _readInputCoil 0908              __pcstackCOMRAM 0048  
                 ?_ClsUSART 0048                   ?_Lcd_Init 0048                _endOfMessage 0037  
              sprintf@width 0068         __size_of_Lcd_Chr_CP 0130   readInputCoil@howManyBytes 0067  
                __pbssBANK0 0080                  __pbssBANK1 0100                   ?_OpnUSART 0048  
                 ?_OpenTmr0 0048              ?_readInputCoil 0048        __size_of_modbusDelay 000A  
                   ?___wmul 004A                   ?_checkCRC 0048                   ?_decodeIt 0048  
                ??_ClsUSART 004A                  ??_Lcd_Init 004D                     _Lcd_Cmd 1342  
                 ?_readCoil 0048                     _Lcd_Out 1B68                  ??_OpnUSART 004A  
        __size_of_writeCoil 0122           readReg@rr_Address 0060                  ??_OpenTmr0 0048  
                   __Hparam 0000                     __Lparam 0000        __end_of_readInputReg 10E8  
                _holdingReg 017D           generateCRC@crcLow 0052             __size_of___wmul 0026  
                   ___lwdiv 1C20                __psmallconst 0600                  _newMessage 006D  
                   __pcinit 1D02               _messageLength 0035                     __ramtop 0600  
                   __ptext0 19C2                     __ptext1 0636                     __ptext2 1D46  
                   __ptext3 1DA8                     __ptext4 1C20                     __ptext5 1A9A  
                   __ptext6 17CC                     __ptext7 146C                     __ptext8 0D60  
                   __ptext9 0F24                   ?_writeReg 0048                   _T0CONbits 000FD5  
         __end_of_hexpowers 0609                  ??_checkCRC 004A                     _readReg 0D60  
                   _isdigit 1D46                __size_of_isr 16A8                  ??_decodeIt 006D  
          readInputCoil@crc 0062            readInputCoil@lsb 0069           ?_ConfigInterrupts 0048  
                   _sprintf 0636              __pintcode_body 158E        end_of_initialization 1D38  
        ??_ConfigInterrupts 004A           readReg@rr_numRegs 0062                  ??_readCoil 005C  
             __Lmediumconst 0000                     int_func 158E             ??_readInputCoil 005C  
             _modbusMessage 0034                writeCoil@crc 0066                   _RCSTAbits 000FAB  
              ??_Lcd_Chr_CP 004A                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc1 000FE6                     postinc2 000FDE  
                _timerCount 0036                  ??_writeReg 005C                   _PORTDbits 000F83  
                 _PORTEbits 000F84           readCoil@remainder 0064           __end_of_writeCoil 158E  
                 _TRISBbits 000F93                   _TRISCbits 000F94                   _TRISDbits 000F95  
                 _TRISEbits 000F96          __end_of_Lcd_Chr_CP 1218               ??_generateCRC 004C  
                 _TXSTAbits 000FAC       writeReg@wr_valToWrite 0066      __size_of_clearResponse 0030  
   writeCoil@wc_AddressHigh 005E              __end_of___wmul 1DCE                 _BAUDCONbits 000FB8  
             __pidataCOMRAM 1E08         start_initialization 1D02                 __end_of_isr 16B0  
         __size_of_ClsUSART 000C               Lcd_Out@buffer 004E           __size_of_Lcd_Init 011C  
     __size_of_readInputReg 01C4                  readReg@crc 005E           __size_of_OpnUSART 006E  
       __end_of_generateCRC 19C2           __size_of_OpenTmr0 0018                    ??___wmul 004E  
            readInputCoil@i 006A              readInputCoil@j 006B              readInputCoil@k 006C  
            readInputCoil@l 0068                 __pbssCOMRAM 0001                _readInputReg 0F24  
         __size_of_checkCRC 012A           __size_of_decodeIt 00CE               _clearResponse 1D78  
              _isdigit$1692 004B                    ?_Lcd_Cmd 0048                 sprintf@flag 0064  
                  ?_Lcd_Out 004D                 sprintf@prec 0067               ??_modbusDelay 0048  
         __size_of_readCoil 022C            ___lwdiv@dividend 004A                   __pintcode 0008  
                  ?___lwdiv 004A                 __smallconst 0600                   checkCRC@i 0057  
                 checkCRC@j 0053                    ?_readReg 0048                    ?_isdigit 0048  
         __size_of_writeReg 0106              ?_clearResponse 0048                   _hexpowers 0601  
          ___lwdiv@quotient 004E                    ?_sprintf 0051        readCoil@howManyBytes 0067  
               _generateCRC 18D2              ___wmul@product 004E                    _LATBbits 000F8A  
                  _LATEbits 000F8D                    _PIE1bits 000F9D                    i2u180_40 15C6  
                  i2u180_41 15C2                    i2u181_40 15D4                    i2u181_41 15D0  
                  i2u182_40 15FA                    i2u182_41 15F6                    i2u183_40 160C  
                  i2u183_41 1608                    i2u184_40 1646                    i2u184_41 1642  
                  i2u185_40 165C                    i2u185_41 1658                    _PIR1bits 000F9E  
                  i2u186_40 1698                    i2u178_40 15A6                    i2u186_41 1694  
                  i2u178_41 15A2                    i2u179_40 15B6                    i2u179_41 15B2  
 __size_of_ConfigInterrupts 000C                    _RCONbits 000FD0                    Lcd_Out@x 004D  
                  Lcd_Out@y 0050                 writeReg@crc 0068         __end_of_modbusDelay 1E08  
              Lcd_Init@data 004E           ___wmul@multiplier 004A                    _ClsUSART 1DE6  
               checkCRC@crc 0055                    _Lcd_Init 16B0                   _writeCoil 146C  
    writeCoil@wc_AddressLow 005C               OpnUSART@spbrg 004B            __size_of_Lcd_Cmd 012A  
                  _OpnUSART 1C94            __size_of_Lcd_Out 00B8                   readCoil@i 006A  
                 readCoil@j 006B                   readCoil@k 006C                   readCoil@l 0068  
                  _OpenTmr0 1DCE                    __Hrparam 0000       __end_of_readInputCoil 0B34  
                  __Lrparam 0000               readInputReg@i 0064               readInputReg@j 0066  
        generateCRC@crcHigh 0054            __size_of___lwdiv 0074                    _checkCRC 1218  
                sprintf@idx 0063             ??_clearResponse 004F                  sprintf@val 0065  
                  _decodeIt 1A9A            __size_of_readReg 01C4            __size_of_isdigit 0032  
            Lcd_Chr_CP@data 004C             ___lwdiv@divisor 004C             ___lwdiv@counter 0050  
                  __ptext10 0908                    __ptext11 0B34                    __ptext20 1342  
                  __ptext12 18D2                    __ptext21 1DF2                    __ptext13 1D78  
                  __ptext14 1C94                    __ptext23 1DFE                    __ptext15 1DE6  
                  __ptext24 1DCE                    __ptext16 1218                    __ptext17 1B68  
                  __ptext18 10E8                    __ptext19 16B0                  ?_writeCoil 0048  
          __size_of_sprintf 02D2  writeCoil@wc_valToWriteHigh 0062                 Lcd_Cmd@data 004C  
                  _readCoil 0B34               __size_of_main 00D8                    _received 0100  
               _modbusDelay 1DFE                  writeCoil@i 006A                    _response 0080  
                  int$flags 006E    generateCRC@messageLength 0051                    _writeReg 17CC  
               Lcd_Out@data 0051                  _INTCONbits 000FF2      readInputReg@rr_Address 0060  
        readCoil@rc_Address 0060                    readReg@i 0064                    readReg@j 0066  
   readInputCoil@rc_Address 0060         readCoil@rc_numCoils 0065                    isdigit@c 004C  
  readInputCoil@rc_numCoils 0065                    intlevel2 0000                   sprintf@ap 0061  
                 sprintf@sp 0051            _ConfigInterrupts 1DF2                   writeReg@i 006A  
    readInputReg@rr_numRegs 0062                    sprintf@c 006A                    sprintf@f 0053  
               ??_writeCoil 005C                ?_generateCRC 004A      readInputCoil@remainder 0064  
