

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Nov 18 11:42:06 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  0010A8                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _key
    63  0010A8  20                 	db	32
    64                           
    65                           	psect	smallconst
    66  000800                     __psmallconst:
    67                           	callstack 0
    68  000800  00                 	db	0
    69  000801                     _linha:
    70                           	callstack 0
    71  000801  01                 	db	1
    72  000802  02                 	db	2
    73  000803  04                 	db	4
    74  000804  00                 	db	0
    75  000805                     __end_of_linha:
    76                           	callstack 0
    77  0000                     _LATE	set	3981
    78  0000                     _PORTE	set	3972
    79  0000                     _LATD	set	3980
    80  0000                     _PORTD	set	3971
    81  0000                     _LATC	set	3979
    82  0000                     _PORTC	set	3970
    83  0000                     _LATB	set	3978
    84  0000                     _TRISE	set	3990
    85  0000                     _TRISD	set	3989
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISB	set	3987
    88  0000                     _INTCON3	set	4080
    89  0000                     _INTCON2	set	4081
    90  0000                     _INTCON	set	4082
    91  0000                     _ADCON1	set	4033
    92  0000                     _ADCON0	set	4034
    93  0000                     _PORTEbits	set	3972
    94  0000                     _TRISEbits	set	3990
    95  0000                     _TRISDbits	set	3989
    96  0000                     _PORTDbits	set	3971
    97  0000                     _PORTB	set	3969
    98  000805                     STR_12:
    99  000805  2D                 	db	45
   100  000806  00                 	db	0
   101  000807                     STR_10:
   102  000807  30                 	db	48	;'0'
   103  000808  00                 	db	0
   104  000809                     STR_1:
   105  000809  31                 	db	49	;'1'
   106  00080A  00                 	db	0
   107  00080B                     STR_2:
   108  00080B  32                 	db	50	;'2'
   109  00080C  00                 	db	0
   110  00080D                     STR_3:
   111  00080D  33                 	db	51	;'3'
   112  00080E  00                 	db	0
   113  00080F                     STR_4:
   114  00080F  34                 	db	52	;'4'
   115  000810  00                 	db	0
   116  000811                     STR_5:
   117  000811  35                 	db	53	;'5'
   118  000812  00                 	db	0
   119  000813                     STR_6:
   120  000813  36                 	db	54	;'6'
   121  000814  00                 	db	0
   122  000815                     STR_7:
   123  000815  37                 	db	55	;'7'
   124  000816  00                 	db	0
   125  000817                     STR_8:
   126  000817  38                 	db	56	;'8'
   127  000818  00                 	db	0
   128  000819                     STR_9:
   129  000819  39                 	db	57	;'9'
   130  00081A  00                 	db	0
   131  00081B                     STR_11:
   132  00081B  78                 	db	120	;'x'
   133  00081C  00                 	db	0
   134  00081D  00                 	db	0	; dummy byte at the end
   135  0000                     
   136                           ; #config settings
   137                           
   138                           	psect	cinit
   139  00108A                     __pcinit:
   140                           	callstack 0
   141  00108A                     start_initialization:
   142                           	callstack 0
   143  00108A                     __initialization:
   144                           	callstack 0
   145                           
   146                           ; Initialize objects allocated to COMRAM (1 bytes)
   147                           ; load TBLPTR registers with __pidataCOMRAM
   148  00108A  0EA8               	movlw	low __pidataCOMRAM
   149  00108C  6EF6               	movwf	tblptrl,c
   150  00108E  0E10               	movlw	high __pidataCOMRAM
   151  001090  6EF7               	movwf	tblptrh,c
   152  001092  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   153  001094  6EF8               	movwf	tblptru,c
   154  001096  0009               	tblrd		*+	;fetch initializer
   155  001098  CFF5 F010          	movff	tablat,__pdataCOMRAM
   156                           
   157                           ; Clear objects allocated to COMRAM (1 bytes)
   158  00109C  6A0F               	clrf	__pbssCOMRAM& (0+255),c
   159  00109E                     end_of_initialization:
   160                           	callstack 0
   161  00109E                     __end_of__initialization:
   162                           	callstack 0
   163  00109E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   164  0010A0  6EF8               	movwf	tblptru,c
   165  0010A2  0100               	movlb	0
   166  0010A4  EF0F  F004         	goto	_main	;jump to C main() function
   167                           
   168                           	psect	bssCOMRAM
   169  00000F                     __pbssCOMRAM:
   170                           	callstack 0
   171  00000F                     _tecla:
   172                           	callstack 0
   173  00000F                     	ds	1
   174                           
   175                           	psect	dataCOMRAM
   176  000010                     __pdataCOMRAM:
   177                           	callstack 0
   178  000010                     _key:
   179                           	callstack 0
   180  000010                     	ds	1
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	callstack 0
   185  000001                     ??_Lcd_Cmd:
   186  000001                     ??_Lcd_Chr_CP:
   187  000001                     atraso_ms@valor:
   188                           	callstack 0
   189                           
   190                           ; 2 bytes @ 0x0
   191  000001                     	ds	2
   192  000003                     Lcd_Chr_CP@data:
   193                           	callstack 0
   194  000003                     Lcd_Cmd@data:
   195                           	callstack 0
   196  000003                     atraso_ms@i:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x2
   200  000003                     	ds	1
   201  000004                     ??_Lcd_Init:
   202  000004                     Lcd_Out@x:
   203                           	callstack 0
   204                           
   205                           ; 1 bytes @ 0x3
   206  000004                     	ds	1
   207  000005                     Lcd_Init@data:
   208                           	callstack 0
   209  000005                     atraso_ms@j:
   210                           	callstack 0
   211  000005                     Lcd_Out@buffer:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x4
   215  000005                     	ds	1
   216  000006                     tc_tecla@timeout:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0x5
   220  000006                     	ds	1
   221  000007                     Lcd_Out@y:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0x6
   225  000007                     	ds	1
   226  000008                     Lcd_Out@data:
   227                           	callstack 0
   228  000008                     tc_tecla@to:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x7
   232  000008                     	ds	2
   233  00000A                     tc_tecla@tmp:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x9
   237  00000A                     	ds	1
   238  00000B                     tc_tecla@ret:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0xA
   242  00000B                     	ds	1
   243  00000C                     tc_tecla@i:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0xB
   247  00000C                     	ds	1
   248  00000D                     ??_main:
   249                           
   250                           ; 1 bytes @ 0xC
   251  00000D                     	ds	2
   252                           
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 18 in file "mainLCDtecl2.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   272 ;;      Params:         0       0       0       0       0       0       0       0       0
   273 ;;      Locals:         0       0       0       0       0       0       0       0       0
   274 ;;      Temps:          2       0       0       0       0       0       0       0       0
   275 ;;      Totals:         2       0       0       0       0       0       0       0       0
   276 ;;Total ram usage:        2 bytes
   277 ;; Hardware stack levels required when called:    2
   278 ;; This function calls:
   279 ;;		_Lcd_Cmd
   280 ;;		_Lcd_Init
   281 ;;		_Lcd_Out
   282 ;;		_tc_tecla
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           	psect	text0
   289  00081E                     __ptext0:
   290                           	callstack 0
   291  00081E                     _main:
   292                           	callstack 29
   293  00081E                     
   294                           ;mainLCDtecl2.c: 20: ADCON0 = 0b00000000;
   295  00081E  0E00               	movlw	0
   296  000820  6EC2               	movwf	194,c	;volatile
   297                           
   298                           ;mainLCDtecl2.c: 21: ADCON1 = 0b00001111;
   299  000822  0E0F               	movlw	15
   300  000824  6EC1               	movwf	193,c	;volatile
   301                           
   302                           ;mainLCDtecl2.c: 23: INTCON = 0b00000000;
   303  000826  0E00               	movlw	0
   304  000828  6EF2               	movwf	242,c	;volatile
   305                           
   306                           ;mainLCDtecl2.c: 24: INTCON2 = 0b10000000;
   307  00082A  0E80               	movlw	128
   308  00082C  6EF1               	movwf	241,c	;volatile
   309                           
   310                           ;mainLCDtecl2.c: 25: INTCON3 = 0b00000000;
   311  00082E  0E00               	movlw	0
   312  000830  6EF0               	movwf	240,c	;volatile
   313                           
   314                           ;mainLCDtecl2.c: 27: TRISB = 0b00000000;
   315  000832  0E00               	movlw	0
   316  000834  6E93               	movwf	147,c	;volatile
   317                           
   318                           ;mainLCDtecl2.c: 28: TRISC = 0b00000000;
   319  000836  0E00               	movlw	0
   320  000838  6E94               	movwf	148,c	;volatile
   321                           
   322                           ;mainLCDtecl2.c: 29: TRISD = 0b00001111;
   323  00083A  0E0F               	movlw	15
   324  00083C  6E95               	movwf	149,c	;volatile
   325                           
   326                           ;mainLCDtecl2.c: 30: TRISE = 0b00000000;
   327  00083E  0E00               	movlw	0
   328  000840  6E96               	movwf	150,c	;volatile
   329  000842                     
   330                           ;mainLCDtecl2.c: 32: PORTB = 0xFF;
   331  000842  6881               	setf	129,c	;volatile
   332  000844                     
   333                           ;mainLCDtecl2.c: 33: LATB = 0xFF;
   334  000844  688A               	setf	138,c	;volatile
   335                           
   336                           ;mainLCDtecl2.c: 34: PORTC = 0;
   337  000846  0E00               	movlw	0
   338  000848  6E82               	movwf	130,c	;volatile
   339                           
   340                           ;mainLCDtecl2.c: 35: LATC = 0;
   341  00084A  0E00               	movlw	0
   342  00084C  6E8B               	movwf	139,c	;volatile
   343                           
   344                           ;mainLCDtecl2.c: 36: PORTD = 0;
   345  00084E  0E00               	movlw	0
   346  000850  6E83               	movwf	131,c	;volatile
   347                           
   348                           ;mainLCDtecl2.c: 37: LATD = 0;
   349  000852  0E00               	movlw	0
   350  000854  6E8C               	movwf	140,c	;volatile
   351                           
   352                           ;mainLCDtecl2.c: 38: PORTE = 0;
   353  000856  0E00               	movlw	0
   354  000858  6E84               	movwf	132,c	;volatile
   355                           
   356                           ;mainLCDtecl2.c: 39: LATE = 0;
   357  00085A  0E00               	movlw	0
   358  00085C  6E8D               	movwf	141,c	;volatile
   359  00085E                     
   360                           ;mainLCDtecl2.c: 41: Lcd_Init();
   361  00085E  EC51  F007         	call	_Lcd_Init	;wreg free
   362  000862                     
   363                           ;mainLCDtecl2.c: 42: Lcd_Cmd(12);
   364  000862  0E0C               	movlw	12
   365  000864  ECBB  F006         	call	_Lcd_Cmd
   366  000868                     l1352:
   367                           
   368                           ;mainLCDtecl2.c: 43: _delay((unsigned long)((100)*(8000000/4000.0)));
   369  000868  0E02               	movlw	2
   370  00086A  6E0E               	movwf	(??_main+1)^0,c
   371  00086C  0E04               	movlw	4
   372  00086E  6E0D               	movwf	??_main^0,c
   373  000870  0EBA               	movlw	186
   374  000872                     u757:
   375  000872  2EE8               	decfsz	wreg,f,c
   376  000874  D7FE               	bra	u757
   377  000876  2E0D               	decfsz	??_main^0,f,c
   378  000878  D7FC               	bra	u757
   379  00087A  2E0E               	decfsz	(??_main+1)^0,f,c
   380  00087C  D7FA               	bra	u757
   381  00087E  D000               	nop2	
   382  000880                     l1354:
   383                           
   384                           ;mainLCDtecl2.c: 45: {;mainLCDtecl2.c: 47: tecla = tc_tecla(1500)+0x30;
   385  000880  0E05               	movlw	5
   386  000882  6E07               	movwf	(tc_tecla@timeout+1)^0,c
   387  000884  0EDC               	movlw	220
   388  000886  6E06               	movwf	tc_tecla@timeout^0,c
   389  000888  EC3C  F005         	call	_tc_tecla	;wreg free
   390  00088C  0F30               	addlw	48
   391  00088E  6E0F               	movwf	_tecla^0,c
   392  000890                     
   393                           ;mainLCDtecl2.c: 49: if (tecla == '1')
   394  000890  0E31               	movlw	49
   395  000892  180F               	xorwf	_tecla^0,w,c
   396  000894  A4D8               	btfss	status,2,c
   397  000896  EF4F  F004         	goto	u631
   398  00089A  EF51  F004         	goto	u630
   399  00089E                     u631:
   400  00089E  EF5C  F004         	goto	l1362
   401  0008A2                     u630:
   402  0008A2                     
   403                           ;mainLCDtecl2.c: 50: {;mainLCDtecl2.c: 51: Lcd_Out(1, 0, "1");
   404  0008A2  0E00               	movlw	0
   405  0008A4  6E04               	movwf	Lcd_Out@x^0,c
   406  0008A6  0E09               	movlw	low STR_1
   407  0008A8  6E05               	movwf	Lcd_Out@buffer^0,c
   408  0008AA  0E08               	movlw	high STR_1
   409  0008AC  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   410  0008AE  0E01               	movlw	1
   411  0008B0  ECD9  F007         	call	_Lcd_Out
   412  0008B4  EF34  F004         	goto	l1352
   413  0008B8                     l1362:
   414                           
   415                           ;mainLCDtecl2.c: 54: else if (tecla == '2')
   416  0008B8  0E32               	movlw	50
   417  0008BA  180F               	xorwf	_tecla^0,w,c
   418  0008BC  A4D8               	btfss	status,2,c
   419  0008BE  EF63  F004         	goto	u641
   420  0008C2  EF65  F004         	goto	u640
   421  0008C6                     u641:
   422  0008C6  EF70  F004         	goto	l1368
   423  0008CA                     u640:
   424  0008CA                     
   425                           ;mainLCDtecl2.c: 55: {;mainLCDtecl2.c: 56: Lcd_Out(1, 0, "2");
   426  0008CA  0E00               	movlw	0
   427  0008CC  6E04               	movwf	Lcd_Out@x^0,c
   428  0008CE  0E0B               	movlw	low STR_2
   429  0008D0  6E05               	movwf	Lcd_Out@buffer^0,c
   430  0008D2  0E08               	movlw	high STR_2
   431  0008D4  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   432  0008D6  0E01               	movlw	1
   433  0008D8  ECD9  F007         	call	_Lcd_Out
   434  0008DC  EF34  F004         	goto	l1352
   435  0008E0                     l1368:
   436                           
   437                           ;mainLCDtecl2.c: 59: else if (tecla == '3')
   438  0008E0  0E33               	movlw	51
   439  0008E2  180F               	xorwf	_tecla^0,w,c
   440  0008E4  A4D8               	btfss	status,2,c
   441  0008E6  EF77  F004         	goto	u651
   442  0008EA  EF79  F004         	goto	u650
   443  0008EE                     u651:
   444  0008EE  EF84  F004         	goto	l1374
   445  0008F2                     u650:
   446  0008F2                     
   447                           ;mainLCDtecl2.c: 60: {;mainLCDtecl2.c: 61: Lcd_Out(1, 0, "3");
   448  0008F2  0E00               	movlw	0
   449  0008F4  6E04               	movwf	Lcd_Out@x^0,c
   450  0008F6  0E0D               	movlw	low STR_3
   451  0008F8  6E05               	movwf	Lcd_Out@buffer^0,c
   452  0008FA  0E08               	movlw	high STR_3
   453  0008FC  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   454  0008FE  0E01               	movlw	1
   455  000900  ECD9  F007         	call	_Lcd_Out
   456  000904  EF34  F004         	goto	l1352
   457  000908                     l1374:
   458                           
   459                           ;mainLCDtecl2.c: 64: else if (tecla == '4')
   460  000908  0E34               	movlw	52
   461  00090A  180F               	xorwf	_tecla^0,w,c
   462  00090C  A4D8               	btfss	status,2,c
   463  00090E  EF8B  F004         	goto	u661
   464  000912  EF8D  F004         	goto	u660
   465  000916                     u661:
   466  000916  EF98  F004         	goto	l1380
   467  00091A                     u660:
   468  00091A                     
   469                           ;mainLCDtecl2.c: 65: {;mainLCDtecl2.c: 66: Lcd_Out(1, 0, "4");
   470  00091A  0E00               	movlw	0
   471  00091C  6E04               	movwf	Lcd_Out@x^0,c
   472  00091E  0E0F               	movlw	low STR_4
   473  000920  6E05               	movwf	Lcd_Out@buffer^0,c
   474  000922  0E08               	movlw	high STR_4
   475  000924  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   476  000926  0E01               	movlw	1
   477  000928  ECD9  F007         	call	_Lcd_Out
   478  00092C  EF34  F004         	goto	l1352
   479  000930                     l1380:
   480                           
   481                           ;mainLCDtecl2.c: 69: else if (tecla == '5')
   482  000930  0E35               	movlw	53
   483  000932  180F               	xorwf	_tecla^0,w,c
   484  000934  A4D8               	btfss	status,2,c
   485  000936  EF9F  F004         	goto	u671
   486  00093A  EFA1  F004         	goto	u670
   487  00093E                     u671:
   488  00093E  EFAC  F004         	goto	l1386
   489  000942                     u670:
   490  000942                     
   491                           ;mainLCDtecl2.c: 70: {;mainLCDtecl2.c: 71: Lcd_Out(1, 0, "5");
   492  000942  0E00               	movlw	0
   493  000944  6E04               	movwf	Lcd_Out@x^0,c
   494  000946  0E11               	movlw	low STR_5
   495  000948  6E05               	movwf	Lcd_Out@buffer^0,c
   496  00094A  0E08               	movlw	high STR_5
   497  00094C  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   498  00094E  0E01               	movlw	1
   499  000950  ECD9  F007         	call	_Lcd_Out
   500  000954  EF34  F004         	goto	l1352
   501  000958                     l1386:
   502                           
   503                           ;mainLCDtecl2.c: 74: else if (tecla == '6')
   504  000958  0E36               	movlw	54
   505  00095A  180F               	xorwf	_tecla^0,w,c
   506  00095C  A4D8               	btfss	status,2,c
   507  00095E  EFB3  F004         	goto	u681
   508  000962  EFB5  F004         	goto	u680
   509  000966                     u681:
   510  000966  EFC0  F004         	goto	l1392
   511  00096A                     u680:
   512  00096A                     
   513                           ;mainLCDtecl2.c: 75: {;mainLCDtecl2.c: 76: Lcd_Out(1, 0, "6");
   514  00096A  0E00               	movlw	0
   515  00096C  6E04               	movwf	Lcd_Out@x^0,c
   516  00096E  0E13               	movlw	low STR_6
   517  000970  6E05               	movwf	Lcd_Out@buffer^0,c
   518  000972  0E08               	movlw	high STR_6
   519  000974  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   520  000976  0E01               	movlw	1
   521  000978  ECD9  F007         	call	_Lcd_Out
   522  00097C  EF34  F004         	goto	l1352
   523  000980                     l1392:
   524                           
   525                           ;mainLCDtecl2.c: 79: else if (tecla == '7')
   526  000980  0E37               	movlw	55
   527  000982  180F               	xorwf	_tecla^0,w,c
   528  000984  A4D8               	btfss	status,2,c
   529  000986  EFC7  F004         	goto	u691
   530  00098A  EFC9  F004         	goto	u690
   531  00098E                     u691:
   532  00098E  EFD4  F004         	goto	l1396
   533  000992                     u690:
   534  000992                     
   535                           ;mainLCDtecl2.c: 80: {;mainLCDtecl2.c: 81: Lcd_Out(1, 0, "7");
   536  000992  0E00               	movlw	0
   537  000994  6E04               	movwf	Lcd_Out@x^0,c
   538  000996  0E15               	movlw	low STR_7
   539  000998  6E05               	movwf	Lcd_Out@buffer^0,c
   540  00099A  0E08               	movlw	high STR_7
   541  00099C  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   542  00099E  0E01               	movlw	1
   543  0009A0  ECD9  F007         	call	_Lcd_Out
   544                           
   545                           ;mainLCDtecl2.c: 82: }
   546  0009A4  EF40  F004         	goto	l1354
   547  0009A8                     l1396:
   548                           
   549                           ;mainLCDtecl2.c: 83: else if (tecla == '8')
   550  0009A8  0E38               	movlw	56
   551  0009AA  180F               	xorwf	_tecla^0,w,c
   552  0009AC  A4D8               	btfss	status,2,c
   553  0009AE  EFDB  F004         	goto	u701
   554  0009B2  EFDD  F004         	goto	u700
   555  0009B6                     u701:
   556  0009B6  EFE8  F004         	goto	l1400
   557  0009BA                     u700:
   558  0009BA                     
   559                           ;mainLCDtecl2.c: 84: {;mainLCDtecl2.c: 85: Lcd_Out(1, 0, "8");
   560  0009BA  0E00               	movlw	0
   561  0009BC  6E04               	movwf	Lcd_Out@x^0,c
   562  0009BE  0E17               	movlw	low STR_8
   563  0009C0  6E05               	movwf	Lcd_Out@buffer^0,c
   564  0009C2  0E08               	movlw	high STR_8
   565  0009C4  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   566  0009C6  0E01               	movlw	1
   567  0009C8  ECD9  F007         	call	_Lcd_Out
   568                           
   569                           ;mainLCDtecl2.c: 86: }
   570  0009CC  EF40  F004         	goto	l1354
   571  0009D0                     l1400:
   572                           
   573                           ;mainLCDtecl2.c: 87: else if (tecla == '9')
   574  0009D0  0E39               	movlw	57
   575  0009D2  180F               	xorwf	_tecla^0,w,c
   576  0009D4  A4D8               	btfss	status,2,c
   577  0009D6  EFEF  F004         	goto	u711
   578  0009DA  EFF1  F004         	goto	u710
   579  0009DE                     u711:
   580  0009DE  EFFC  F004         	goto	l1404
   581  0009E2                     u710:
   582  0009E2                     
   583                           ;mainLCDtecl2.c: 88: {;mainLCDtecl2.c: 89: Lcd_Out(1, 0, "9");
   584  0009E2  0E00               	movlw	0
   585  0009E4  6E04               	movwf	Lcd_Out@x^0,c
   586  0009E6  0E19               	movlw	low STR_9
   587  0009E8  6E05               	movwf	Lcd_Out@buffer^0,c
   588  0009EA  0E08               	movlw	high STR_9
   589  0009EC  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   590  0009EE  0E01               	movlw	1
   591  0009F0  ECD9  F007         	call	_Lcd_Out
   592                           
   593                           ;mainLCDtecl2.c: 90: }
   594  0009F4  EF40  F004         	goto	l1354
   595  0009F8                     l1404:
   596                           
   597                           ;mainLCDtecl2.c: 91: else if (tecla == '0')
   598  0009F8  0E30               	movlw	48
   599  0009FA  180F               	xorwf	_tecla^0,w,c
   600  0009FC  A4D8               	btfss	status,2,c
   601  0009FE  EF03  F005         	goto	u721
   602  000A02  EF05  F005         	goto	u720
   603  000A06                     u721:
   604  000A06  EF10  F005         	goto	l1408
   605  000A0A                     u720:
   606  000A0A                     
   607                           ;mainLCDtecl2.c: 92: {;mainLCDtecl2.c: 93: Lcd_Out(1, 0, "0");
   608  000A0A  0E00               	movlw	0
   609  000A0C  6E04               	movwf	Lcd_Out@x^0,c
   610  000A0E  0E07               	movlw	low STR_10
   611  000A10  6E05               	movwf	Lcd_Out@buffer^0,c
   612  000A12  0E08               	movlw	high STR_10
   613  000A14  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   614  000A16  0E01               	movlw	1
   615  000A18  ECD9  F007         	call	_Lcd_Out
   616                           
   617                           ;mainLCDtecl2.c: 94: }
   618  000A1C  EF40  F004         	goto	l1354
   619  000A20                     l1408:
   620                           
   621                           ;mainLCDtecl2.c: 95: else if (tecla == 'x')
   622  000A20  0E78               	movlw	120
   623  000A22  180F               	xorwf	_tecla^0,w,c
   624  000A24  A4D8               	btfss	status,2,c
   625  000A26  EF17  F005         	goto	u731
   626  000A2A  EF19  F005         	goto	u730
   627  000A2E                     u731:
   628  000A2E  EF24  F005         	goto	l1412
   629  000A32                     u730:
   630  000A32                     
   631                           ;mainLCDtecl2.c: 96: {;mainLCDtecl2.c: 97: Lcd_Out(1, 0, "x");
   632  000A32  0E00               	movlw	0
   633  000A34  6E04               	movwf	Lcd_Out@x^0,c
   634  000A36  0E1B               	movlw	low STR_11
   635  000A38  6E05               	movwf	Lcd_Out@buffer^0,c
   636  000A3A  0E08               	movlw	high STR_11
   637  000A3C  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   638  000A3E  0E01               	movlw	1
   639  000A40  ECD9  F007         	call	_Lcd_Out
   640                           
   641                           ;mainLCDtecl2.c: 98: }
   642  000A44  EF40  F004         	goto	l1354
   643  000A48                     l1412:
   644                           
   645                           ;mainLCDtecl2.c: 99: else if (tecla == '-')
   646  000A48  0E2D               	movlw	45
   647  000A4A  180F               	xorwf	_tecla^0,w,c
   648  000A4C  A4D8               	btfss	status,2,c
   649  000A4E  EF2B  F005         	goto	u741
   650  000A52  EF2D  F005         	goto	u740
   651  000A56                     u741:
   652  000A56  EF38  F005         	goto	l156
   653  000A5A                     u740:
   654  000A5A                     
   655                           ;mainLCDtecl2.c: 100: {;mainLCDtecl2.c: 101: Lcd_Out(1, 0, "-");
   656  000A5A  0E00               	movlw	0
   657  000A5C  6E04               	movwf	Lcd_Out@x^0,c
   658  000A5E  0E05               	movlw	low STR_12
   659  000A60  6E05               	movwf	Lcd_Out@buffer^0,c
   660  000A62  0E08               	movlw	high STR_12
   661  000A64  6E06               	movwf	(Lcd_Out@buffer+1)^0,c
   662  000A66  0E01               	movlw	1
   663  000A68  ECD9  F007         	call	_Lcd_Out
   664  000A6C  EF40  F004         	goto	l1354
   665  000A70                     l156:
   666  000A70  EF40  F004         	goto	l1354
   667  000A74  EF00  F000         	goto	start
   668  000A78                     __end_of_main:
   669                           	callstack 0
   670                           
   671 ;; *************** function _tc_tecla *****************
   672 ;; Defined at:
   673 ;;		line 32 in file "teclado.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  timeout         2    5[COMRAM] unsigned int 
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  to              2    7[COMRAM] unsigned int 
   678 ;;  i               1   11[COMRAM] unsigned char 
   679 ;;  ret             1   10[COMRAM] unsigned char 
   680 ;;  tmp             1    9[COMRAM] unsigned char 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      unsigned char 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   690 ;;      Params:         2       0       0       0       0       0       0       0       0
   691 ;;      Locals:         5       0       0       0       0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0       0       0
   693 ;;      Totals:         7       0       0       0       0       0       0       0       0
   694 ;;Total ram usage:        7 bytes
   695 ;; Hardware stack levels used:    1
   696 ;; Hardware stack levels required when called:    1
   697 ;; This function calls:
   698 ;;		_atraso_ms
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text1
   705  000A78                     __ptext1:
   706                           	callstack 0
   707  000A78                     _tc_tecla:
   708                           	callstack 29
   709  000A78                     
   710                           ;teclado.c: 34: unsigned int to=0;
   711  000A78  0E00               	movlw	0
   712  000A7A  6E09               	movwf	(tc_tecla@to+1)^0,c
   713  000A7C  0E00               	movlw	0
   714  000A7E  6E08               	movwf	tc_tecla@to^0,c
   715                           
   716                           ;teclado.c: 35: unsigned char i;;teclado.c: 36: unsigned char ret=0;
   717  000A80  0E00               	movlw	0
   718  000A82  6E0B               	movwf	tc_tecla@ret^0,c
   719  000A84                     
   720                           ;teclado.c: 37: unsigned char tmp=PORTB;
   721  000A84  CF81 F00A          	movff	3969,tc_tecla@tmp	;volatile
   722                           
   723                           ;teclado.c: 40: while(((to < timeout)||(!timeout))&&(!ret))
   724  000A88  EFED  F005         	goto	l1302
   725  000A8C                     l1250:
   726                           
   727                           ;teclado.c: 41: {;teclado.c: 42: for(i=0;i<3;i++)
   728  000A8C  0E00               	movlw	0
   729  000A8E  6E0C               	movwf	tc_tecla@i^0,c
   730  000A90                     l1256:
   731                           
   732                           ;teclado.c: 43: {;teclado.c: 44: PORTB|=~linha[i];
   733  000A90  0E01               	movlw	low _linha
   734  000A92  240C               	addwf	tc_tecla@i^0,w,c
   735  000A94  6EF6               	movwf	tblptrl,c
   736  000A96  6AF7               	clrf	tblptrh,c
   737  000A98  0E08               	movlw	high _linha
   738  000A9A  22F7               	addwfc	tblptrh,f,c
   739  000A9C                     	if	0	;There are less than 3 active tblptr bytes
   740  000A9C                     	endif
   741  000A9C  0008               	tblrd		*
   742  000A9E  50F5               	movf	tablat,w,c
   743  000AA0  0AFF               	xorlw	255
   744  000AA2  1281               	iorwf	129,f,c	;volatile
   745  000AA4                     
   746                           ;teclado.c: 45: if(!PORTDbits.RD3){atraso_ms(20);if(!PORTDbits.RD3){while(!PORTDbits.RD3
      +                          );ret= 1+i;break;}};
   747  000AA4  B683               	btfsc	131,3,c	;volatile
   748  000AA6  EF57  F005         	goto	u441
   749  000AAA  EF59  F005         	goto	u440
   750  000AAE                     u441:
   751  000AAE  EF71  F005         	goto	l15
   752  000AB2                     u440:
   753  000AB2  0E00               	movlw	0
   754  000AB4  6E02               	movwf	(atraso_ms@valor+1)^0,c
   755  000AB6  0E14               	movlw	20
   756  000AB8  6E01               	movwf	atraso_ms@valor^0,c
   757  000ABA  EC21  F008         	call	_atraso_ms	;wreg free
   758  000ABE  B683               	btfsc	131,3,c	;volatile
   759  000AC0  EF64  F005         	goto	u451
   760  000AC4  EF66  F005         	goto	u450
   761  000AC8                     u451:
   762  000AC8  EF71  F005         	goto	l15
   763  000ACC                     u450:
   764  000ACC                     l17:
   765  000ACC  A683               	btfss	131,3,c	;volatile
   766  000ACE  EF6B  F005         	goto	u461
   767  000AD2  EF6D  F005         	goto	u460
   768  000AD6                     u461:
   769  000AD6  EF66  F005         	goto	l17
   770  000ADA                     u460:
   771  000ADA  280C               	incf	tc_tecla@i^0,w,c
   772  000ADC  6E0B               	movwf	tc_tecla@ret^0,c
   773  000ADE  EFE3  F005         	goto	l1298
   774  000AE2                     l15:
   775                           
   776                           ;teclado.c: 46: if(!PORTDbits.RD2){atraso_ms(20);if(!PORTDbits.RD2){while(!PORTDbits.RD2
      +                          );ret= 4+i;break;}};
   777  000AE2  B483               	btfsc	131,2,c	;volatile
   778  000AE4  EF76  F005         	goto	u471
   779  000AE8  EF78  F005         	goto	u470
   780  000AEC                     u471:
   781  000AEC  EF91  F005         	goto	l20
   782  000AF0                     u470:
   783  000AF0  0E00               	movlw	0
   784  000AF2  6E02               	movwf	(atraso_ms@valor+1)^0,c
   785  000AF4  0E14               	movlw	20
   786  000AF6  6E01               	movwf	atraso_ms@valor^0,c
   787  000AF8  EC21  F008         	call	_atraso_ms	;wreg free
   788  000AFC  B483               	btfsc	131,2,c	;volatile
   789  000AFE  EF83  F005         	goto	u481
   790  000B02  EF85  F005         	goto	u480
   791  000B06                     u481:
   792  000B06  EF91  F005         	goto	l20
   793  000B0A                     u480:
   794  000B0A                     l22:
   795  000B0A  A483               	btfss	131,2,c	;volatile
   796  000B0C  EF8A  F005         	goto	u491
   797  000B10  EF8C  F005         	goto	u490
   798  000B14                     u491:
   799  000B14  EF85  F005         	goto	l22
   800  000B18                     u490:
   801  000B18  500C               	movf	tc_tecla@i^0,w,c
   802  000B1A  0F04               	addlw	4
   803  000B1C  6E0B               	movwf	tc_tecla@ret^0,c
   804  000B1E  EFE3  F005         	goto	l1298
   805  000B22                     l20:
   806                           
   807                           ;teclado.c: 47: if(!PORTDbits.RD1){atraso_ms(20);if(!PORTDbits.RD1){while(!PORTDbits.RD1
      +                          );ret= 7+i;break;}};
   808  000B22  B283               	btfsc	131,1,c	;volatile
   809  000B24  EF96  F005         	goto	u501
   810  000B28  EF98  F005         	goto	u500
   811  000B2C                     u501:
   812  000B2C  EFB1  F005         	goto	l25
   813  000B30                     u500:
   814  000B30  0E00               	movlw	0
   815  000B32  6E02               	movwf	(atraso_ms@valor+1)^0,c
   816  000B34  0E14               	movlw	20
   817  000B36  6E01               	movwf	atraso_ms@valor^0,c
   818  000B38  EC21  F008         	call	_atraso_ms	;wreg free
   819  000B3C  B283               	btfsc	131,1,c	;volatile
   820  000B3E  EFA3  F005         	goto	u511
   821  000B42  EFA5  F005         	goto	u510
   822  000B46                     u511:
   823  000B46  EFB1  F005         	goto	l25
   824  000B4A                     u510:
   825  000B4A                     l27:
   826  000B4A  A283               	btfss	131,1,c	;volatile
   827  000B4C  EFAA  F005         	goto	u521
   828  000B50  EFAC  F005         	goto	u520
   829  000B54                     u521:
   830  000B54  EFA5  F005         	goto	l27
   831  000B58                     u520:
   832  000B58  500C               	movf	tc_tecla@i^0,w,c
   833  000B5A  0F07               	addlw	7
   834  000B5C  6E0B               	movwf	tc_tecla@ret^0,c
   835  000B5E  EFE3  F005         	goto	l1298
   836  000B62                     l25:
   837                           
   838                           ;teclado.c: 48: if(!PORTDbits.RD0){atraso_ms(20);if(!PORTDbits.RD0){while(!PORTDbits.RD0
      +                          );ret= 10+i;break;}};
   839  000B62  B083               	btfsc	131,0,c	;volatile
   840  000B64  EFB6  F005         	goto	u531
   841  000B68  EFB8  F005         	goto	u530
   842  000B6C                     u531:
   843  000B6C  EFD1  F005         	goto	l1292
   844  000B70                     u530:
   845  000B70  0E00               	movlw	0
   846  000B72  6E02               	movwf	(atraso_ms@valor+1)^0,c
   847  000B74  0E14               	movlw	20
   848  000B76  6E01               	movwf	atraso_ms@valor^0,c
   849  000B78  EC21  F008         	call	_atraso_ms	;wreg free
   850  000B7C  B083               	btfsc	131,0,c	;volatile
   851  000B7E  EFC3  F005         	goto	u541
   852  000B82  EFC5  F005         	goto	u540
   853  000B86                     u541:
   854  000B86  EFD1  F005         	goto	l1292
   855  000B8A                     u540:
   856  000B8A                     l32:
   857  000B8A  A083               	btfss	131,0,c	;volatile
   858  000B8C  EFCA  F005         	goto	u551
   859  000B90  EFCC  F005         	goto	u550
   860  000B94                     u551:
   861  000B94  EFC5  F005         	goto	l32
   862  000B98                     u550:
   863  000B98  500C               	movf	tc_tecla@i^0,w,c
   864  000B9A  0F0A               	addlw	10
   865  000B9C  6E0B               	movwf	tc_tecla@ret^0,c
   866  000B9E  EFE3  F005         	goto	l1298
   867  000BA2                     l1292:
   868                           
   869                           ;teclado.c: 49: PORTB &=linha[i];
   870  000BA2  0E01               	movlw	low _linha
   871  000BA4  240C               	addwf	tc_tecla@i^0,w,c
   872  000BA6  6EF6               	movwf	tblptrl,c
   873  000BA8  6AF7               	clrf	tblptrh,c
   874  000BAA  0E08               	movlw	high _linha
   875  000BAC  22F7               	addwfc	tblptrh,f,c
   876  000BAE                     	if	0	;There are less than 3 active tblptr bytes
   877  000BAE                     	endif
   878  000BAE  0008               	tblrd		*
   879  000BB0  50F5               	movf	tablat,w,c
   880  000BB2  1681               	andwf	129,f,c	;volatile
   881  000BB4  2A0C               	incf	tc_tecla@i^0,f,c
   882  000BB6  0E02               	movlw	2
   883  000BB8  640C               	cpfsgt	tc_tecla@i^0,c
   884  000BBA  EFE1  F005         	goto	u561
   885  000BBE  EFE3  F005         	goto	u560
   886  000BC2                     u561:
   887  000BC2  EF48  F005         	goto	l1256
   888  000BC6                     u560:
   889  000BC6                     l1298:
   890                           
   891                           ;teclado.c: 50: };;teclado.c: 51: atraso_ms(5);
   892  000BC6  0E00               	movlw	0
   893  000BC8  6E02               	movwf	(atraso_ms@valor+1)^0,c
   894  000BCA  0E05               	movlw	5
   895  000BCC  6E01               	movwf	atraso_ms@valor^0,c
   896  000BCE  EC21  F008         	call	_atraso_ms	;wreg free
   897  000BD2                     
   898                           ;teclado.c: 52: to+=5;
   899  000BD2  0E05               	movlw	5
   900  000BD4  2608               	addwf	tc_tecla@to^0,f,c
   901  000BD6  0E00               	movlw	0
   902  000BD8  2209               	addwfc	(tc_tecla@to+1)^0,f,c
   903  000BDA                     l1302:
   904  000BDA  5006               	movf	tc_tecla@timeout^0,w,c
   905  000BDC  5C08               	subwf	tc_tecla@to^0,w,c
   906  000BDE  5007               	movf	(tc_tecla@timeout+1)^0,w,c
   907  000BE0  5809               	subwfb	(tc_tecla@to+1)^0,w,c
   908  000BE2  A0D8               	btfss	status,0,c
   909  000BE4  EFF6  F005         	goto	u571
   910  000BE8  EFF8  F005         	goto	u570
   911  000BEC                     u571:
   912  000BEC  EF01  F006         	goto	l1306
   913  000BF0                     u570:
   914  000BF0  5006               	movf	tc_tecla@timeout^0,w,c
   915  000BF2  1007               	iorwf	(tc_tecla@timeout+1)^0,w,c
   916  000BF4  A4D8               	btfss	status,2,c
   917  000BF6  EFFF  F005         	goto	u581
   918  000BFA  EF01  F006         	goto	u580
   919  000BFE                     u581:
   920  000BFE  EF09  F006         	goto	l1308
   921  000C02                     u580:
   922  000C02                     l1306:
   923  000C02  500B               	movf	tc_tecla@ret^0,w,c
   924  000C04  B4D8               	btfsc	status,2,c
   925  000C06  EF07  F006         	goto	u591
   926  000C0A  EF09  F006         	goto	u590
   927  000C0E                     u591:
   928  000C0E  EF46  F005         	goto	l1250
   929  000C12                     u590:
   930  000C12                     l1308:
   931                           
   932                           ;teclado.c: 53: };teclado.c: 55: if(!ret)ret=255;
   933  000C12  500B               	movf	tc_tecla@ret^0,w,c
   934  000C14  A4D8               	btfss	status,2,c
   935  000C16  EF0F  F006         	goto	u601
   936  000C1A  EF11  F006         	goto	u600
   937  000C1E                     u601:
   938  000C1E  EF12  F006         	goto	l1312
   939  000C22                     u600:
   940  000C22  680B               	setf	tc_tecla@ret^0,c
   941  000C24                     l1312:
   942                           
   943                           ;teclado.c: 56: if(ret == 11)ret=0;
   944  000C24  0E0B               	movlw	11
   945  000C26  180B               	xorwf	tc_tecla@ret^0,w,c
   946  000C28  A4D8               	btfss	status,2,c
   947  000C2A  EF19  F006         	goto	u611
   948  000C2E  EF1B  F006         	goto	u610
   949  000C32                     u611:
   950  000C32  EF1D  F006         	goto	l1316
   951  000C36                     u610:
   952  000C36  0E00               	movlw	0
   953  000C38  6E0B               	movwf	tc_tecla@ret^0,c
   954  000C3A                     l1316:
   955                           
   956                           ;teclado.c: 57: PORTB=tmp;
   957  000C3A  C00A  FF81         	movff	tc_tecla@tmp,3969	;volatile
   958                           
   959                           ;teclado.c: 58: return ret;
   960  000C3E  500B               	movf	tc_tecla@ret^0,w,c
   961  000C40  0012               	return		;funcret
   962  000C42                     __end_of_tc_tecla:
   963                           	callstack 0
   964                           
   965 ;; *************** function _atraso_ms *****************
   966 ;; Defined at:
   967 ;;		line 26 in file "atraso.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  valor           2    0[COMRAM] unsigned int 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  i               2    2[COMRAM] unsigned int 
   972 ;;  j               1    4[COMRAM] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, status,2, status,0
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   982 ;;      Params:         2       0       0       0       0       0       0       0       0
   983 ;;      Locals:         3       0       0       0       0       0       0       0       0
   984 ;;      Temps:          0       0       0       0       0       0       0       0       0
   985 ;;      Totals:         5       0       0       0       0       0       0       0       0
   986 ;;Total ram usage:        5 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_tc_tecla
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text2
   996  001042                     __ptext2:
   997                           	callstack 0
   998  001042                     _atraso_ms:
   999                           	callstack 29
  1000  001042                     
  1001                           ;atraso.c: 28: unsigned int i;;atraso.c: 29: unsigned char j;;atraso.c: 31: for (i =0; i
      +                          < valor; i++)
  1002  001042  0E00               	movlw	0
  1003  001044  6E04               	movwf	(atraso_ms@i+1)^0,c
  1004  001046  0E00               	movlw	0
  1005  001048  6E03               	movwf	atraso_ms@i^0,c
  1006  00104A  EF39  F008         	goto	l1244
  1007  00104E                     l1232:
  1008                           
  1009                           ;atraso.c: 32: {;atraso.c: 34: for (j =0 ; j < 200; j++)
  1010  00104E  0E00               	movlw	0
  1011  001050  6E05               	movwf	atraso_ms@j^0,c
  1012  001052                     l169:
  1013  001052  F000               	nop		;# 
  1014  001054  F000               	nop		;# 
  1015  001056  F000               	nop		;# 
  1016  001058  F000               	nop		;# 
  1017  00105A  F000               	nop		;# 
  1018  00105C  2A05               	incf	atraso_ms@j^0,f,c
  1019  00105E  0EC7               	movlw	199
  1020  001060  6405               	cpfsgt	atraso_ms@j^0,c
  1021  001062  EF35  F008         	goto	u421
  1022  001066  EF37  F008         	goto	u420
  1023  00106A                     u421:
  1024  00106A  EF29  F008         	goto	l169
  1025  00106E                     u420:
  1026  00106E  4A03               	infsnz	atraso_ms@i^0,f,c
  1027  001070  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1028  001072                     l1244:
  1029  001072  5001               	movf	atraso_ms@valor^0,w,c
  1030  001074  5C03               	subwf	atraso_ms@i^0,w,c
  1031  001076  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1032  001078  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1033  00107A  A0D8               	btfss	status,0,c
  1034  00107C  EF42  F008         	goto	u431
  1035  001080  EF44  F008         	goto	u430
  1036  001084                     u431:
  1037  001084  EF27  F008         	goto	l1232
  1038  001088                     u430:
  1039  001088  0012               	return		;funcret
  1040  00108A                     __end_of_atraso_ms:
  1041                           	callstack 0
  1042                           
  1043 ;; *************** function _Lcd_Out *****************
  1044 ;; Defined at:
  1045 ;;		line 95 in file "flexlcd.h"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  y               1    wreg     unsigned char 
  1048 ;;  x               1    3[COMRAM] unsigned char 
  1049 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  1050 ;;		 -> STR_12(2), STR_11(2), STR_10(2), STR_9(2), 
  1051 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(2), 
  1052 ;;		 -> STR_4(2), STR_3(2), STR_2(2), STR_1(2), 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  y               1    6[COMRAM] unsigned char 
  1055 ;;  data            1    7[COMRAM] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1065 ;;      Params:         3       0       0       0       0       0       0       0       0
  1066 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1068 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1069 ;;Total ram usage:        5 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    1
  1072 ;; This function calls:
  1073 ;;		_Lcd_Chr_CP
  1074 ;;		_Lcd_Cmd
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text3
  1081  000FB2                     __ptext3:
  1082                           	callstack 0
  1083  000FB2                     _Lcd_Out:
  1084                           	callstack 29
  1085                           
  1086                           ;incstack = 0
  1087                           ;Lcd_Out@y stored from wreg
  1088  000FB2  6E07               	movwf	Lcd_Out@y^0,c
  1089  000FB4                     
  1090                           ;flexlcd.h: 97: unsigned char data;;flexlcd.h: 98: switch (y)
  1091  000FB4  EFF0  F007         	goto	l1332
  1092  000FB8                     l1322:
  1093  000FB8  5004               	movf	Lcd_Out@x^0,w,c
  1094  000FBA  0F80               	addlw	128
  1095  000FBC  6E08               	movwf	Lcd_Out@data^0,c
  1096  000FBE  EF03  F008         	goto	l1334
  1097  000FC2                     l1324:
  1098  000FC2  5004               	movf	Lcd_Out@x^0,w,c
  1099  000FC4  0FC0               	addlw	192
  1100  000FC6  6E08               	movwf	Lcd_Out@data^0,c
  1101  000FC8  EF03  F008         	goto	l1334
  1102  000FCC                     l1326:
  1103  000FCC  5004               	movf	Lcd_Out@x^0,w,c
  1104  000FCE  0F94               	addlw	148
  1105  000FD0  6E08               	movwf	Lcd_Out@data^0,c
  1106  000FD2  EF03  F008         	goto	l1334
  1107  000FD6                     l1328:
  1108  000FD6  5004               	movf	Lcd_Out@x^0,w,c
  1109  000FD8  0FD4               	addlw	212
  1110  000FDA  6E08               	movwf	Lcd_Out@data^0,c
  1111  000FDC  EF03  F008         	goto	l1334
  1112  000FE0                     l1332:
  1113  000FE0  5007               	movf	Lcd_Out@y^0,w,c
  1114                           
  1115                           ; Switch size 1, requested type "simple"
  1116                           ; Number of cases is 4, Range of values is 1 to 4
  1117                           ; switch strategies available:
  1118                           ; Name         Instructions Cycles
  1119                           ; simple_byte           13     7 (average)
  1120                           ;	Chosen strategy is simple_byte
  1121  000FE2  0A01               	xorlw	1	; case 1
  1122  000FE4  B4D8               	btfsc	status,2,c
  1123  000FE6  EFDC  F007         	goto	l1322
  1124  000FEA  0A03               	xorlw	3	; case 2
  1125  000FEC  B4D8               	btfsc	status,2,c
  1126  000FEE  EFE1  F007         	goto	l1324
  1127  000FF2  0A01               	xorlw	1	; case 3
  1128  000FF4  B4D8               	btfsc	status,2,c
  1129  000FF6  EFE6  F007         	goto	l1326
  1130  000FFA  0A07               	xorlw	7	; case 4
  1131  000FFC  B4D8               	btfsc	status,2,c
  1132  000FFE  EFEB  F007         	goto	l1328
  1133  001002  EF03  F008         	goto	l1334
  1134  001006                     l1334:
  1135                           
  1136                           ;flexlcd.h: 106: Lcd_Cmd(data);
  1137  001006  5008               	movf	Lcd_Out@data^0,w,c
  1138  001008  ECBB  F006         	call	_Lcd_Cmd
  1139                           
  1140                           ;flexlcd.h: 107: while(*buffer)
  1141  00100C  EF12  F008         	goto	l1340
  1142  001010                     l1336:
  1143                           
  1144                           ;flexlcd.h: 108: {;flexlcd.h: 109: Lcd_Chr_CP(*buffer);
  1145  001010  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1146  001014  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1147  001018                     	if	0	;tblptru may be non-zero
  1148  001018                     	endif
  1149  001018                     	if	0	;tblptru may be non-zero
  1150  001018                     	endif
  1151  001018  0008               	tblrd		*
  1152  00101A  50F5               	movf	tablat,w,c
  1153  00101C  EC21  F006         	call	_Lcd_Chr_CP
  1154  001020                     
  1155                           ;flexlcd.h: 110: buffer++;
  1156  001020  4A05               	infsnz	Lcd_Out@buffer^0,f,c
  1157  001022  2A06               	incf	(Lcd_Out@buffer+1)^0,f,c
  1158  001024                     l1340:
  1159  001024  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  1160  001028  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  1161  00102C                     	if	0	;tblptru may be non-zero
  1162  00102C                     	endif
  1163  00102C                     	if	0	;tblptru may be non-zero
  1164  00102C                     	endif
  1165  00102C  0008               	tblrd		*
  1166  00102E  50F5               	movf	tablat,w,c
  1167  001030  0900               	iorlw	0
  1168  001032  A4D8               	btfss	status,2,c
  1169  001034  EF1E  F008         	goto	u621
  1170  001038  EF20  F008         	goto	u620
  1171  00103C                     u621:
  1172  00103C  EF08  F008         	goto	l1336
  1173  001040                     u620:
  1174  001040  0012               	return		;funcret
  1175  001042                     __end_of_Lcd_Out:
  1176                           	callstack 0
  1177                           
  1178 ;; *************** function _Lcd_Chr_CP *****************
  1179 ;; Defined at:
  1180 ;;		line 137 in file "flexlcd.h"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  data            1    wreg     unsigned char 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  data            1    2[COMRAM] unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1194 ;;      Params:         0       0       0       0       0       0       0       0       0
  1195 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1196 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1197 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1198 ;;Total ram usage:        3 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_Lcd_Out
  1204 ;;		_Lcd_Out2
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text4
  1209  000C42                     __ptext4:
  1210                           	callstack 0
  1211  000C42                     _Lcd_Chr_CP:
  1212                           	callstack 29
  1213                           
  1214                           ;incstack = 0
  1215                           ;Lcd_Chr_CP@data stored from wreg
  1216  000C42  6E03               	movwf	Lcd_Chr_CP@data^0,c
  1217  000C44                     
  1218                           ;flexlcd.h: 138: PORTEbits.RE1 = 0; PORTEbits.RE2 = 1;
  1219  000C44  9284               	bcf	132,1,c	;volatile
  1220  000C46  8484               	bsf	132,2,c	;volatile
  1221  000C48                     
  1222                           ;flexlcd.h: 139: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  1223  000C48  6A01               	clrf	??_Lcd_Chr_CP^0,c
  1224  000C4A  AE03               	btfss	Lcd_Chr_CP@data^0,7,c
  1225  000C4C  D001               	bra	u65
  1226  000C4E  2A01               	incf	??_Lcd_Chr_CP^0,f,c
  1227  000C50                     u65:
  1228  000C50  0E01               	movlw	1
  1229  000C52  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1230  000C54  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1231  000C56  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1232  000C58  5083               	movf	131,w,c	;volatile
  1233  000C5A  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1234  000C5C  0B7F               	andlw	-129
  1235  000C5E  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1236  000C60  6E83               	movwf	131,c	;volatile
  1237  000C62  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1238  000C66  0E06               	movlw	6
  1239  000C68  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  1240  000C6A                     u75:
  1241  000C6A  90D8               	bcf	status,0,c
  1242  000C6C  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1243  000C6E  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  1244  000C70  EF35  F006         	goto	u75
  1245  000C74  0E01               	movlw	1
  1246  000C76  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1247  000C78  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1248  000C7A  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1249  000C7C  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1250  000C7E  5083               	movf	131,w,c	;volatile
  1251  000C80  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1252  000C82  0BBF               	andlw	-65
  1253  000C84  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1254  000C86  6E83               	movwf	131,c	;volatile
  1255                           
  1256                           ;flexlcd.h: 140: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  1257  000C88  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1258  000C8C  0E05               	movlw	5
  1259  000C8E  6E02               	movwf	(??_Lcd_Chr_CP+1)^0,c
  1260  000C90                     u85:
  1261  000C90  90D8               	bcf	status,0,c
  1262  000C92  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1263  000C94  2E02               	decfsz	(??_Lcd_Chr_CP+1)^0,f,c
  1264  000C96  EF48  F006         	goto	u85
  1265  000C9A  0E01               	movlw	1
  1266  000C9C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1267  000C9E  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1268  000CA0  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1269  000CA2  5083               	movf	131,w,c	;volatile
  1270  000CA4  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1271  000CA6  0BDF               	andlw	-33
  1272  000CA8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1273  000CAA  6E83               	movwf	131,c	;volatile
  1274  000CAC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1275  000CB0  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1276  000CB2  0E0F               	movlw	15
  1277  000CB4  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1278  000CB6  0E01               	movlw	1
  1279  000CB8  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1280  000CBA  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1281  000CBC  5083               	movf	131,w,c	;volatile
  1282  000CBE  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1283  000CC0  0BEF               	andlw	-17
  1284  000CC2  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1285  000CC4  6E83               	movwf	131,c	;volatile
  1286  000CC6                     
  1287                           ;flexlcd.h: 141: _delay(10);
  1288  000CC6  0E03               	movlw	3
  1289  000CC8                     u767:
  1290  000CC8  2EE8               	decfsz	wreg,f,c
  1291  000CCA  D7FE               	bra	u767
  1292  000CCC  F000               	nop	
  1293  000CCE                     
  1294                           ;flexlcd.h: 142: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1295  000CCE  8284               	bsf	132,1,c	;volatile
  1296  000CD0  0E03               	movlw	3
  1297  000CD2                     u777:
  1298  000CD2  2EE8               	decfsz	wreg,f,c
  1299  000CD4  D7FE               	bra	u777
  1300  000CD6  F000               	nop	
  1301  000CD8  9284               	bcf	132,1,c	;volatile
  1302                           
  1303                           ;flexlcd.h: 143: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  1304  000CDA  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1305  000CDE  90D8               	bcf	status,0,c
  1306  000CE0  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1307  000CE2  90D8               	bcf	status,0,c
  1308  000CE4  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1309  000CE6  90D8               	bcf	status,0,c
  1310  000CE8  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1311  000CEA  0E01               	movlw	1
  1312  000CEC  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1313  000CEE  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1314  000CF0  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1315  000CF2  5083               	movf	131,w,c	;volatile
  1316  000CF4  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1317  000CF6  0B7F               	andlw	-129
  1318  000CF8  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1319  000CFA  6E83               	movwf	131,c	;volatile
  1320  000CFC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1321  000D00  90D8               	bcf	status,0,c
  1322  000D02  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1323  000D04  90D8               	bcf	status,0,c
  1324  000D06  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1325  000D08  0E01               	movlw	1
  1326  000D0A  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1327  000D0C  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1328  000D0E  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1329  000D10  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1330  000D12  5083               	movf	131,w,c	;volatile
  1331  000D14  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1332  000D16  0BBF               	andlw	-65
  1333  000D18  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1334  000D1A  6E83               	movwf	131,c	;volatile
  1335                           
  1336                           ;flexlcd.h: 144: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  1337  000D1C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1338  000D20  90D8               	bcf	status,0,c
  1339  000D22  3201               	rrcf	??_Lcd_Chr_CP^0,f,c
  1340  000D24  0E01               	movlw	1
  1341  000D26  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1342  000D28  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1343  000D2A  4601               	rlncf	??_Lcd_Chr_CP^0,f,c
  1344  000D2C  5083               	movf	131,w,c	;volatile
  1345  000D2E  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1346  000D30  0BDF               	andlw	-33
  1347  000D32  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1348  000D34  6E83               	movwf	131,c	;volatile
  1349  000D36  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  1350  000D3A  0E01               	movlw	1
  1351  000D3C  1601               	andwf	??_Lcd_Chr_CP^0,f,c
  1352  000D3E  3A01               	swapf	??_Lcd_Chr_CP^0,f,c
  1353  000D40  5083               	movf	131,w,c	;volatile
  1354  000D42  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1355  000D44  0BEF               	andlw	-17
  1356  000D46  1801               	xorwf	??_Lcd_Chr_CP^0,w,c
  1357  000D48  6E83               	movwf	131,c	;volatile
  1358  000D4A                     
  1359                           ;flexlcd.h: 145: _delay(10);
  1360  000D4A  0E03               	movlw	3
  1361  000D4C                     u787:
  1362  000D4C  2EE8               	decfsz	wreg,f,c
  1363  000D4E  D7FE               	bra	u787
  1364  000D50  F000               	nop	
  1365  000D52                     
  1366                           ;flexlcd.h: 146: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1367  000D52  8284               	bsf	132,1,c	;volatile
  1368  000D54  0E03               	movlw	3
  1369  000D56                     u797:
  1370  000D56  2EE8               	decfsz	wreg,f,c
  1371  000D58  D7FE               	bra	u797
  1372  000D5A  F000               	nop	
  1373  000D5C  9284               	bcf	132,1,c	;volatile
  1374  000D5E                     
  1375                           ;flexlcd.h: 147: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long
      +                          )((5500)*(8000000/4000000.0)));
  1376  000D5E  0E03               	movlw	3
  1377  000D60                     u807:
  1378  000D60  2EE8               	decfsz	wreg,f,c
  1379  000D62  D7FE               	bra	u807
  1380  000D64  F000               	nop	
  1381  000D66  0E0F               	movlw	15
  1382  000D68  6E01               	movwf	??_Lcd_Chr_CP^0,c
  1383  000D6A  0E48               	movlw	72
  1384  000D6C                     u817:
  1385  000D6C  2EE8               	decfsz	wreg,f,c
  1386  000D6E  D7FE               	bra	u817
  1387  000D70  2E01               	decfsz	??_Lcd_Chr_CP^0,f,c
  1388  000D72  D7FC               	bra	u817
  1389  000D74  0012               	return		;funcret
  1390  000D76                     __end_of_Lcd_Chr_CP:
  1391                           	callstack 0
  1392                           
  1393 ;; *************** function _Lcd_Init *****************
  1394 ;; Defined at:
  1395 ;;		line 53 in file "flexlcd.h"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  data            1    4[COMRAM] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0
  1410 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1411 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1412 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1413 ;;Total ram usage:        2 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    1
  1416 ;; This function calls:
  1417 ;;		_Lcd_Cmd
  1418 ;; This function is called by:
  1419 ;;		_main
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text5
  1424  000EA2                     __ptext5:
  1425                           	callstack 0
  1426  000EA2                     _Lcd_Init:
  1427                           	callstack 29
  1428  000EA2                     
  1429                           ;flexlcd.h: 54: unsigned char data;;flexlcd.h: 55: TRISDbits.TRISD7 = 0;
  1430  000EA2  9E95               	bcf	149,7,c	;volatile
  1431                           
  1432                           ;flexlcd.h: 56: TRISDbits.TRISD6 = 0;
  1433  000EA4  9C95               	bcf	149,6,c	;volatile
  1434                           
  1435                           ;flexlcd.h: 57: TRISDbits.TRISD5 = 0;
  1436  000EA6  9A95               	bcf	149,5,c	;volatile
  1437                           
  1438                           ;flexlcd.h: 58: TRISDbits.TRISD4 = 0;
  1439  000EA8  9895               	bcf	149,4,c	;volatile
  1440                           
  1441                           ;flexlcd.h: 59: TRISEbits.TRISE2 = 0;
  1442  000EAA  9496               	bcf	150,2,c	;volatile
  1443                           
  1444                           ;flexlcd.h: 60: TRISEbits.TRISE1 = 0;
  1445  000EAC  9296               	bcf	150,1,c	;volatile
  1446                           
  1447                           ;flexlcd.h: 61: PORTDbits.RD7 = 0;
  1448  000EAE  9E83               	bcf	131,7,c	;volatile
  1449                           
  1450                           ;flexlcd.h: 62: PORTDbits.RD6 = 0;
  1451  000EB0  9C83               	bcf	131,6,c	;volatile
  1452                           
  1453                           ;flexlcd.h: 63: PORTDbits.RD5 = 0;
  1454  000EB2  9A83               	bcf	131,5,c	;volatile
  1455                           
  1456                           ;flexlcd.h: 64: PORTDbits.RD4 = 0;
  1457  000EB4  9883               	bcf	131,4,c	;volatile
  1458                           
  1459                           ;flexlcd.h: 65: PORTEbits.RE1 = 0;
  1460  000EB6  9284               	bcf	132,1,c	;volatile
  1461                           
  1462                           ;flexlcd.h: 66: PORTEbits.RE2 = 0;
  1463  000EB8  9484               	bcf	132,2,c	;volatile
  1464  000EBA                     
  1465                           ;flexlcd.h: 67: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1466  000EBA  0E0F               	movlw	15
  1467  000EBC  6E04               	movwf	??_Lcd_Init^0,c
  1468  000EBE  0E48               	movlw	72
  1469  000EC0                     u827:
  1470  000EC0  2EE8               	decfsz	wreg,f,c
  1471  000EC2  D7FE               	bra	u827
  1472  000EC4  2E04               	decfsz	??_Lcd_Init^0,f,c
  1473  000EC6  D7FC               	bra	u827
  1474                           
  1475                           ;flexlcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1476  000EC8  0E0F               	movlw	15
  1477  000ECA  6E04               	movwf	??_Lcd_Init^0,c
  1478  000ECC  0E48               	movlw	72
  1479  000ECE                     u837:
  1480  000ECE  2EE8               	decfsz	wreg,f,c
  1481  000ED0  D7FE               	bra	u837
  1482  000ED2  2E04               	decfsz	??_Lcd_Init^0,f,c
  1483  000ED4  D7FC               	bra	u837
  1484                           
  1485                           ;flexlcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1486  000ED6  0E0F               	movlw	15
  1487  000ED8  6E04               	movwf	??_Lcd_Init^0,c
  1488  000EDA  0E48               	movlw	72
  1489  000EDC                     u847:
  1490  000EDC  2EE8               	decfsz	wreg,f,c
  1491  000EDE  D7FE               	bra	u847
  1492  000EE0  2E04               	decfsz	??_Lcd_Init^0,f,c
  1493  000EE2  D7FC               	bra	u847
  1494                           
  1495                           ;flexlcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1496  000EE4  0E0F               	movlw	15
  1497  000EE6  6E04               	movwf	??_Lcd_Init^0,c
  1498  000EE8  0E48               	movlw	72
  1499  000EEA                     u857:
  1500  000EEA  2EE8               	decfsz	wreg,f,c
  1501  000EEC  D7FE               	bra	u857
  1502  000EEE  2E04               	decfsz	??_Lcd_Init^0,f,c
  1503  000EF0  D7FC               	bra	u857
  1504                           
  1505                           ;flexlcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1506  000EF2  0E0F               	movlw	15
  1507  000EF4  6E04               	movwf	??_Lcd_Init^0,c
  1508  000EF6  0E48               	movlw	72
  1509  000EF8                     u867:
  1510  000EF8  2EE8               	decfsz	wreg,f,c
  1511  000EFA  D7FE               	bra	u867
  1512  000EFC  2E04               	decfsz	??_Lcd_Init^0,f,c
  1513  000EFE  D7FC               	bra	u867
  1514                           
  1515                           ;flexlcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1516  000F00  0E0F               	movlw	15
  1517  000F02  6E04               	movwf	??_Lcd_Init^0,c
  1518  000F04  0E48               	movlw	72
  1519  000F06                     u877:
  1520  000F06  2EE8               	decfsz	wreg,f,c
  1521  000F08  D7FE               	bra	u877
  1522  000F0A  2E04               	decfsz	??_Lcd_Init^0,f,c
  1523  000F0C  D7FC               	bra	u877
  1524  000F0E                     
  1525                           ;flexlcd.h: 73: for(data = 1; data < 4; data ++)
  1526  000F0E  0E01               	movlw	1
  1527  000F10  6E05               	movwf	Lcd_Init@data^0,c
  1528  000F12                     l95:
  1529                           
  1530                           ;flexlcd.h: 74: {;flexlcd.h: 75: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 1; PORTEbits.RE1 = 0;
  1531  000F12  9E83               	bcf	131,7,c	;volatile
  1532  000F14  9C83               	bcf	131,6,c	;volatile
  1533  000F16  8A83               	bsf	131,5,c	;volatile
  1534  000F18  8883               	bsf	131,4,c	;volatile
  1535  000F1A  9284               	bcf	132,1,c	;volatile
  1536                           
  1537                           ;flexlcd.h: 76: PORTEbits.RE2 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 =
      +                           1; PORTDbits.RD4 = 1;
  1538  000F1C  9484               	bcf	132,2,c	;volatile
  1539  000F1E  9E83               	bcf	131,7,c	;volatile
  1540  000F20  9C83               	bcf	131,6,c	;volatile
  1541  000F22  8A83               	bsf	131,5,c	;volatile
  1542  000F24  8883               	bsf	131,4,c	;volatile
  1543                           
  1544                           ;flexlcd.h: 77: PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  1545  000F26  8284               	bsf	132,1,c	;volatile
  1546  000F28  9484               	bcf	132,2,c	;volatile
  1547  000F2A                     
  1548                           ;flexlcd.h: 78: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1549  000F2A  0E03               	movlw	3
  1550  000F2C                     u887:
  1551  000F2C  2EE8               	decfsz	wreg,f,c
  1552  000F2E  D7FE               	bra	u887
  1553  000F30  F000               	nop	
  1554  000F32                     
  1555                           ;flexlcd.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           1; PORTEbits.RE1 = 0;
  1556  000F32  9E83               	bcf	131,7,c	;volatile
  1557  000F34  9C83               	bcf	131,6,c	;volatile
  1558  000F36  8A83               	bsf	131,5,c	;volatile
  1559  000F38  8883               	bsf	131,4,c	;volatile
  1560  000F3A  9284               	bcf	132,1,c	;volatile
  1561  000F3C                     
  1562                           ;flexlcd.h: 80: PORTEbits.RE2 = 0;
  1563  000F3C  9484               	bcf	132,2,c	;volatile
  1564                           
  1565                           ;flexlcd.h: 81: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1566  000F3E  0E0F               	movlw	15
  1567  000F40  6E04               	movwf	??_Lcd_Init^0,c
  1568  000F42  0E48               	movlw	72
  1569  000F44                     u897:
  1570  000F44  2EE8               	decfsz	wreg,f,c
  1571  000F46  D7FE               	bra	u897
  1572  000F48  2E04               	decfsz	??_Lcd_Init^0,f,c
  1573  000F4A  D7FC               	bra	u897
  1574  000F4C  2A05               	incf	Lcd_Init@data^0,f,c
  1575  000F4E  0E03               	movlw	3
  1576  000F50  6405               	cpfsgt	Lcd_Init@data^0,c
  1577  000F52  EFAD  F007         	goto	u271
  1578  000F56  EFAF  F007         	goto	u270
  1579  000F5A                     u271:
  1580  000F5A  EF89  F007         	goto	l95
  1581  000F5E                     u270:
  1582  000F5E                     
  1583                           ;flexlcd.h: 82: };flexlcd.h: 83: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1
      +                          ; PORTDbits.RD4 = 0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  1584  000F5E  9E83               	bcf	131,7,c	;volatile
  1585  000F60  9C83               	bcf	131,6,c	;volatile
  1586  000F62  8A83               	bsf	131,5,c	;volatile
  1587  000F64  9883               	bcf	131,4,c	;volatile
  1588  000F66  9284               	bcf	132,1,c	;volatile
  1589  000F68  9484               	bcf	132,2,c	;volatile
  1590                           
  1591                           ;flexlcd.h: 84: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 1; PORTEbits.RE2 = 0;
  1592  000F6A  9E83               	bcf	131,7,c	;volatile
  1593  000F6C  9C83               	bcf	131,6,c	;volatile
  1594  000F6E  8A83               	bsf	131,5,c	;volatile
  1595  000F70  9883               	bcf	131,4,c	;volatile
  1596  000F72  8284               	bsf	132,1,c	;volatile
  1597  000F74  9484               	bcf	132,2,c	;volatile
  1598  000F76                     
  1599                           ;flexlcd.h: 85: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1600  000F76  0E03               	movlw	3
  1601  000F78                     u907:
  1602  000F78  2EE8               	decfsz	wreg,f,c
  1603  000F7A  D7FE               	bra	u907
  1604  000F7C  F000               	nop	
  1605  000F7E                     
  1606                           ;flexlcd.h: 86: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 =
      +                           0; PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  1607  000F7E  9E83               	bcf	131,7,c	;volatile
  1608  000F80  9C83               	bcf	131,6,c	;volatile
  1609  000F82  8A83               	bsf	131,5,c	;volatile
  1610  000F84  9883               	bcf	131,4,c	;volatile
  1611  000F86  9284               	bcf	132,1,c	;volatile
  1612  000F88  9484               	bcf	132,2,c	;volatile
  1613                           
  1614                           ;flexlcd.h: 87: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1615  000F8A  0E0F               	movlw	15
  1616  000F8C  6E04               	movwf	??_Lcd_Init^0,c
  1617  000F8E  0E48               	movlw	72
  1618  000F90                     u917:
  1619  000F90  2EE8               	decfsz	wreg,f,c
  1620  000F92  D7FE               	bra	u917
  1621  000F94  2E04               	decfsz	??_Lcd_Init^0,f,c
  1622  000F96  D7FC               	bra	u917
  1623  000F98  0E28               	movlw	40
  1624  000F9A  ECBB  F006         	call	_Lcd_Cmd
  1625  000F9E  0E10               	movlw	16
  1626  000FA0  ECBB  F006         	call	_Lcd_Cmd
  1627  000FA4  0E01               	movlw	1
  1628  000FA6  ECBB  F006         	call	_Lcd_Cmd
  1629  000FAA  0E0F               	movlw	15
  1630  000FAC  ECBB  F006         	call	_Lcd_Cmd
  1631  000FB0  0012               	return		;funcret
  1632  000FB2                     __end_of_Lcd_Init:
  1633                           	callstack 0
  1634                           
  1635 ;; *************** function _Lcd_Cmd *****************
  1636 ;; Defined at:
  1637 ;;		line 151 in file "flexlcd.h"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  data            1    wreg     unsigned char 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;  data            1    2[COMRAM] unsigned char 
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0
  1652 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1653 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1654 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1655 ;;Total ram usage:        3 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_Lcd_Init
  1661 ;;		_Lcd_Out
  1662 ;;		_main
  1663 ;;		_Lcd_Out2
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text6
  1668  000D76                     __ptext6:
  1669                           	callstack 0
  1670  000D76                     _Lcd_Cmd:
  1671                           	callstack 29
  1672                           
  1673                           ;incstack = 0
  1674                           ;Lcd_Cmd@data stored from wreg
  1675  000D76  6E03               	movwf	Lcd_Cmd@data^0,c
  1676  000D78                     
  1677                           ;flexlcd.h: 152: PORTEbits.RE1 = 0; PORTEbits.RE2 = 0;
  1678  000D78  9284               	bcf	132,1,c	;volatile
  1679  000D7A  9484               	bcf	132,2,c	;volatile
  1680  000D7C                     
  1681                           ;flexlcd.h: 153: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000
      +                          000)>>6;
  1682  000D7C  6A01               	clrf	??_Lcd_Cmd^0,c
  1683  000D7E  AE03               	btfss	Lcd_Cmd@data^0,7,c
  1684  000D80  D001               	bra	u35
  1685  000D82  2A01               	incf	??_Lcd_Cmd^0,f,c
  1686  000D84                     u35:
  1687  000D84  0E01               	movlw	1
  1688  000D86  1601               	andwf	??_Lcd_Cmd^0,f,c
  1689  000D88  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1690  000D8A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1691  000D8C  5083               	movf	131,w,c	;volatile
  1692  000D8E  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1693  000D90  0B7F               	andlw	-129
  1694  000D92  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1695  000D94  6E83               	movwf	131,c	;volatile
  1696  000D96  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1697  000D9A  0E06               	movlw	6
  1698  000D9C  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  1699  000D9E                     u45:
  1700  000D9E  90D8               	bcf	status,0,c
  1701  000DA0  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1702  000DA2  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1703  000DA4  EFCF  F006         	goto	u45
  1704  000DA8  0E01               	movlw	1
  1705  000DAA  1601               	andwf	??_Lcd_Cmd^0,f,c
  1706  000DAC  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1707  000DAE  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1708  000DB0  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1709  000DB2  5083               	movf	131,w,c	;volatile
  1710  000DB4  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1711  000DB6  0BBF               	andlw	-65
  1712  000DB8  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1713  000DBA  6E83               	movwf	131,c	;volatile
  1714                           
  1715                           ;flexlcd.h: 154: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010
      +                          000)>>4;
  1716  000DBC  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1717  000DC0  0E05               	movlw	5
  1718  000DC2  6E02               	movwf	(??_Lcd_Cmd+1)^0,c
  1719  000DC4                     u55:
  1720  000DC4  90D8               	bcf	status,0,c
  1721  000DC6  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1722  000DC8  2E02               	decfsz	(??_Lcd_Cmd+1)^0,f,c
  1723  000DCA  EFE2  F006         	goto	u55
  1724  000DCE  0E01               	movlw	1
  1725  000DD0  1601               	andwf	??_Lcd_Cmd^0,f,c
  1726  000DD2  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1727  000DD4  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1728  000DD6  5083               	movf	131,w,c	;volatile
  1729  000DD8  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1730  000DDA  0BDF               	andlw	-33
  1731  000DDC  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1732  000DDE  6E83               	movwf	131,c	;volatile
  1733  000DE0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1734  000DE4  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1735  000DE6  0E0F               	movlw	15
  1736  000DE8  1601               	andwf	??_Lcd_Cmd^0,f,c
  1737  000DEA  0E01               	movlw	1
  1738  000DEC  1601               	andwf	??_Lcd_Cmd^0,f,c
  1739  000DEE  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1740  000DF0  5083               	movf	131,w,c	;volatile
  1741  000DF2  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1742  000DF4  0BEF               	andlw	-17
  1743  000DF6  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1744  000DF8  6E83               	movwf	131,c	;volatile
  1745  000DFA                     
  1746                           ;flexlcd.h: 155: _delay(10);
  1747  000DFA  0E03               	movlw	3
  1748  000DFC                     u927:
  1749  000DFC  2EE8               	decfsz	wreg,f,c
  1750  000DFE  D7FE               	bra	u927
  1751  000E00  F000               	nop	
  1752  000E02                     
  1753                           ;flexlcd.h: 156: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1754  000E02  8284               	bsf	132,1,c	;volatile
  1755  000E04  0E03               	movlw	3
  1756  000E06                     u937:
  1757  000E06  2EE8               	decfsz	wreg,f,c
  1758  000E08  D7FE               	bra	u937
  1759  000E0A  F000               	nop	
  1760  000E0C  9284               	bcf	132,1,c	;volatile
  1761                           
  1762                           ;flexlcd.h: 157: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000
      +                          100)>>2;
  1763  000E0E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1764  000E12  90D8               	bcf	status,0,c
  1765  000E14  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1766  000E16  90D8               	bcf	status,0,c
  1767  000E18  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1768  000E1A  90D8               	bcf	status,0,c
  1769  000E1C  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1770  000E1E  0E01               	movlw	1
  1771  000E20  1601               	andwf	??_Lcd_Cmd^0,f,c
  1772  000E22  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1773  000E24  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1774  000E26  5083               	movf	131,w,c	;volatile
  1775  000E28  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1776  000E2A  0B7F               	andlw	-129
  1777  000E2C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1778  000E2E  6E83               	movwf	131,c	;volatile
  1779  000E30  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1780  000E34  90D8               	bcf	status,0,c
  1781  000E36  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1782  000E38  90D8               	bcf	status,0,c
  1783  000E3A  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1784  000E3C  0E01               	movlw	1
  1785  000E3E  1601               	andwf	??_Lcd_Cmd^0,f,c
  1786  000E40  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1787  000E42  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1788  000E44  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1789  000E46  5083               	movf	131,w,c	;volatile
  1790  000E48  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1791  000E4A  0BBF               	andlw	-65
  1792  000E4C  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1793  000E4E  6E83               	movwf	131,c	;volatile
  1794                           
  1795                           ;flexlcd.h: 158: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000
      +                          001);
  1796  000E50  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1797  000E54  90D8               	bcf	status,0,c
  1798  000E56  3201               	rrcf	??_Lcd_Cmd^0,f,c
  1799  000E58  0E01               	movlw	1
  1800  000E5A  1601               	andwf	??_Lcd_Cmd^0,f,c
  1801  000E5C  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1802  000E5E  4601               	rlncf	??_Lcd_Cmd^0,f,c
  1803  000E60  5083               	movf	131,w,c	;volatile
  1804  000E62  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1805  000E64  0BDF               	andlw	-33
  1806  000E66  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1807  000E68  6E83               	movwf	131,c	;volatile
  1808  000E6A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  1809  000E6E  0E01               	movlw	1
  1810  000E70  1601               	andwf	??_Lcd_Cmd^0,f,c
  1811  000E72  3A01               	swapf	??_Lcd_Cmd^0,f,c
  1812  000E74  5083               	movf	131,w,c	;volatile
  1813  000E76  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1814  000E78  0BEF               	andlw	-17
  1815  000E7A  1801               	xorwf	??_Lcd_Cmd^0,w,c
  1816  000E7C  6E83               	movwf	131,c	;volatile
  1817  000E7E                     
  1818                           ;flexlcd.h: 159: _delay(10);
  1819  000E7E  0E03               	movlw	3
  1820  000E80                     u947:
  1821  000E80  2EE8               	decfsz	wreg,f,c
  1822  000E82  D7FE               	bra	u947
  1823  000E84  F000               	nop	
  1824  000E86                     
  1825                           ;flexlcd.h: 160: PORTEbits.RE1 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PO
      +                          RTEbits.RE1 = 0;
  1826  000E86  8284               	bsf	132,1,c	;volatile
  1827  000E88  0E03               	movlw	3
  1828  000E8A                     u957:
  1829  000E8A  2EE8               	decfsz	wreg,f,c
  1830  000E8C  D7FE               	bra	u957
  1831  000E8E  F000               	nop	
  1832  000E90  9284               	bcf	132,1,c	;volatile
  1833  000E92                     
  1834                           ;flexlcd.h: 161: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  1835  000E92  0E0F               	movlw	15
  1836  000E94  6E01               	movwf	??_Lcd_Cmd^0,c
  1837  000E96  0E48               	movlw	72
  1838  000E98                     u967:
  1839  000E98  2EE8               	decfsz	wreg,f,c
  1840  000E9A  D7FE               	bra	u967
  1841  000E9C  2E01               	decfsz	??_Lcd_Cmd^0,f,c
  1842  000E9E  D7FC               	bra	u967
  1843  000EA0  0012               	return		;funcret
  1844  000EA2                     __end_of_Lcd_Cmd:
  1845                           	callstack 0
  1846                           
  1847                           	psect	rparam
  1848  0000                     
  1849                           	psect	idloc
  1850                           
  1851                           ;Config register IDLOC0 @ 0x200000
  1852                           ;	unspecified, using default values
  1853  200000                     	org	2097152
  1854  200000  FF                 	db	255
  1855                           
  1856                           ;Config register IDLOC1 @ 0x200001
  1857                           ;	unspecified, using default values
  1858  200001                     	org	2097153
  1859  200001  FF                 	db	255
  1860                           
  1861                           ;Config register IDLOC2 @ 0x200002
  1862                           ;	unspecified, using default values
  1863  200002                     	org	2097154
  1864  200002  FF                 	db	255
  1865                           
  1866                           ;Config register IDLOC3 @ 0x200003
  1867                           ;	unspecified, using default values
  1868  200003                     	org	2097155
  1869  200003  FF                 	db	255
  1870                           
  1871                           ;Config register IDLOC4 @ 0x200004
  1872                           ;	unspecified, using default values
  1873  200004                     	org	2097156
  1874  200004  FF                 	db	255
  1875                           
  1876                           ;Config register IDLOC5 @ 0x200005
  1877                           ;	unspecified, using default values
  1878  200005                     	org	2097157
  1879  200005  FF                 	db	255
  1880                           
  1881                           ;Config register IDLOC6 @ 0x200006
  1882                           ;	unspecified, using default values
  1883  200006                     	org	2097158
  1884  200006  FF                 	db	255
  1885                           
  1886                           ;Config register IDLOC7 @ 0x200007
  1887                           ;	unspecified, using default values
  1888  200007                     	org	2097159
  1889  200007  FF                 	db	255
  1890                           
  1891                           	psect	config
  1892                           
  1893                           ;Config register CONFIG1L @ 0x300000
  1894                           ;	PLL Prescaler Selection bits
  1895                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1896                           ;	System Clock Postscaler Selection bits
  1897                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1898                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1899                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1900  300000                     	org	3145728
  1901  300000  00                 	db	0
  1902                           
  1903                           ;Config register CONFIG1H @ 0x300001
  1904                           ;	Oscillator Selection bits
  1905                           ;	FOSC = HS, HS oscillator (HS)
  1906                           ;	Fail-Safe Clock Monitor Enable bit
  1907                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1908                           ;	Internal/External Oscillator Switchover bit
  1909                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1910  300001                     	org	3145729
  1911  300001  0C                 	db	12
  1912                           
  1913                           ;Config register CONFIG2L @ 0x300002
  1914                           ;	Power-up Timer Enable bit
  1915                           ;	PWRT = OFF, PWRT disabled
  1916                           ;	Brown-out Reset Enable bits
  1917                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1918                           ;	Brown-out Reset Voltage bits
  1919                           ;	BORV = 3, Minimum setting 2.05V
  1920                           ;	USB Voltage Regulator Enable bit
  1921                           ;	VREGEN = OFF, USB voltage regulator disabled
  1922  300002                     	org	3145730
  1923  300002  1F                 	db	31
  1924                           
  1925                           ;Config register CONFIG2H @ 0x300003
  1926                           ;	Watchdog Timer Enable bit
  1927                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1928                           ;	Watchdog Timer Postscale Select bits
  1929                           ;	WDTPS = 32768, 1:32768
  1930  300003                     	org	3145731
  1931  300003  1E                 	db	30
  1932                           
  1933                           ; Padding undefined space
  1934  300004                     	org	3145732
  1935  300004  FF                 	db	255
  1936                           
  1937                           ;Config register CONFIG3H @ 0x300005
  1938                           ;	CCP2 MUX bit
  1939                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1940                           ;	PORTB A/D Enable bit
  1941                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1942                           ;	Low-Power Timer 1 Oscillator Enable bit
  1943                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1944                           ;	MCLR Pin Enable bit
  1945                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1946  300005                     	org	3145733
  1947  300005  81                 	db	129
  1948                           
  1949                           ;Config register CONFIG4L @ 0x300006
  1950                           ;	Stack Full/Underflow Reset Enable bit
  1951                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1952                           ;	Single-Supply ICSP Enable bit
  1953                           ;	LVP = ON, Single-Supply ICSP enabled
  1954                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1955                           ;	ICPRT = OFF, ICPORT disabled
  1956                           ;	Extended Instruction Set Enable bit
  1957                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1958                           ;	Background Debugger Enable bit
  1959                           ;	DEBUG = 0x1, unprogrammed default
  1960  300006                     	org	3145734
  1961  300006  85                 	db	133
  1962                           
  1963                           ; Padding undefined space
  1964  300007                     	org	3145735
  1965  300007  FF                 	db	255
  1966                           
  1967                           ;Config register CONFIG5L @ 0x300008
  1968                           ;	Code Protection bit
  1969                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1970                           ;	Code Protection bit
  1971                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1972                           ;	Code Protection bit
  1973                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1974                           ;	Code Protection bit
  1975                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1976  300008                     	org	3145736
  1977  300008  0F                 	db	15
  1978                           
  1979                           ;Config register CONFIG5H @ 0x300009
  1980                           ;	Boot Block Code Protection bit
  1981                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1982                           ;	Data EEPROM Code Protection bit
  1983                           ;	CPD = OFF, Data EEPROM is not code-protected
  1984  300009                     	org	3145737
  1985  300009  C0                 	db	192
  1986                           
  1987                           ;Config register CONFIG6L @ 0x30000A
  1988                           ;	Write Protection bit
  1989                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1990                           ;	Write Protection bit
  1991                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1992                           ;	Write Protection bit
  1993                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1994                           ;	Write Protection bit
  1995                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1996  30000A                     	org	3145738
  1997  30000A  0F                 	db	15
  1998                           
  1999                           ;Config register CONFIG6H @ 0x30000B
  2000                           ;	Configuration Register Write Protection bit
  2001                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2002                           ;	Boot Block Write Protection bit
  2003                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2004                           ;	Data EEPROM Write Protection bit
  2005                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2006  30000B                     	org	3145739
  2007  30000B  E0                 	db	224
  2008                           
  2009                           ;Config register CONFIG7L @ 0x30000C
  2010                           ;	Table Read Protection bit
  2011                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2012                           ;	Table Read Protection bit
  2013                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2014                           ;	Table Read Protection bit
  2015                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2016                           ;	Table Read Protection bit
  2017                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2018  30000C                     	org	3145740
  2019  30000C  0F                 	db	15
  2020                           
  2021                           ;Config register CONFIG7H @ 0x30000D
  2022                           ;	Boot Block Table Read Protection bit
  2023                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2024  30000D                     	org	3145741
  2025  30000D  40                 	db	64
  2026                           tosu	equ	0xFFF
  2027                           tosh	equ	0xFFE
  2028                           tosl	equ	0xFFD
  2029                           stkptr	equ	0xFFC
  2030                           pclatu	equ	0xFFB
  2031                           pclath	equ	0xFFA
  2032                           pcl	equ	0xFF9
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           prodh	equ	0xFF4
  2038                           prodl	equ	0xFF3
  2039                           indf0	equ	0xFEF
  2040                           postinc0	equ	0xFEE
  2041                           postdec0	equ	0xFED
  2042                           preinc0	equ	0xFEC
  2043                           plusw0	equ	0xFEB
  2044                           fsr0h	equ	0xFEA
  2045                           fsr0l	equ	0xFE9
  2046                           wreg	equ	0xFE8
  2047                           indf1	equ	0xFE7
  2048                           postinc1	equ	0xFE6
  2049                           postdec1	equ	0xFE5
  2050                           preinc1	equ	0xFE4
  2051                           plusw1	equ	0xFE3
  2052                           fsr1h	equ	0xFE2
  2053                           fsr1l	equ	0xFE1
  2054                           bsr	equ	0xFE0
  2055                           indf2	equ	0xFDF
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           preinc2	equ	0xFDC
  2059                           plusw2	equ	0xFDB
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    4
    Data        1
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_tc_tecla
    _tc_tecla->_atraso_ms
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3487
                                             12 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _tc_tecla                                             7     5      2     912
                                              5 COMRAM     7     5      2
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            5     3      2     472
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3    2245
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _tc_tecla
     _atraso_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      10       1       16.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      20        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Nov 18 11:42:06 2020

                     l20 0B22                       l22 0B0A                       l15 0AE2  
                     l32 0B8A                       l25 0B62                       l17 0ACC  
                     l42 0C40                       l27 0B4A                       l95 0F12  
                     l96 0F5E                       l97 0FB0                       u35 0D84  
                     u45 0D9E                       u55 0DC4                       u65 0C50  
                     u75 0C6A                       u85 0C90                      l110 1040  
                    l126 0D74                      l129 0EA0                      l172 1088  
                    l156 0A70                      l169 1052                      l940 0DFA  
                    l950 0E86                      l942 0E02                      l952 0E88  
                    l944 0E04                      l936 0D78                      l960 0C48  
                    l954 0E90                      l946 0E0C                      l938 0D7C  
                    l970 0D4A                      l962 0CC6                      l956 0E92  
                    l948 0E7E                      l980 0D66                      l972 0D52  
                    l964 0CCE                      l974 0D54                      l966 0CD0  
                    l958 0C44                      l976 0D5C                      l968 0CD8  
                    l978 0D5E                      u420 106E                      u500 0B30  
                    u421 106A                      u501 0B2C                      u270 0F5E  
                    u430 1088                      u510 0B4A                      u271 0F5A  
                    u431 1084                      u511 0B46                      u600 0C22  
                    u520 0B58                      u440 0AB2                      u601 0C1E  
                    u521 0B54                      u441 0AAE                      u610 0C36  
                    u530 0B70                      u450 0ACC                      u611 0C32  
                    u531 0B6C                      u451 0AC8                      u620 1040  
                    u540 0B8A                      u460 0ADA                      u700 09BA  
                    u621 103C                      u541 0B86                      u461 0AD6  
                    u701 09B6                      u550 0B98                      u470 0AF0  
                    u710 09E2                      u630 08A2                      u551 0B94  
                    u471 0AEC                      u711 09DE                      u631 089E  
                    u560 0BC6                      u480 0B0A                      u720 0A0A  
                    u640 08CA                      u561 0BC2                      u481 0B06  
                    u721 0A06                      u641 08C6                      u570 0BF0  
                    u490 0B18                      u730 0A32                      u650 08F2  
                    u571 0BEC                      u491 0B14                      u731 0A2E  
                    u651 08EE                      u580 0C02                      u740 0A5A  
                    u660 091A                      u581 0BFE                      u741 0A56  
                    u661 0916                      u590 0C12                      u670 0942  
                    u807 0D60                      u591 0C0E                      u671 093E  
                    u680 096A                      u817 0D6C                      u681 0966  
                    u690 0992                      u907 0F78                      u827 0EC0  
                    u691 098E                      u917 0F90                      u837 0ECE  
                    u757 0872                      u927 0DFC                      u847 0EDC  
                    u767 0CC8                      u937 0E06                      u857 0EEA  
                    u777 0CD2                      u947 0E80                      u867 0EF8  
                    u787 0D4C                      u957 0E8A                      u877 0F06  
                    u797 0D56                      u967 0E98                      u887 0F2C  
                    u897 0F44                      _key 0010                      wreg 000FE8  
                   l1100 0F9E                     l1110 0FAA                     l1102 0F9E  
                   l1104 0FA4                     l1106 0FA4                     l1108 0FAA  
                   l1060 0F0E                     l1300 0BD2                     l1070 0F34  
                   l1230 1042                     l1310 0C22                     l1302 0BDA  
                   l1080 0F4C                     l1072 0F36                     l1056 0EA2  
                   l1320 0FB4                     l1240 105E                     l1232 104E  
                   l1312 0C24                     l1304 0BF0                     l1400 09D0  
                   l1090 0F84                     l1082 0F76                     l1074 0F38  
                   l1066 0F2A                     l1058 0EBA                     l1322 0FB8  
                   l1242 106E                     l1314 0C36                     l1306 0C02  
                   l1250 0A8C                     l1410 0A32                     l1402 09E2  
                   l1092 0F86                     l1084 0F7E                     l1076 0F3A  
                   l1068 0F32                     l1340 1024                     l1324 0FC2  
                   l1332 0FE0                     l1244 1072                     l1316 0C3A  
                   l1308 0C12                     l1260 0AB2                     l1412 0A48  
                   l1404 09F8                     l1094 0F88                     l1086 0F80  
                   l1078 0F3C                     l1326 0FCC                     l1334 1006  
                   l1238 105C                     l1270 0AFC                     l1262 0ABE  
                   l1246 0A78                     l1414 0A5A                     l1406 0A0A  
                   l1350 0862                     l1342 081E                     l1096 0F98  
                   l1088 0F82                     l1336 1010                     l1328 0FD6  
                   l1256 0A90                     l1248 0A84                     l1408 0A20  
                   l1352 0868                     l1344 0842                     l1098 0F98  
                   l1338 1020                     l1290 0B98                     l1282 0B58  
                   l1274 0B18                     l1266 0ADA                     l1258 0AA4  
                   l1370 08F2                     l1362 08B8                     l1354 0880  
                   l1346 0844                     l1284 0B70                     l1292 0BA2  
                   l1276 0B30                     l1268 0AF0                     l1380 0930  
                   l1364 08CA                     l1356 0890                     l1348 085E  
                   l1294 0BB4                     l1286 0B7C                     l1278 0B3C  
                   l1382 0942                     l1374 0908                     l1358 08A2  
                   l1296 0BB6                     l1392 0980                     l1376 091A  
                   l1368 08E0                     l1298 0BC6                     l1394 0992  
                   l1386 0958                     l1396 09A8                     l1388 096A  
                   l1398 09BA                     STR_1 0809                     STR_2 080B  
                   STR_3 080D                     STR_4 080F                     STR_5 0811  
                   STR_6 0813                     STR_7 0815                     STR_8 0817  
                   STR_9 0819                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 081E  
                   start 0000          __end_of_Lcd_Cmd 0EA2          __end_of_Lcd_Out 1042  
           ___param_bank 000000               _Lcd_Chr_CP 0C42                    ?_main 0001  
                  STR_10 0807                    STR_11 081B                    STR_12 0805  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96                    _linha 0801  
                  _tecla 000F                    tablat 000FF5                    status 000FD8  
       __end_of_Lcd_Init 0FB2          __initialization 108A             __end_of_main 0A78  
                 ??_main 000D            __activetblptr 000002          tc_tecla@timeout 0006  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _INTCON 000FF2  
              ??_Lcd_Cmd 0001                ??_Lcd_Out 0007              ?_Lcd_Chr_CP 0001  
       __end_of_tc_tecla 0C42             __pdataCOMRAM 0010             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 109E            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_linha 0805                ?_Lcd_Init 0001  
     __size_of_atraso_ms 0048      __size_of_Lcd_Chr_CP 0134              tc_tecla@ret 000B  
            tc_tecla@tmp 000A                  _INTCON2 000FF1                  _INTCON3 000FF0  
             ??_Lcd_Init 0004                  _Lcd_Cmd 0D76                  _Lcd_Out 0FB2  
              ?_tc_tecla 0006                  __Hparam 0000                  __Lparam 0000  
      __end_of_atraso_ms 108A             __psmallconst 0800                  __pcinit 108A  
                __ramtop 0800                  __ptext0 081E                  __ptext1 0A78  
                __ptext2 1042                  __ptext3 0FB2                  __ptext4 0C42  
                __ptext5 0EA2                  __ptext6 0D76     end_of_initialization 109E  
          __Lmediumconst 0000               ??_tc_tecla 0008             ??_Lcd_Chr_CP 0001  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISDbits 000F95  
              _TRISEbits 000F96       __end_of_Lcd_Chr_CP 0D76               atraso_ms@i 0003  
             atraso_ms@j 0005            __pidataCOMRAM 10A8      start_initialization 108A  
          Lcd_Out@buffer 0005        __size_of_Lcd_Init 0110              __pbssCOMRAM 000F  
               ?_Lcd_Cmd 0001                 ?_Lcd_Out 0004               tc_tecla@to 0008  
      __size_of_tc_tecla 01CA                _atraso_ms 1042              __smallconst 0800  
         atraso_ms@valor 0001                 Lcd_Out@x 0004                 Lcd_Out@y 0007  
           Lcd_Init@data 0005               ?_atraso_ms 0001                 _Lcd_Init 0EA2  
       __size_of_Lcd_Cmd 012C         __size_of_Lcd_Out 0090                 __Hrparam 0000  
               __Lrparam 0000                tc_tecla@i 000C           Lcd_Chr_CP@data 0003  
            Lcd_Cmd@data 0003            __size_of_main 025A                 _tc_tecla 0A78  
            ??_atraso_ms 0003              Lcd_Out@data 0008  
